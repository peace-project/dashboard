[
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Empty",
  "description": "A receive-reply pair with an intermediate empty.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\194452380\\Empty.bpel",
   "files\\engineIndependent\\194452380\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Empty__Empty",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{"type": "ExitAssertion"}],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Exit",
  "description": "A receive-reply pair with an intermediate exit. There should not be a normal response.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1989002816\\Exit.bpel",
   "files\\engineIndependent\\1989002816\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Exit__Exit",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Input Value 13 should return validation fault-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "13",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "invalidVariables",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Validate",
  "description": "A receive-reply pair with an intermediate variable validation. The variable to be validated describes a month, so only values in the range of 1 and 12 should validate successfully.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1680301904\\Validate.bpel",
   "files\\engineIndependent\\1680301904\\TestInterface.wsdl",
   "files\\engineIndependent\\1680301904\\months.xsd"
  ],
  "featureID": "Conformance__BPEL__basic__Validate__Validate",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "invalidVariables",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Validate-InvalidVariables",
  "description": "A receive-reply pair with an intermediate variable validation. The variable to be validated is of type xs:int and xs:boolean is copied into it.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1453715235\\Validate-InvalidVariables.bpel",
   "files\\engineIndependent\\1453715235\\TestInterface.wsdl",
   "files\\engineIndependent\\1453715235\\months.xsd"
  ],
  "featureID": "Conformance__BPEL__basic__Validate__Validate-InvalidVariables",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "uninitializedVariable",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Variables-UninitializedVariableFault-Reply",
  "description": "A receive-reply pair where the variable of the reply is not initialized.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\703932207\\Variables-UninitializedVariableFault-Reply.bpel",
   "files\\engineIndependent\\703932207\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Variables__Variables-UninitializedVariableFault-Reply",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "uninitializedVariable",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Variables-UninitializedVariableFault-Invoke",
  "description": "A receive-reply pair with intermediate invoke. The inputVariable of the invoke is not initialized.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\596231311\\Variables-UninitializedVariableFault-Invoke.bpel",
   "files\\engineIndependent\\596231311\\TestInterface.wsdl",
   "files\\engineIndependent\\596231311\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Variables__Variables-UninitializedVariableFault-Invoke",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "DefaultValue-10-Should-Be-Returned-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "10"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Variables-DefaultInitialization",
  "description": "A receive-reply pair where the variable of the reply is assigned with a default value.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\785686344\\Variables-DefaultInitialization.bpel",
   "files\\engineIndependent\\785686344\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Variables__Variables-DefaultInitialization",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Input Value 13 should return validation fault-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "13",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "invalidVariables",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Validate",
  "description": "A receive-reply pair with an intermediate assign that has validate set to yes. The assign copies to a variable that represents a month and the validation should fail for values not in the range of one to twelve.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2082666559\\Assign-Validate.bpel",
   "files\\engineIndependent\\2082666559\\TestInterface.wsdl",
   "files\\engineIndependent\\2082666559\\months.xsd"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Validate",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Property",
  "description": "A receive-reply pair with an intermediate assign that copies from a property instead of a variable.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1654535040\\Assign-Property.bpel",
   "files\\engineIndependent\\1654535040\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Property",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-To-Property",
  "description": "A receive-reply pair with an intermediate assign that copies to a property instead of a variable.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1556881796\\Assign-To-Property.bpel",
   "files\\engineIndependent\\1556881796\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-To-Property",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "0"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-PartnerLink",
  "description": "A receive-reply pair with an intermediate assign that assigns a WS-A EndpointReference to a partnerLink which is used in a subsequent invoke.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1591711145\\Assign-PartnerLink.bpel",
   "files\\engineIndependent\\1591711145\\TestInterface.wsdl",
   "files\\engineIndependent\\1591711145\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-PartnerLink",
  "testPartners": [
   {
    "external": false,
    "interfaceDescription": "TestPartner.wsdl",
    "publishedUrl": "http://localhost:2000/bpel-testpartner",
    "rules": [
     {
      "input": {"type": "any"},
      "operation": "startProcessAsync"
     },
     {
      "input": {"type": "any"},
      "operation": "startProcessWithEmptyMessage"
     },
     {
      "output": {
       "type": "fault",
       "value": "UNDECLARED"
      },
      "input": {
       "type": "integer",
       "value": -5
      },
      "operation": "startProcessSync"
     },
     {
      "output": {
       "type": "fault",
       "value": "DECLARED"
      },
      "input": {
       "type": "integer",
       "value": -6
      },
      "operation": "startProcessSync"
     },
     {
      "output": {
       "type": "script",
       "value": "ConcurrencyDetector.access()"
      },
      "input": {
       "type": "integer",
       "value": 100
      },
      "operation": "startProcessSync"
     },
     {
      "output": {
       "type": "script",
       "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
      },
      "input": {
       "type": "integer",
       "value": 101
      },
      "operation": "startProcessSync"
     },
     {
      "output": {
       "type": "script",
       "value": "ConcurrencyDetector.getNumberOfCalls()"
      },
      "input": {
       "type": "integer",
       "value": 102
      },
      "operation": "startProcessSync"
     },
     {
      "output": {
       "type": "script",
       "value": "ConcurrencyDetector.reset()"
      },
      "input": {
       "type": "integer",
       "value": 103
      },
      "operation": "startProcessSync"
     },
     {
      "output": {"type": "echo"},
      "input": {"type": "any"},
      "operation": "startProcessSync"
     }
    ],
    "type": "WSDL",
    "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
   },
   {
    "external": false,
    "interfaceDescription": "TestPartner.wsdl",
    "publishedUrl": "http://localhost:2000/bpel-assigned-testpartner",
    "rules": [],
    "type": "WSDL",
    "wsdlUrl": "http://localhost:2000/bpel-assigned-testpartner?wsdl"
   }
  ]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Element-Variable",
  "description": "A receive-reply pair with an intermediate assign that copies the input to a element variable and from there to the output variable.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1307363832\\Assign-Element-Variable.bpel",
   "files\\engineIndependent\\1307363832\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Element-Variable",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-PartnerLink-PartnerRole",
  "description": "A receive-reply pair with an intermediate assign that assigns an existing partnerLink to another partnerLink of the same type which is used in a subsequent invoke.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\940869320\\Assign-PartnerLink-PartnerRole.bpel",
   "files\\engineIndependent\\940869320\\TestInterface.wsdl",
   "files\\engineIndependent\\940869320\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-PartnerLink-PartnerRole",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "unsupportedReference",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-PartnerLink-UnsupportedReference",
  "description": "A receive-reply pair with an intermediate assign that assigns a bogus reference to a partnerLink which is used in a subsequent invoke. The reference scheme should not be supported by any engine and fail with a corresponding fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\547522156\\Assign-PartnerLink-UnsupportedReference.bpel",
   "files\\engineIndependent\\547522156\\TestInterface.wsdl",
   "files\\engineIndependent\\547522156\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-PartnerLink-UnsupportedReference",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "mismatchedAssignment",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-MismatchedAssignmentFailure",
  "description": "An assignment between two incompatible types. A mismatchedAssignmentFailure should be thrown.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\82930181\\Assign-MismatchedAssignmentFailure.bpel",
   "files\\engineIndependent\\82930181\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-MismatchedAssignmentFailure",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Literal",
  "description": "A receive-reply pair with an intermediate assign that copies a literal.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\670158684\\Assign-Literal.bpel",
   "files\\engineIndependent\\670158684\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Literal",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Expression-From",
  "description": "A receive-reply pair with an intermediate assign that uses an expression in a from element.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\546915540\\Assign-Expression-From.bpel",
   "files\\engineIndependent\\546915540\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Expression-From",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Expression-To",
  "description": "A receive-reply pair with an intermediate assign that uses an expression in a to element.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\407272997\\Assign-Expression-To.bpel",
   "files\\engineIndependent\\407272997\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Expression-To",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-ExpressionLanguage-From",
  "description": "A receive-reply pair with an intermediate assign that uses an expression with expressionLanguage declaration in a from element.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\529107804\\Assign-ExpressionLanguage-From.bpel",
   "files\\engineIndependent\\529107804\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-ExpressionLanguage-From",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-ExpressionLanguage-To",
  "description": "A receive-reply pair with an intermediate assign that uses an expression with expressionLanguage declaration in a to element.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\237422253\\Assign-ExpressionLanguage-To.bpel",
   "files\\engineIndependent\\237422253\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-ExpressionLanguage-To",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "10"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Int",
  "description": "A receive-reply pair combined with an assign and an invoke in between. The assign copies an int value as an expression to the inputVariable of the invoke. The invocation fails if the value copied is not an int (but, for instance, a float).",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1312287332\\Assign-Int.bpel",
   "files\\engineIndependent\\1312287332\\TestInterface.wsdl",
   "files\\engineIndependent\\1312287332\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Int",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "selectionFailure",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-SelectionFailure",
  "description": "A receive-reply pair with an intermediate assign that uses a from that retuns zero nodes. This should trigger a selectionFailure.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\472634889\\Assign-SelectionFailure.bpel",
   "files\\engineIndependent\\472634889\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-SelectionFailure",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Copy-Query",
  "description": "A process with a receive-reply pair with an intermediate assign that uses a query in a from element.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1976455109\\Assign-Copy-Query.bpel",
   "files\\engineIndependent\\1976455109\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-Query",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Copy-QueryLanguage",
  "description": "A process with a receive-reply pair with an intermediate assign that uses a query with explicit language declaration in a from element.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1527497549\\Assign-Copy-QueryLanguage.bpel",
   "files\\engineIndependent\\1527497549\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-QueryLanguage",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-To-Query",
  "description": "A process with a receive-reply pair with an intermediate assign that uses a query in a to element.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\736506241\\Assign-To-Query.bpel",
   "files\\engineIndependent\\736506241\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-To-Query",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-To-QueryLanguage",
  "description": "A process with a receive-reply pair with an intermediate assign that uses a query with explicit language declaration in a to element.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1498290169\\Assign-To-QueryLanguage.bpel",
   "files\\engineIndependent\\1498290169\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-To-QueryLanguage",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "mismatchedAssignmentFailure",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Copy-KeepSrcElementName",
  "description": "A receive-reply pair with an intermediate assign with a copy that has keepSrcElementName set to yes. This should trigger a fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1323595403\\Assign-Copy-KeepSrcElementName.bpel",
   "files\\engineIndependent\\1323595403\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-KeepSrcElementName",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "-1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Copy-IgnoreMissingFromData",
  "description": "A receive-reply pair with an intermediate assign with a copy that has ignoreMissingFromData set to yes and contains a from element with an erroneous xpath statement. Therefore, the assign should be ignored.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1095949509\\Assign-Copy-IgnoreMissingFromData.bpel",
   "files\\engineIndependent\\1095949509\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-IgnoreMissingFromData",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Copy-GetVariableProperty",
  "description": "A receive-reply pair with an intermediate assign that uses the getVariableProperty function.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\407350758\\Assign-Copy-GetVariableProperty.bpel",
   "files\\engineIndependent\\407350758\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-GetVariableProperty",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Copy-DoXslTransform",
  "description": "A receive-reply pair with an intermediate assign that uses the doXslTransform function.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1751050317\\Assign-Copy-DoXslTransform.bpel",
   "files\\engineIndependent\\1751050317\\TestInterface.wsdl",
   "files\\engineIndependent\\1751050317\\echo.xslt",
   "files\\engineIndependent\\1751050317\\notCompileable.xslt"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-DoXslTransform",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "xsltInvalidSource",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Copy-DoXslTransform-InvalidSourceFault",
  "description": "A receive-reply pair with an intermediate assign that uses the doXslTransform function without a proper source for the script.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1178814262\\Assign-Copy-DoXslTransform-InvalidSourceFault.bpel",
   "files\\engineIndependent\\1178814262\\TestInterface.wsdl",
   "files\\engineIndependent\\1178814262\\echo.xslt",
   "files\\engineIndependent\\1178814262\\notCompileable.xslt"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-DoXslTransform-InvalidSourceFault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "xsltStylesheetNotFound",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Copy-DoXslTransform-XsltStylesheetNotFound",
  "description": "A receive-reply pair with an intermediate assign that uses the doXslTransform function, but where the stylesheet does not exist.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1979902842\\Assign-Copy-DoXslTransform-XsltStylesheetNotFound.bpel",
   "files\\engineIndependent\\1979902842\\TestInterface.wsdl",
   "files\\engineIndependent\\1979902842\\echo.xslt",
   "files\\engineIndependent\\1979902842\\notCompileable.xslt"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-DoXslTransform-XsltStylesheetNotFound",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "subLanguageExecutionFault",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-Copy-DoXslTransform-SubLanguageExecutionFault",
  "description": "A receive-reply pair with an intermediate assign that uses the doXslTransform function, but where the actual stylesheet has errors.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2090575864\\Assign-Copy-DoXslTransform-SubLanguageExecutionFault.bpel",
   "files\\engineIndependent\\2090575864\\TestInterface.wsdl",
   "files\\engineIndependent\\2090575864\\echo.xslt",
   "files\\engineIndependent\\2090575864\\notCompileable.xslt"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-DoXslTransform-SubLanguageExecutionFault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "-1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Assign-VariablesUnchangedInspiteOfFault",
  "description": "A receive-reply pair with two intermediate assigns, the second of which produces a fault that is handled by the process-level faultHandler to send the response. Because of the fault, the second assign should have no impact on the response.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1050450590\\Assign-VariablesUnchangedInspiteOfFault.bpel",
   "files\\engineIndependent\\1050450590\\TestInterface.wsdl",
   "files\\engineIndependent\\1050450590\\echo.xslt",
   "files\\engineIndependent\\1050450590\\notCompileable.xslt"
  ],
  "featureID": "Conformance__BPEL__basic__Assign__Assign-VariablesUnchangedInspiteOfFault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-Async",
  "description": "A receive-reply pair with an intermediate asynchronous invoke.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\697424829\\Invoke-Async.bpel",
   "files\\engineIndependent\\697424829\\TestInterface.wsdl",
   "files\\engineIndependent\\697424829\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Async",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-Sync",
  "description": "A receive-reply pair with an intermediate synchronous invoke.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1823071244\\Invoke-Sync.bpel",
   "files\\engineIndependent\\1823071244\\TestInterface.wsdl",
   "files\\engineIndependent\\1823071244\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Sync",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-InitializePartnerRole-Yes-Async",
  "description": "A receive-reply pair with an intermediate asynchronous invoke. The invoke has a partnerLink with initializePartnerRole attribute set to yes.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1830697090\\Invoke-InitializePartnerRole-Yes-Async.bpel",
   "files\\engineIndependent\\1830697090\\TestInterface.wsdl",
   "files\\engineIndependent\\1830697090\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-InitializePartnerRole-Yes-Async",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-InitializePartnerRole-Yes-Sync",
  "description": "A receive-reply pair with an intermediate synchronous invoke. The invoke has a partnerLink with initializePartnerRole attribute set to yes.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1049865561\\Invoke-InitializePartnerRole-Yes-Sync.bpel",
   "files\\engineIndependent\\1049865561\\TestInterface.wsdl",
   "files\\engineIndependent\\1049865561\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-InitializePartnerRole-Yes-Sync",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-InitializePartnerRole-No-Async",
  "description": "A receive-reply pair with an intermediate asynchronous invoke. The invoke has a partnerLink with initializePartnerRole attribute set to no.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1654273736\\Invoke-InitializePartnerRole-No-Async.bpel",
   "files\\engineIndependent\\1654273736\\TestInterface.wsdl",
   "files\\engineIndependent\\1654273736\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-InitializePartnerRole-No-Async",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-InitializePartnerRole-No-Sync",
  "description": "A receive-reply pair with an intermediate synchronous invoke. The invoke has a partnerLink with initializePartnerRole attribute set to no.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1439378639\\Invoke-InitializePartnerRole-No-Sync.bpel",
   "files\\engineIndependent\\1439378639\\TestInterface.wsdl",
   "files\\engineIndependent\\1439378639\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-InitializePartnerRole-No-Sync",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "-5",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "CustomFault",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-Sync-Fault",
  "description": "A receive-reply pair with an intermediate synchronous invoke that should trigger a fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1899150057\\Invoke-Sync-Fault.bpel",
   "files\\engineIndependent\\1899150057\\TestInterface.wsdl",
   "files\\engineIndependent\\1899150057\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Sync-Fault",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-Empty",
  "description": "A receive-reply pair with an intermediate invoke of an operation that has no message associated with it. No definition of inputVariable or outputVariable is required.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\693917932\\Invoke-Empty.bpel",
   "files\\engineIndependent\\693917932\\TestInterface.wsdl",
   "files\\engineIndependent\\693917932\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Empty",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-ToParts",
  "description": "A receive-reply pair with an intermediate synchronous invoke that uses the toParts syntax.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\680411860\\Invoke-ToParts.bpel",
   "files\\engineIndependent\\680411860\\TestInterface.wsdl",
   "files\\engineIndependent\\680411860\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-ToParts",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-FromParts",
  "description": "A receive-reply pair with an intermediate synchronous invoke that uses the fromParts syntax.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1481651101\\Invoke-FromParts.bpel",
   "files\\engineIndependent\\1481651101\\TestInterface.wsdl",
   "files\\engineIndependent\\1481651101\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-FromParts",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-Correlation-Pattern-InitAsync",
  "description": "An asynchronous receive that initiates a correlationSet used by a subsequent invoke that also uses a request-response pattern and is thereafter followed by receive-reply pair that also uses the correlationSet.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\598735285\\Invoke-Correlation-Pattern-InitAsync.bpel",
   "files\\engineIndependent\\598735285\\TestInterface.wsdl",
   "files\\engineIndependent\\598735285\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Correlation-Pattern-InitAsync",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "0"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-Correlation-Pattern-InitSync",
  "description": "A synchronous receive that initiates a correlationSet used by a subsequent invoke that also uses a request-response pattern and is thereafter followed by receive-reply pair that also uses the correlationSet.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\673964268\\Invoke-Correlation-Pattern-InitSync.bpel",
   "files\\engineIndependent\\673964268\\TestInterface.wsdl",
   "files\\engineIndependent\\673964268\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Correlation-Pattern-InitSync",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "-6",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "0"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-Catch",
  "description": "A receive-reply pair with an intermediate invoke that results in a fault for certain input, but catches that fault and replies.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\696119166\\Invoke-Catch.bpel",
   "files\\engineIndependent\\696119166\\TestInterface.wsdl",
   "files\\engineIndependent\\696119166\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Catch",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "-5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "0"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-Catch-UndeclaredFault",
  "description": "A receive-reply pair with an intermediate invoke that results in a fault for certain input, but catches that fault and replies. The fault is not declared in the Web Service Definition of the partner service.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2049463132\\Invoke-Catch-UndeclaredFault.bpel",
   "files\\engineIndependent\\2049463132\\TestInterface.wsdl",
   "files\\engineIndependent\\2049463132\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Catch-UndeclaredFault",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Enter-CatchAll-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "-6",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "-1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-CatchAll",
  "description": "A receive-reply pair with an intermediate invoke that results in a fault for certain input, but catches all faults and replies.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1983903297\\Invoke-CatchAll.bpel",
   "files\\engineIndependent\\1983903297\\TestInterface.wsdl",
   "files\\engineIndependent\\1983903297\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-CatchAll",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Enter-CatchAll-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "-5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "0"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-CatchAll-UndeclaredFault",
  "description": "A receive-reply pair with an intermediate invoke that results in a fault for certain input, but catches all faults and replies.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1870820383\\Invoke-CatchAll-UndeclaredFault.bpel",
   "files\\engineIndependent\\1870820383\\TestInterface.wsdl",
   "files\\engineIndependent\\1870820383\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-CatchAll-UndeclaredFault",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "0"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-CompensateScope-CompensationHandler",
  "description": "A receive-reply pair combined with an invoke that has a compensationHandler, followed by a throw. The fault is caught by the process-level faultHandler containing a compensateScope. That faultHandler triggers the compensationHandler of the invoke which contains the reply.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1607975559\\Invoke-CompensateScope-CompensationHandler.bpel",
   "files\\engineIndependent\\1607975559\\TestInterface.wsdl",
   "files\\engineIndependent\\1607975559\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-CompensateScope-CompensationHandler",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "0"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Invoke-CompensationHandler",
  "description": "A receive-reply pair combined with an invoke that has a compensationHandler, followed by a throw. The fault is caught by the process-level faultHandler. That faultHandler triggers the compensationHandler of the invoke which contains the reply.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\731428073\\Invoke-CompensationHandler.bpel",
   "files\\engineIndependent\\731428073\\TestInterface.wsdl",
   "files\\engineIndependent\\731428073\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Invoke__Invoke-CompensationHandler",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    }
   ]
  }],
  "name": "Receive",
  "description": "A single asynchronous receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\123243932\\Receive.bpel",
   "files\\engineIndependent\\123243932\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Receive__Receive",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Receive-Correlation-InitAsync",
  "description": "Two asynchronous receives, followed by a receive-reply pair, and bound to a single correlationSet.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1596219864\\Receive-Correlation-InitAsync.bpel",
   "files\\engineIndependent\\1596219864\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Receive__Receive-Correlation-InitAsync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "0"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Receive-Correlation-InitSync",
  "description": "One synchronous receive, one asynchronous receive, followed by a receive-reply pair, and bound to a single correlationSet.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1194893377\\Receive-Correlation-InitSync.bpel",
   "files\\engineIndependent\\1194893377\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Receive__Receive-Correlation-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-MessageExchanges",
  "description": "A simple receive-reply pair that uses a messageExchange.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\910120356\\ReceiveReply-MessageExchanges.bpel",
   "files\\engineIndependent\\910120356\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-Multiple-MessageExchanges",
  "description": "A receive-reply pair followed by a receive-reply pair of the same operation that use messageExchanges to define which reply belongs to which receive and the response is the initial value first then the sum of the received values.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\684392395\\ReceiveReply-Multiple-MessageExchanges.bpel",
   "files\\engineIndependent\\684392395\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-Multiple-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-FIFO-MessageExchanges",
  "description": "Two receives of the same operation that use messageExchanges to define which reply belongs to which receive and the response is 1 for the reply to the first receive and 2 for the second reply to the second receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\39686959\\ReceiveReply-FIFO-MessageExchanges.bpel",
   "files\\engineIndependent\\39686959\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-FIFO-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-FILO-MessageExchanges",
  "description": "Two receives of the same operation that use messageExchanges to define which reply belongs to which receive and the response is 2 for the reply to the second receive and 1 for the second reply to the first receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\732176971\\ReceiveReply-FILO-MessageExchanges.bpel",
   "files\\engineIndependent\\732176971\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-FILO-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "ambiguousReceive",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Receive-AmbiguousReceiveFault",
  "description": "An asynchronous receive that initiates two correlationSets, followed by a flow with two sequences that contain synchronous receive-reply pairs for the same operation but differnet correlationSets. Should trigger an ambiguousReceive fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1843871134\\Receive-AmbiguousReceiveFault.bpel",
   "files\\engineIndependent\\1843871134\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Receive__Receive-AmbiguousReceiveFault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "conflictingReceive",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Receive-ConflictingReceiveFault",
  "description": "An asynchronous receive that initiates a correlationSet, followed by a flow with two sequences that contain synchronous receive-reply pair for the same operation and correlationSet. Should trigger a conflictingReceive fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1658239130\\Receive-ConflictingReceiveFault.bpel",
   "files\\engineIndependent\\1658239130\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Receive__Receive-ConflictingReceiveFault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessSyncString",
     "oneWay": false
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "conflictingRequest",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSyncString",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-ConflictingRequestFault",
  "description": "A synchronous interaction, followed by intermediate while that subsequently enables multiple receives that correspond to a single synchronous message exchange. Should trigger a conflictingRequest fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1727580200\\ReceiveReply-ConflictingRequestFault.bpel",
   "files\\engineIndependent\\1727580200\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-ConflictingRequestFault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "correlationViolation",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-CorrelationViolation-No",
  "description": "A receive-reply pair that uses an uninitiated correlationSet and sets initiate to no. Should trigger a correlationViolation fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1050654064\\ReceiveReply-CorrelationViolation-No.bpel",
   "files\\engineIndependent\\1050654064\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-CorrelationViolation-No",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "correlationViolation",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-CorrelationViolation-Yes",
  "description": "Two subsequent receive-reply pairs which share a correlationSet and where both receives have initiate set to yes.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1789472760\\ReceiveReply-CorrelationViolation-Yes.bpel",
   "files\\engineIndependent\\1789472760\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-CorrelationViolation-Yes",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "faultString": "correlationViolation",
       "type": "SoapFaultTestAssertion"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "2"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "ReceiveReply-CorrelationViolation-Join",
  "description": "A receive-reply pair that initates a correlationSet with an intermediate invoke that tries to join the correlationSet. The join operation should only work if the correlationSet was initiate with a certain value.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\361356743\\ReceiveReply-CorrelationViolation-Join.bpel",
   "files\\engineIndependent\\361356743\\TestInterface.wsdl",
   "files\\engineIndependent\\361356743\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-CorrelationViolation-Join",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply",
  "description": "A simple receive-reply pair.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\184349010\\ReceiveReply.bpel",
   "files\\engineIndependent\\184349010\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-Correlation-InitAsync",
  "description": "An asynchronous receive that initiates a correlationSet followed by a receive-reply pair that uses this set.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\927193670\\ReceiveReply-Correlation-InitAsync.bpel",
   "files\\engineIndependent\\927193670\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-Correlation-InitAsync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "0"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 1000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-Correlation-InitSync",
  "description": "A synchronous recieve that initiates a correlationSet followed by a receive-reply pair that uses this set.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1077927535\\ReceiveReply-Correlation-InitSync.bpel",
   "files\\engineIndependent\\1077927535\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-Correlation-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-FromParts",
  "description": "A receive-reply pair that uses the fromPart syntax instead of a variable.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\372030853\\ReceiveReply-FromParts.bpel",
   "files\\engineIndependent\\372030853\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-FromParts",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-ToParts",
  "description": "A receive-reply pair that uses the toPart syntax instead of a variable.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1719211126\\ReceiveReply-ToParts.bpel",
   "files\\engineIndependent\\1719211126\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-ToParts",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "syncFault",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ReceiveReply-Fault",
  "description": "A receive-reply pair replies with a fault instead of a variable.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\564819513\\ReceiveReply-Fault.bpel",
   "files\\engineIndependent\\564819513\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-Fault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "completionConditionFailure",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Throw",
  "description": "A receive-reply pair with an intermediate throw. The response should a soap fault containing the bpel fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1280993724\\Throw.bpel",
   "files\\engineIndependent\\1280993724\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Throw__Throw",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "completionConditionFailure",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Throw-WithoutNamespace",
  "description": "A receive-reply pair with an intermediate throw that uses a bpel fault without explicitly using the bpel namespace. The respone should be a soap fault containing the bpel fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\515286532\\Throw-WithoutNamespace.bpel",
   "files\\engineIndependent\\515286532\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Throw__Throw-WithoutNamespace",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [
      {
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      },
      {
       "faultString": "completionConditionFailure",
       "type": "SoapFaultTestAssertion"
      }
     ],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Throw-FaultData",
  "description": "A receive-reply pair with an intermediate throw that also uses a faultVariable. The content of the faultVariable should be contained in the response.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2061127811\\Throw-FaultData.bpel",
   "files\\engineIndependent\\2061127811\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Throw__Throw-FaultData",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "testFault",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Throw-CustomFault",
  "description": "A receive-reply pair with an intermediate throw that throws a custom fault that undefined in the given namespace. The response should be a soap fault containing the custom fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\687192312\\Throw-CustomFault.bpel",
   "files\\engineIndependent\\687192312\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Throw__Throw-CustomFault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "syncFault",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Throw-CustomFaultInWsdl",
  "description": "A receive-reply pair with an intermediate throw that throws a custom fault defined in the myRole WSDL. The response should be a soap fault containing the custom fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\336328623\\Throw-CustomFaultInWsdl.bpel",
   "files\\engineIndependent\\336328623\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Throw__Throw-CustomFaultInWsdl",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "completionConditionFailure",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Rethrow",
  "description": "A receive activity with an intermediate throw and a fault handler with a catchAll. The fault handler rethrows the fault.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\621008996\\Rethrow.bpel",
   "files\\engineIndependent\\621008996\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Rethrow__Rethrow",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [
      {
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      },
      {
       "faultString": "completionConditionFailure",
       "type": "SoapFaultTestAssertion"
      }
     ],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Rethrow-FaultDataUnmodified",
  "description": "A receive activity with an intermediate throw that uses a faultVariable. A fault handler catches the fault, changes the data, and rethrows the fault. The fault should be the response with unchanged data.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1591738523\\Rethrow-FaultDataUnmodified.bpel",
   "files\\engineIndependent\\1591738523\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Rethrow__Rethrow-FaultDataUnmodified",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [
      {
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      },
      {
       "faultString": "completionConditionFailure",
       "type": "SoapFaultTestAssertion"
      }
     ],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Rethrow-FaultData",
  "description": "A receive activity with an intermediate throw that uses a faultVariable. A fault handler catches and rethrows the fault. The fault should be the response along with the data.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\513512797\\Rethrow-FaultData.bpel",
   "files\\engineIndependent\\513512797\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Rethrow__Rethrow-FaultData",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Wait-For",
  "description": "A receive-reply pair with an intermediate wait that pauses execution for five seconds.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1353887862\\Wait-For.bpel",
   "files\\engineIndependent\\1353887862\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Wait__Wait-For",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "invalidExpressionValue",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Wait-For-InvalidExpressionValue",
  "description": "A receive-reply pair with an intermediate wait. The for element is assigned a value of xs:int, but only xs:duration is allowed.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1589962619\\Wait-For-InvalidExpressionValue.bpel",
   "files\\engineIndependent\\1589962619\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Wait__Wait-For-InvalidExpressionValue",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Wait-Until",
  "description": "A receive-reply pair with an intermediate wait that pauses the execution until a date in the past. Therefore, the wait should complete instantly.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\302683615\\Wait-Until.bpel",
   "files\\engineIndependent\\302683615\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__basic__Wait__Wait-Until",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-Compensate",
  "description": "A scope with a receive-reply pair where the reply is located in a compensationHandler. The scope is followed by a throw and the compensationHandler is invoked from the process-level faultHandler that catches the fault using compensate.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1937753043\\Scope-Compensate.bpel",
   "files\\engineIndependent\\1937753043\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Compensation__Scope-Compensate",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-Compensate-Flow",
  "description": "A scope with a receive-reply pair where the reply data assignment and the reply are linked in a flow nested in compensationHandler. The scope is followed by a throw and the compensationHandler is invoked from the process-level faultHandler that catches the fault using compensate.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\260849416\\Scope-Compensate-Flow.bpel",
   "files\\engineIndependent\\260849416\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Compensation__Scope-Compensate-Flow",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-CompensateScope",
  "description": "A scope with a receive-reply pair where the reply is located in a compensationHandler. The scope is followed by a throw and the compensationHandler is invoked from the process-level faultHandler that catches the fault using compensateScope.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\296810049\\Scope-CompensateScope.bpel",
   "files\\engineIndependent\\296810049\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Compensation__Scope-CompensateScope",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "3"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-ComplexCompensation",
  "description": "Complex scope compensation test case that implements the scenario described in Sec. 12.4.2.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1286030834\\Scope-ComplexCompensation.bpel",
   "files\\engineIndependent\\1286030834\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Compensation__Scope-ComplexCompensation",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-RepeatedCompensation",
  "description": "A scope with a receive-reply pair where the reply is located in a compensationHandler. The scope is followed by a throw. The process-level faultHandler that catches the fault contains two subsequent compensates the second of which should be treated as empty.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1838942352\\Scope-RepeatedCompensation.bpel",
   "files\\engineIndependent\\1838942352\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Compensation__Scope-RepeatedCompensation",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-CorrelationSets-InitAsync",
  "description": "A scope with an asynchronous receive which initiates the correlation set and a receive-reply pair, as well as a scope-level definition of a correlationSet that is used by the messaging activities.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\886729425\\Scope-CorrelationSets-InitAsync.bpel",
   "files\\engineIndependent\\886729425\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__CorrelationSets__Scope-CorrelationSets-InitAsync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-CorrelationSets-InitSync",
  "description": "A scope with two subsequent receive-reply pairs and a scope-level definition of a correlationSet that is used by the messaging activities.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1967725176\\Scope-CorrelationSets-InitSync.bpel",
   "files\\engineIndependent\\1967725176\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__CorrelationSets__Scope-CorrelationSets-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-MessageExchanges",
  "description": "A scope with a receive-reply pair and a scope-level definition of messageExchanges.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1758784364\\Scope-MessageExchanges.bpel",
   "files\\engineIndependent\\1758784364\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__MessageExchanges__Scope-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-Multiple-MessageExchanges",
  "description": "A scope with a receive-reply pair followed by a receive-reply pair of the same operation that use scope-level definition of messageExchanges to define which reply belongs to which receive and the response is the initial value first then the sum of the received values.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\655298267\\Scope-Multiple-MessageExchanges.bpel",
   "files\\engineIndependent\\655298267\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__MessageExchanges__Scope-Multiple-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-PartnerLinks",
  "description": "A scope with a receive-reply pair and an intermediate invoke. The partnerLink which is invoked is defined at scope-level.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2087161188\\Scope-PartnerLinks.bpel",
   "files\\engineIndependent\\2087161188\\TestInterface.wsdl",
   "files\\engineIndependent\\2087161188\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__PartnerLinks__Scope-PartnerLinks",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-Variables",
  "description": "A scope with a receive-reply pair and an intermediate invoke. The partnerLink which is invoked is defined at scope-level.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\164828016\\Scope-Variables.bpel",
   "files\\engineIndependent\\164828016\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Variables__Scope-Variables",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "123",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "3"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-Variables-Overwriting",
  "description": "A scope with a receive-reply pair and another nested scope. The nested scope overwrites a variable of the parent scope. Child-level manipulation of this variable should not be visible at the parent scope.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\257405867\\Scope-Variables-Overwriting.bpel",
   "files\\engineIndependent\\257405867\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Variables__Scope-Variables-Overwriting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "11"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "4",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "14"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "123",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "133"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-Isolated",
  "description": "A receive-reply pair that encloses a flow with ten isolated scopes which all increment the result by one. As the scopes should not run in parallel, the outcome must be deterministic.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\50048917\\Scope-Isolated.bpel",
   "files\\engineIndependent\\50048917\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Scope-Attributes__Scope-Isolated",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "-1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-TerminationHandlers",
  "description": "A scope with a receive-reply pair and a nested scope in between. That scope in turn contains a flow with two parallel scopes. Both scopes pause execution for a short period. The scope that resumes execution first throws a fault caught by the faultHandler of its parent scope. The should trigger the execution of the terminationHandler of its sibling scope.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\496690096\\Scope-TerminationHandlers.bpel",
   "files\\engineIndependent\\496690096\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__TerminationHandlers__Scope-TerminationHandlers",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "-2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-TerminationHandlers-OutboundLink",
  "description": "A receive-reply pair and a nested scope in between. That scope in turn contains a flow with two parallel scopes. Both scopes pause execution for a short period. The scope that resumes execution first throws a fault caught by the faultHandler of its parent scope. The should trigger the execution of the terminationHandler of its sibling scope. The input value is assigned the reply first, in the terminationHandler -1 is assigned to it and in th outbound linked assign -2.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2027489913\\Scope-TerminationHandlers-OutboundLink.bpel",
   "files\\engineIndependent\\2027489913\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__TerminationHandlers__Scope-TerminationHandlers-OutboundLink",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "-1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-TerminationHandlers-FaultNotPropagating",
  "description": "A scope with a receive-reply pair and a nested scope in between. That scope in turn contains a flow with two parallel scopes. Both scopes pause execution for a short period. The scope that resumes execution first throws a fault caught by the faultHandler of its parent scope. The should trigger the execution of the terminationHandler of its sibling scope. That terminationHandler also throws a fault which should not be propagated.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\473900664\\Scope-TerminationHandlers-FaultNotPropagating.bpel",
   "files\\engineIndependent\\473900664\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__TerminationHandlers__Scope-TerminationHandlers-FaultNotPropagating",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "3",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "3"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-RepeatableConstructCompensation",
  "description": "A receive followed by a while that contains a scope with a compensationHandler. After the while comes a throw and its fault is caught by the process-level faultHandler. This faultHandler first invokes compensation of all scopes and the replies to the initial receive. The content of the reply depends on the execution of the compensationHandlers.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1941257792\\Scope-RepeatableConstructCompensation.bpel",
   "files\\engineIndependent\\1941257792\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Compensation__Scope-RepeatableConstructCompensation",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "missingReply",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "MissingReply",
  "description": "A receive for a synchronous operation with no associated reply.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2126565206\\MissingReply.bpel",
   "files\\engineIndependent\\2126565206\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__MessageExchanges__MissingReply",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "missingRequest",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "MissingRequest",
  "description": "A receive and a reply which belong to different messageExchanges. On the execution of the reply, a missingRequest fault should be thrown.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\774093829\\MissingRequest.bpel",
   "files\\engineIndependent\\774093829\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__MessageExchanges__MissingRequest",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 3000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
      "type": "XpathTestAssertion",
      "value": "event"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSyncString",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-Async-InitSync",
  "description": "A receive-reply pair followed by a wait in a scope and an onEvent eventHandler on this level. A second receive-reply pair which responses the 'event' (initialized in the onEvent), follows the scope. The first receive initiates a correlationSet on which the onEvent correlates with an asynchronous operation and the second receive correlates with a synchronous operation.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\196377447\\Scope-EventHandlers-Async-InitSync.bpel",
   "files\\engineIndependent\\196377447\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Async-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-InitAsync",
  "description": "An asynchronous receive followed by a wait and a process-level onMessage eventHandler. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\903244625\\Scope-EventHandlers-InitAsync.bpel",
   "files\\engineIndependent\\903244625\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-InitAsync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-Element-InitAsync",
  "description": "An asynchronous receive followed by a wait and a process-level onEvent eventHandler. The receive initiates a correlationSet on which the onEvent correlates with a synchronous operation, initializing the inputData with a element variable.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1722030078\\Scope-EventHandlers-Element-InitAsync.bpel",
   "files\\engineIndependent\\1722030078\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Element-InitAsync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 3000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-Element-InitSync",
  "description": "A receive-reply pair followed by a wait and a process-level onEvent eventHandler. The receive initiates a correlationSet on which the onEvent correlates with a synchronous operation, initializing the inputData with a element variable.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1190834983\\Scope-EventHandlers-Element-InitSync.bpel",
   "files\\engineIndependent\\1190834983\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Element-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 3000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-InitSync",
  "description": "A receive-reply pair followed by a wait and a process-level onMessage eventHandler. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1552615928\\Scope-EventHandlers-InitSync.bpel",
   "files\\engineIndependent\\1552615928\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-Flow-InitAsync",
  "description": "An asynchronous receive followed by a wait and a process-level onEvent eventHandler. The receive initiates a correlationSet on which the onEvent correlates with a synchronous operation. The onEvent contains a assign linked to a reply in a flow.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2110463542\\Scope-EventHandlers-Flow-InitAsync.bpel",
   "files\\engineIndependent\\2110463542\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Flow-InitAsync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 3000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-Flow-InitSync",
  "description": "A receive-reply pair followed by a wait and a process-level onEvent eventHandler. The receive initiates a correlationSet on which the onEvent correlates with a synchronous operation. The onEvent contains a assign linked to a reply in a flow.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1317935501\\Scope-EventHandlers-Flow-InitSync.bpel",
   "files\\engineIndependent\\1317935501\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Flow-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-MessageExchange-InitAsync",
  "description": "An asynchronous receive followed by a wait and a process-level onEvent eventHandler that uses messageExchange. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\158816204\\Scope-EventHandlers-MessageExchange-InitAsync.bpel",
   "files\\engineIndependent\\158816204\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-MessageExchange-InitAsync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 3000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-MessageExchange-InitSync",
  "description": "A receive-reply pair followed by a wait and a process-level onEvent eventHandler that uses messageExchange. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1241261237\\Scope-EventHandlers-MessageExchange-InitSync.bpel",
   "files\\engineIndependent\\1241261237\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-MessageExchange-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-Internal-MessageExchange-InitAsync",
  "description": "An asynchronous receive followed by a wait and a process-level onEvent eventHandler that uses messageExchange in a scope. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation. The messageExchange is defined in the associated scope.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\186214710\\Scope-EventHandlers-Internal-MessageExchange-InitAsync.bpel",
   "files\\engineIndependent\\186214710\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Internal-MessageExchange-InitAsync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 3000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-Internal-MessageExchange-InitSync",
  "description": "A receive-reply pair followed by a wait and a process-level onEvent eventHandler that uses messageExchange in a scope. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation. The messageExchange is defined in the associated scope.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2071661407\\Scope-EventHandlers-Internal-MessageExchange-InitSync.bpel",
   "files\\engineIndependent\\2071661407\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Internal-MessageExchange-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-FILO-MessageExchanges",
  "description": "A receive-reply pair marked with messageExchange followed by a wait and a process-level onEvent eventHandler that uses messageExchange with a reply. The receive initiates a correlationSet on which the onEvent correlates with a synchronous operation.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\717768461\\Scope-EventHandlers-FILO-MessageExchanges.bpel",
   "files\\engineIndependent\\717768461\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-FILO-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-FILO-MessageExchanges-Pick",
  "description": "A onMessage-reply pair marked with messageExchange followed by a wait and a process-level onEvent eventHandler that uses messageExchange with a reply. The onMessage initiates a correlationSet on which the onEvent correlates with a synchronous operation.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1915026651\\Scope-EventHandlers-FILO-MessageExchanges-Pick.bpel",
   "files\\engineIndependent\\1915026651\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-FILO-MessageExchanges-Pick",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-Scope-MessageExchange-InitAsync",
  "description": "An asynchronous receive followed by a wait and a process-level onEvent eventHandler that uses messageExchange in a scope. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\640170803\\Scope-EventHandlers-Scope-MessageExchange-InitAsync.bpel",
   "files\\engineIndependent\\640170803\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Scope-MessageExchange-InitAsync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "delay": 3000,
     "type": "DelayTestStep"
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-Scope-MessageExchange-InitSync",
  "description": "A receive-reply pair followed by a wait and a process-level onEvent eventHandler that uses messageExchange in a scope. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\159739652\\Scope-EventHandlers-Scope-MessageExchange-InitSync.bpel",
   "files\\engineIndependent\\159739652\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Scope-MessageExchange-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-OnAlarm-For",
  "description": "A receive-reply pair and a process-level onAlarm eventHandler. The receive is followed by a wait that pauses execution for five seconds. The eventHandler waits for two seconds and replies to the receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1811668815\\Scope-EventHandlers-OnAlarm-For.bpel",
   "files\\engineIndependent\\1811668815\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-OnAlarm-For",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncResponse >= 2",
      "type": "XpathTestAssertion",
      "value": "true"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-OnAlarm-RepeatEvery",
  "description": "A receive-reply pair with an intermediate wait and a process-level onAlarm eventHandler. The eventHandler repeats execution every second and adds one to the final result. The intermediate wait pauses execution for 2.2 seconds, after which the current result is replied.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2039401000\\Scope-EventHandlers-OnAlarm-RepeatEvery.bpel",
   "files\\engineIndependent\\2039401000\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-OnAlarm-RepeatEvery",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncResponse >= 1",
      "type": "XpathTestAssertion",
      "value": "true"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-OnAlarm-RepeatEvery-For",
  "description": "A receive-reply pair with an intermediate wait and a process-level onAlarm eventHandler. The eventHandler repeats execution every second and adds one to the final result. The repetition takes place after one second, so the handler should repeat exactly once. The intermediate wait pauses execution for 2.2 seconds, after which the current result is replied.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\593690500\\Scope-EventHandlers-OnAlarm-RepeatEvery-For.bpel",
   "files\\engineIndependent\\593690500\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-OnAlarm-RepeatEvery-For",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncResponse >= 2",
      "type": "XpathTestAssertion",
      "value": "true"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-OnAlarm-RepeatEvery-Until",
  "description": "A receive-reply pair with an intermediate wait and a process-level onAlarm eventHandler. The eventHandler repeats execution every second and adds one to the final result. The repetition takes place after a date in the past, so the handler should execute immediately. The intermediate wait pauses execution for 2.2 seconds, after which the current result is replied.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\680251559\\Scope-EventHandlers-OnAlarm-RepeatEvery-Until.bpel",
   "files\\engineIndependent\\680251559\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-OnAlarm-RepeatEvery-Until",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-OnAlarm-Until",
  "description": "A receive followed by a scope with an onAlarm eventHandler and a wait. The onAlarm waits until a date in the past and should therefore execute immediately. Its body contains the reply to the initial receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1538148026\\Scope-EventHandlers-OnAlarm-Until.bpel",
   "files\\engineIndependent\\1538148026\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-OnAlarm-Until",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-EventHandlers-Parts",
  "description": "An asynchronous receive followed by a wait and a process-level onMessage eventHandler. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation. Furthermore, the onMessage uses the fromPart syntax.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1604878787\\Scope-EventHandlers-Parts.bpel",
   "files\\engineIndependent\\1604878787\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Parts",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-FaultHandlers",
  "description": "A scope with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler by its faultName. Inside this faultHandler is the reply to the initial receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1186638832\\Scope-FaultHandlers.bpel",
   "files\\engineIndependent\\1186638832\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-FaultHandlers-OutboundLink",
  "description": "A scope in a flow with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler by its faultName.  Inside this faultHandler is a assign that is linked outbound to the reply to the initial receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\386968121\\Scope-FaultHandlers-OutboundLink.bpel",
   "files\\engineIndependent\\386968121\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-OutboundLink",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-FaultHandlers-CatchAll",
  "description": "A scope with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level catchAll faultHandler. Inside this faultHandler is the reply to the initial receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1490582051\\Scope-FaultHandlers-CatchAll.bpel",
   "files\\engineIndependent\\1490582051\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-CatchAll",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "-6",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "-1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-FaultHandlers-CatchAll-Invoke",
  "description": "A receive followed by a scope with fault handlers and an invoke activity. The fault from the invoke activity from the partner service is caught by the scope-level catchAll faultHandler. Inside this faultHandler is the reply to the initial receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\693959806\\Scope-FaultHandlers-CatchAll-Invoke.bpel",
   "files\\engineIndependent\\693959806\\TestInterface.wsdl",
   "files\\engineIndependent\\693959806\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-CatchAll-Invoke",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "-6",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "-1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-FaultHandlers-CatchAll-Invoke-Validate",
  "description": "A receive followed by a scope with fault handlers and an invoke as well as a validate activity. The fault from the invoke activity from the partner service is caught by the scope-level catchAll faultHandler. Inside this faultHandler is the reply to the initial receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1719218399\\Scope-FaultHandlers-CatchAll-Invoke-Validate.bpel",
   "files\\engineIndependent\\1719218399\\TestInterface.wsdl",
   "files\\engineIndependent\\1719218399\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-CatchAll-Invoke-Validate",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-FaultHandlers-OutboundLink-CatchAll",
  "description": "A scope in a flow with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level catchAll faultHandler. Inside this faultHandler is a assign that is linked outbound to the reply to the initial receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\308246092\\Scope-FaultHandlers-OutboundLink-CatchAll.bpel",
   "files\\engineIndependent\\308246092\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-OutboundLink-CatchAll",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Process-FaultHandlers-FaultElement",
  "description": "A process with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler that uses a faultVariable and faultElement configuration. Inside this faultHandler is the reply to the initial receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\417824700\\Process-FaultHandlers-FaultElement.bpel",
   "files\\engineIndependent\\417824700\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Process-FaultHandlers-FaultElement",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-FaultHandlers-FaultElement",
  "description": "A scope with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler that uses a faultVariable and faultElement configuration. Inside this faultHandler is the reply to the initial receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\642354889\\Scope-FaultHandlers-FaultElement.bpel",
   "files\\engineIndependent\\642354889\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-FaultElement",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-FaultHandlers-FaultMessageType",
  "description": "A scope with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler that uses a faultVariable and faultMessageType configuration. Inside this faultHandler is the reply to the initial receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\300981092\\Scope-FaultHandlers-FaultMessageType.bpel",
   "files\\engineIndependent\\300981092\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-FaultMessageType",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{"type": "ExitAssertion"}],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-ExitOnStandardFault",
  "description": "A scope with receive-reply pair and an intermediate throw. There is no faultHandler, but the exitOnStandardFault attribute of the scope is set to yes.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\68675018\\Scope-ExitOnStandardFault.bpel",
   "files\\engineIndependent\\68675018\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Scope-Attributes__Scope-ExitOnStandardFault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "joinFailure",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-ExitOnStandardFault-JoinFailure",
  "description": "A scope with a receive-reply pair and an intermediate throw that throws a joinFailure. There is no faultHandler, but the exitOnStandardFault attribute of the scope is set to yes. However, the exitOnStandardFault sematics do not apply to joinFailures.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\475407415\\Scope-ExitOnStandardFault-JoinFailure.bpel",
   "files\\engineIndependent\\475407415\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__Scope-Attributes__Scope-ExitOnStandardFault-JoinFailure",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Process-FaultHandlers-CatchOrder",
  "description": "A process with a receive followed by a intermediate throw. The scope is associated with mulitple faultHandlers. A specific one of these should catch the fault and only inside this faultHandler is the reply to the initial receive. The process is adapted from the example in Spec. 12.5.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2144904427\\Process-FaultHandlers-CatchOrder.bpel",
   "files\\engineIndependent\\2144904427\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Process-FaultHandlers-CatchOrder",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-FaultHandlers-CatchOrder",
  "description": "A scope with a receive followed by a intermediate throw. The scope is associated with mulitple faultHandlers. A specific one of these should catch the fault and only inside this faultHandler is the reply to the initial receive. The process is adapted from the example in Spec. 12.5.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2056622256\\Scope-FaultHandlers-CatchOrder.bpel",
   "files\\engineIndependent\\2056622256\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-CatchOrder",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "0"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Scope-FaultHandlers-VariableData",
  "description": "A scope with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler that uses a faultVariable and faultMessage configuration. Inside this faultHandler is the reply to the initial receive and the data replied is the content of the faultVariable.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\57857795\\Scope-FaultHandlers-VariableData.bpel",
   "files\\engineIndependent\\57857795\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-VariableData",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Sequence",
  "description": "A receive-reply pair enclosed in a sequence.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1243048451\\Sequence.bpel",
   "files\\engineIndependent\\1243048451\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Sequence__Sequence",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "While",
  "description": "A receive-reply pair with an intermediate while that loops for n times, where n is equal to the input.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1413079771\\While.bpel",
   "files\\engineIndependent\\1413079771\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__While__While",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "5"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "While-Flow",
  "description": "A receive-reply pair with an intermediate while that loops for n times, where n is equal to the input. The loop contains a flow that links the assignment of 1 to a counter and the assignment of the counter to the reply data.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2030811904\\While-Flow.bpel",
   "files\\engineIndependent\\2030811904\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__While__While-Flow",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "2",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "3"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "RepeatUntil",
  "description": "A receive-reply pair with an intermediate while that loops for n+1 times, where n is equal to the input.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1915746395\\RepeatUntil.bpel",
   "files\\engineIndependent\\1915746395\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__RepeatUntil__RepeatUntil",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "2",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "RepeatUntilEquality",
  "description": "A receive-reply pair with an intermediate while that loops for n times, where n is equal to the input.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\108181899\\RepeatUntilEquality.bpel",
   "files\\engineIndependent\\108181899\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__RepeatUntil__RepeatUntilEquality",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "2",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "3"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "RepeatUntil-Flow",
  "description": "A receive-reply pair with an intermediate while that loops for n+1 times, where n is equal to the input. The loop contains a flow that links the assignment of 1 to a counter and the assignment of the counter to the reply data.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1659871104\\RepeatUntil-Flow.bpel",
   "files\\engineIndependent\\1659871104\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__RepeatUntil__RepeatUntil-Flow",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "7"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Flow",
  "description": "A receive-reply pair with an intermediate flow that contains two assigns.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1294497431\\Flow.bpel",
   "files\\engineIndependent\\1294497431\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Flow-Links",
  "description": "A receive-reply pair with an intermediate flow that contains two assigns which have a precedence relationship between each other using links.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1936678115\\Flow-Links.bpel",
   "files\\engineIndependent\\1936678115\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-Links",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Flow-BoundaryLinks",
  "description": "A receive-reply pair with an intermediate flow that contains an assign and a sequence with an assign, as well as a link pointing from the former to the later assign. That way the links crosses the boundary of a structured activity, the sequence.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2128299225\\Flow-BoundaryLinks.bpel",
   "files\\engineIndependent\\2128299225\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-BoundaryLinks",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "faultString": "joinFailure",
       "type": "SoapFaultTestAssertion"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "3",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "6"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "Flow-Links-JoinCondition",
  "description": "A receive-reply pair with an intermediate flow that contains three assigns, two of which point to the third using links. Both links have transitionConditions and their target a joinCondition defined upon them. A joinFailure should result, given not both of the links are activated.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\373822343\\Flow-Links-JoinCondition.bpel",
   "files\\engineIndependent\\373822343\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-Links-JoinCondition",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "faultString": "joinFailure",
       "type": "SoapFaultTestAssertion"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "3",
      "concurrencyTest": false,
      "assertions": [{
       "faultString": "joinFailure",
       "type": "SoapFaultTestAssertion"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "Flow-Links-JoinFailure",
  "description": "A receive-reply pair with an intermediate flow that contains three assigns, two of which point to the third using links. Both links have transitionConditions and their target a joinCondition defined upon them. The transitionConditions do never evaluate to true, resulting in a joinFailure on each invocation.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1055490806\\Flow-Links-JoinFailure.bpel",
   "files\\engineIndependent\\1055490806\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-Links-JoinFailure",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "3"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "3",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "5"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "Flow-Links-SuppressJoinFailure",
  "description": "A receive-reply pair with an intermediate flow that contains three assigns, two of which point to the third using links. Both links have transitionConditions and their target a joinCondition defined upon them. The transitionConditions do never evaluate to true, resulting in a joinFailure on each invocation. However, this joinFailure is suppressed.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\90462977\\Flow-Links-SuppressJoinFailure.bpel",
   "files\\engineIndependent\\90462977\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-Links-SuppressJoinFailure",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "4"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "3",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "6"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "Flow-Links-TransitionCondition",
  "description": "A receive-reply pair with an intermediate flow that contains three assigns, two of which point to the third using links. Both links have transitionConditions that do fire only if the input is greater than two.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\893463748\\Flow-Links-TransitionCondition.bpel",
   "files\\engineIndependent\\893463748\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-Links-TransitionCondition",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessAsync",
      "oneWay": true
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessAsync",
      "oneWay": true
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessAsync",
      "oneWay": true
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessAsync",
      "oneWay": true
     }
    ]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessAsync",
      "oneWay": true
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessAsync",
      "oneWay": true
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessAsync",
      "oneWay": true
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessAsync",
      "oneWay": true
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "Flow-GraphExample",
  "description": "An implementation of the flow graph process defined in Sec. 11.6.4.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\614849582\\Flow-GraphExample.bpel",
   "files\\engineIndependent\\614849582\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-GraphExample",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "5",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "6"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Flow-Links-ReceiveCreatingInstances",
  "description": "A flow with a starting activity (receive with createInstance set to yes) and a non-starting activity (assign), where a precedence relationship is defined using links.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\648330004\\Flow-Links-ReceiveCreatingInstances.bpel",
   "files\\engineIndependent\\648330004\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-Links-ReceiveCreatingInstances",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "11"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "22"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "Flow-Two-Starting-OnMessage-Correlation",
  "description": "A flow that contains two pick activities that can both be start activity and reply 0 or '0'. After the flow a simple synchronous receive-reply pair responses the concatenation of the two starting message inputParts.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1921576665\\Flow-Two-Starting-OnMessage-Correlation.bpel",
   "files\\engineIndependent\\1921576665\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-Two-Starting-OnMessage-Correlation",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "11"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "22"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "Flow-Starting-Receive-OnMessage-Correlation",
  "description": "A flow that contains a receive-reply pair in a sequence, replying 0, and a pick activity that replies '0'. Both message activities can be start activity. After the flow a simple synchronous receive-reply pair responses the concatenation of the two starting message inputParts.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\483519524\\Flow-Starting-Receive-OnMessage-Correlation.bpel",
   "files\\engineIndependent\\483519524\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-Starting-Receive-OnMessage-Correlation",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "11"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "22"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "Flow-Two-Starting-Receive-Correlation",
  "description": "A flow that contains two receive-reply pair in a sequence that can both be start activity and reply 0 or '0'. After the flow a simple synchronous receive-reply pair responses the concatenation of the two starting message inputParts.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1683682530\\Flow-Two-Starting-Receive-Correlation.bpel",
   "files\\engineIndependent\\1683682530\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Flow__Flow-Two-Starting-Receive-Correlation",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Not-If-Case-1",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "If-Case-2",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "If",
  "description": "A receive-reply pair with an intermediate if that checks whether the input is even.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1173919755\\If.bpel",
   "files\\engineIndependent\\1173919755\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__If__If",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Else-Case-1",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "If-Case-2",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "If-Else",
  "description": "A receive-reply pair with an intermediate if-else that checks whether the input is even.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\634426319\\If-Else.bpel",
   "files\\engineIndependent\\634426319\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__If__If-Else",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Not-If-Or-ElseIf-Case-1",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "If-Case-2",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 3,
    "name": "ElseIf-Case-3",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "3",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "2"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "If-ElseIf",
  "description": "A receive-reply pair with an intermediate if-elseif that checks whether the input is even or divisible by three.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\201665838\\If-ElseIf.bpel",
   "files\\engineIndependent\\201665838\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__If__If-ElseIf",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Else-Case-1",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "If-Case-2",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 3,
    "name": "ElseIf-Case-3",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "3",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "2"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "If-ElseIf-Else",
  "description": "A receive-reply pair with an intermediate if-elseif-else that checks whether the input is even or divisible by three.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\901184872\\If-ElseIf-Else.bpel",
   "files\\engineIndependent\\901184872\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__If__If-ElseIf-Else",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "SubLanguageExecutionFault-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "subLanguageExecutionFault",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "If-SubLanguageExecutionFault",
  "description": "A receive-reply pair with an intermediate if that should throw an subLanguageExecutionFault because of an invalid condition.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\294848054\\If-SubLanguageExecutionFault.bpel",
   "files\\engineIndependent\\294848054\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__If__If-SubLanguageExecutionFault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "SubLanguageExecutionFault-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "subLanguageExecutionFault",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "If-SubLanguageExecutionFault-EmptyCondition",
  "description": "A receive-reply pair with an intermediate if that should throw an subLanguageExecutionFault because of an empty condition.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1807146799\\If-SubLanguageExecutionFault-EmptyCondition.bpel",
   "files\\engineIndependent\\1807146799\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__If__If-SubLanguageExecutionFault-EmptyCondition",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "0-equals-0-1",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "0",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "0plus1-equals-0-2",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 3,
    "name": "0plus1plus2-equals-3-3",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "3"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "ForEach",
  "description": "A receive-reply pair with an intermediate forEach that loops for n times, where n is equal to the input. Each iteration the current loop number is added to the final result.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1295790661\\ForEach.bpel",
   "files\\engineIndependent\\1295790661\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "0",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "2"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "6"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "ForEach-Read-Counter",
  "description": "A receive-reply pair with an intermediate forEach that loops for n times, where n is equal to the input. Each iteration the current loop number is added twice to the final result.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\892422039\\ForEach-Read-Counter.bpel",
   "files\\engineIndependent\\892422039\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-Read-Counter",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "0",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "6",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "9"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "ForEach-Write-Counter",
  "description": "A receive-reply pair with an intermediate forEach that loops for n times, where n is equal to the input. The loop contains an if activity, so each odd iteration of the current loop number is added to the final result, when it also has a successor in range.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\914873028\\ForEach-Write-Counter.bpel",
   "files\\engineIndependent\\914873028\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-Write-Counter",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "0-equals-0-1",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "0",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "0"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "0plus1-equals-0-2",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 3,
    "name": "0plus1plus2-equals-3-3",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "3"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "ForEach-Flow",
  "description": "A receive-reply pair with an intermediate forEach that loops for n times, where n is equal to the input. Each iteration the current loop number is added to a intermediary and from there to the final result, and these assigns are linked within a flow.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1572198880\\ForEach-Flow.bpel",
   "files\\engineIndependent\\1572198880\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-Flow",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "NegativeStopCounter-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "invalidExpressionValue",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ForEach-NegativeStopCounter",
  "description": "A receive-reply pair with an intermediate forEach that should always fail with an invalidExpressionValue fault as finalCounterValue is negative.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\471158541\\ForEach-NegativeStopCounter.bpel",
   "files\\engineIndependent\\471158541\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-NegativeStopCounter",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Skipping the third iteration-1",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Cannot meet completion condition-2",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "0",
      "concurrencyTest": false,
      "assertions": [{
       "faultString": "invalidBranchCondition",
       "type": "SoapFaultTestAssertion"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "ForEach-CompletionCondition",
  "description": "A receive-reply pair with an intermediate forEach that should terminate given two of its children have terminated. N+1 children are scheduled for execution, where n is equal to the input. If N+1 is less than two, an invalidBranchConditionFault should be thrown.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1025988973\\ForEach-CompletionCondition.bpel",
   "files\\engineIndependent\\1025988973\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-CompletionCondition",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Skipping the third iteration-1",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Cannot meet completion condition-2",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "0",
      "concurrencyTest": false,
      "assertions": [{
       "faultString": "invalidBranchCondition",
       "type": "SoapFaultTestAssertion"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "ForEach-CompletionCondition-Parallel",
  "description": "A receive-reply pair with an intermediate forEach that should terminate given two of its children have terminated. N+1 children are scheduled for execution in parallel, where n is equal to the input. If N+1 is less than two, an invalidBranchConditionFault should be thrown.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2079979897\\ForEach-CompletionCondition-Parallel.bpel",
   "files\\engineIndependent\\2079979897\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-CompletionCondition-Parallel",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "5",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "6"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "10",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "6"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "ForEach-CompletionCondition-SuccessfulBranchesOnly",
  "description": "A receive-reply pair with an intermediate forEach that should terminate given two of its children have terminated successfully. Each child throws a fault, given the current counter value is even. N children are scheduled for execution, where n is equal to the input.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\175677994\\ForEach-CompletionCondition-SuccessfulBranchesOnly.bpel",
   "files\\engineIndependent\\175677994\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-CompletionCondition-SuccessfulBranchesOnly",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Expect completionConditionFailure-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "completionConditionFailure",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ForEach-CompletionConditionFailure",
  "description": "A receive-reply pair with an intermediate forEach that should terminate given two of its children have terminated. N+1 children are scheduled for execution in parallel, where n is equal to the input. If N+1 is less than two, an invalidBranchConditionFault should be thrown. This is a seperate test case that tests only for the failure.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1629000867\\ForEach-CompletionConditionFailure.bpel",
   "files\\engineIndependent\\1629000867\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-CompletionConditionFailure",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "0plus1plus2-equals-3-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "2",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "3"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ForEach-Parallel",
  "description": "A receive-reply pair with an intermediate forEach that executes its children in parallel.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1401719289\\ForEach-Parallel.bpel",
   "files\\engineIndependent\\1401719289\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-Parallel",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "0plus1plus2-equals-3-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": true,
     "input": "103",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "2",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "3"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": true,
     "input": "101",
     "concurrencyTest": true,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
      "type": "XpathTestAssertion",
      "value": "true"
     }],
     "type": "SoapTestStep",
     "oneWay": false
    },
    {
     "testPartner": true,
     "input": "102",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "3"
     }],
     "type": "SoapTestStep",
     "oneWay": false
    }
   ]
  }],
  "name": "ForEach-Parallel-Invoke",
  "description": "A receive-reply pair with an intermediate forEach that executes its children in parallel.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\827037420\\ForEach-Parallel-Invoke.bpel",
   "files\\engineIndependent\\827037420\\TestInterface.wsdl",
   "files\\engineIndependent\\827037420\\TestPartner.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-Parallel-Invoke",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Iterate-Twice-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "2",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "invalidExpressionValue",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ForEach-NegativeStartCounter",
  "description": "A receive-reply pair with an intermediate forEach that should always fail with an invalidExpressionValue fault as startCounterValue is negative.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\647663873\\ForEach-NegativeStartCounter.bpel",
   "files\\engineIndependent\\647663873\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-NegativeStartCounter",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Iterate-Twice-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "2",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "invalidExpressionValue",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ForEach-TooLargeStartCounter",
  "description": "A receive-reply pair with an intermediate forEach that should always fail with an invalidExpressionValue fault as startCounterValue is initialized with a value that exceeds xs:unsignedInt.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1385281555\\ForEach-TooLargeStartCounter.bpel",
   "files\\engineIndependent\\1385281555\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-TooLargeStartCounter",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Iterate-Twice-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "2",
     "concurrencyTest": false,
     "assertions": [{
      "faultString": "invalidExpressionValue",
      "type": "SoapFaultTestAssertion"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "ForEach-CompletionCondition-NegativeBranches",
  "description": "A receive-reply pair with an intermediate forEach that should always fail with an invalidExpressionValue fault as branches is initialized with a negative value.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2068834907\\ForEach-CompletionCondition-NegativeBranches.bpel",
   "files\\engineIndependent\\2068834907\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__ForEach__ForEach-CompletionCondition-NegativeBranches",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessAsync",
     "oneWay": true
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-Correlations-InitAsync",
  "description": "An asynchronous receive that initiates a correlationSet, followed by a pick with a synchronous onMessage that correlates on this set.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\349643072\\Pick-Correlations-InitAsync.bpel",
   "files\\engineIndependent\\349643072\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-Correlations-InitAsync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-Correlations-InitSync",
  "description": "A receive-reply pair that initiates a correlationSet, followed by a pick with a synchronous onMessage that correlates on this set.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1535841111\\Pick-Correlations-InitSync.bpel",
   "files\\engineIndependent\\1535841111\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-Correlations-InitSync",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-CreateInstance",
  "description": "A pick with a synchronous onMessage that has createInstance set to yes.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1132543135\\Pick-CreateInstance.bpel",
   "files\\engineIndependent\\1132543135\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-CreateInstance",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-MessageExchange",
  "description": "A pick with a synchronous onMessage that has createInstance set to yes and uses messageExchange.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\818951270\\Pick-MessageExchange.bpel",
   "files\\engineIndependent\\818951270\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-MessageExchange",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-MessageExchange-Scope",
  "description": "A pick with a synchronous onMessage that has createInstance set to yes and uses messageExchange in a scope.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\620073537\\Pick-MessageExchange-Scope.bpel",
   "files\\engineIndependent\\620073537\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-MessageExchange-Scope",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-Multiple-MessageExchanges",
  "description": "A pick with a synchronous onMessage that has createInstance set to yes and a second pick with a synchronous onMessage of the same type and both use messageExchanges to define which reply belongs to which onMessage and the response is the initial value first then the sum of the received values.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1867358454\\Pick-Multiple-MessageExchanges.bpel",
   "files\\engineIndependent\\1867358454\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-Multiple-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-Multiple-MessageExchanges-Scope",
  "description": "A pick with a synchronous onMessage that has createInstance set to yes and a second pick with a synchronous onMessage of the same type and both use messageExchanges in a scope to define which reply belongs to which onMessage and the response is the initial value first then the sum of the received values.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\224195229\\Pick-Multiple-MessageExchanges-Scope.bpel",
   "files\\engineIndependent\\224195229\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-Multiple-MessageExchanges-Scope",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-FIFO-MessageExchanges",
  "description": "Two onMessages of the same operation that use messageExchanges to define which reply belongs to which onMessage and the response is 1 for the reply to the first onMessage and 2 for the second reply to the second onMessage.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1659010598\\Pick-FIFO-MessageExchanges.bpel",
   "files\\engineIndependent\\1659010598\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-FIFO-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-FILO-MessageExchanges",
  "description": "Two onMessages of the same operation that use messageExchanges to define which reply belongs to which onMessage and the response is 2 for the reply to the second onMessage and 1 for the second reply to the first onMessage.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1864092768\\Pick-FILO-MessageExchanges.bpel",
   "files\\engineIndependent\\1864092768\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-FILO-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Receive-Pick-FIFO-MessageExchanges",
  "description": "A receive and a onMessage of the same operation that use messageExchanges to define which reply belongs to which receive/onMessage and the response is 1 for the reply to the onMessage and 2 for the second reply to the receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1825180452\\Receive-Pick-FIFO-MessageExchanges.bpel",
   "files\\engineIndependent\\1825180452\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Receive-Pick-FIFO-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Receive-Pick-FILO-MessageExchanges",
  "description": "A receive and a onMessage of the same operation that use messageExchanges to define which reply belongs to which receive/onMessage and the response is 2 for the reply to the onMessage and 1 for the second reply to the receive.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1053316522\\Receive-Pick-FILO-MessageExchanges.bpel",
   "files\\engineIndependent\\1053316522\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Receive-Pick-FILO-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-Receive-FIFO-MessageExchanges",
  "description": "A onMessage and a receive of the same operation that use messageExchanges to define which reply belongs to which onMessage/receive and the response is 1 for the reply to the receive and 2 for the second reply to the onMessage.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1534384560\\Pick-Receive-FIFO-MessageExchanges.bpel",
   "files\\engineIndependent\\1534384560\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-Receive-FIFO-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "2"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-Receive-FILO-MessageExchanges",
  "description": "A onMessage and a receive of the same operation that use messageExchanges to define which reply belongs to which onMessage/receive and the response is 2 for the reply to the receive and 1 for the second reply to the onMessage.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1988718806\\Pick-Receive-FILO-MessageExchanges.bpel",
   "files\\engineIndependent\\1988718806\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-Receive-FILO-MessageExchanges",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-CreateInstance-FromParts",
  "description": "A pick with a synchronous onMessage that has createInstance set to yes using fromParts.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1038283318\\Pick-CreateInstance-FromParts.bpel",
   "files\\engineIndependent\\1038283318\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-CreateInstance-FromParts",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "-1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-OnAlarm-For",
  "description": "An onAlarm with for test case. The test contains a receive-reply pair that initiates a correlationSet and an intermediate pick that contains an onMessage and an onAlarm with an for element. The onAlarm should fire after two seconds and the process should reply with a default value.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\259532894\\Pick-OnAlarm-For.bpel",
   "files\\engineIndependent\\259532894\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-OnAlarm-For",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "-1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    }
   ]
  }],
  "name": "Pick-OnAlarm-Until",
  "description": "A receive-reply pair that initiates a correlationSet and an intermediate pick that contains an onMessage and an onAlarm with an until element. The onAlarm should fire immediately.",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\316836275\\Pick-OnAlarm-Until.bpel",
   "files\\engineIndependent\\316836275\\TestInterface.wsdl"
  ],
  "featureID": "Conformance__BPEL__structured__Pick__Pick-OnAlarm-Until",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
      "type": "XpathTestAssertion",
      "value": "1AB"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSyncString",
     "oneWay": false
    }
   ]
  }],
  "name": "WCP01-Sequence",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1370332322\\WCP01-Sequence.bpel",
   "files\\engineIndependent\\1370332322\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP01_Sequence__WCP01-Sequence",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
      "type": "XpathTestAssertion",
      "value": "1AB"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSyncString",
     "oneWay": false
    }
   ]
  }],
  "name": "WCP02-ParallelSplit",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1413403852\\WCP02-ParallelSplit.bpel",
   "files\\engineIndependent\\1413403852\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP02_ParallelSplit__WCP02-ParallelSplit",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
      "type": "XpathTestAssertion",
      "value": "1AB"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSyncString",
     "oneWay": false
    }
   ]
  }],
  "name": "WCP03-Synchronization",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2034456052\\WCP03-Synchronization.bpel",
   "files\\engineIndependent\\2034456052\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP03_Synchronization__WCP03-Synchronization",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "1A"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "11",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "11B"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP04-ExclusiveChoice",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1305377292\\WCP04-ExclusiveChoice.bpel",
   "files\\engineIndependent\\1305377292\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP04_ExclusiveChoice__WCP04-ExclusiveChoice",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "1A"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "11",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "11B"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP05-SimpleMerge",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\94936052\\WCP05-SimpleMerge.bpel",
   "files\\engineIndependent\\94936052\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP05_SimpleMerge__WCP05-SimpleMerge",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "AYZ"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "ABZ"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "3",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "ABC"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP06-MultiChoice",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1952176620\\WCP06-MultiChoice.bpel",
   "files\\engineIndependent\\1952176620\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP06_MultiChoice__WCP06-MultiChoice",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "AYZ"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "ABZ"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "3",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "ABC"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP06-MultiChoice-Partial",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\286487168\\WCP06-MultiChoice-Partial.bpel",
   "files\\engineIndependent\\286487168\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP06_MultiChoice__WCP06-MultiChoice-Partial",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "AYZ"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "ABZ"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "3",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "ABC"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP07-SynchronizingMerge",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1680761242\\WCP07-SynchronizingMerge.bpel",
   "files\\engineIndependent\\1680761242\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP07_SynchronizingMerge__WCP07-SynchronizingMerge",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "AYZ"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "ABZ"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "3",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "ABC"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP07-SynchronizingMerge-Partial",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\19012858\\WCP07-SynchronizingMerge-Partial.bpel",
   "files\\engineIndependent\\19012858\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP07_SynchronizingMerge__WCP07-SynchronizingMerge-Partial",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
      "type": "XpathTestAssertion",
      "value": "1"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSyncString",
     "oneWay": false
    }
   ]
  }],
  "name": "WCP11-ImplicitTermination",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\382069132\\WCP11-ImplicitTermination.bpel",
   "files\\engineIndependent\\382069132\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP11_ImplicitTermination__WCP11-ImplicitTermination",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP16-DeferredChoice",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1473048660\\WCP16-DeferredChoice.bpel",
   "files\\engineIndependent\\1473048660\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP16_DeferredChoice__WCP16-DeferredChoice",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": true,
      "input": "103",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "101",
      "concurrencyTest": true,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
       "type": "XpathTestAssertion",
       "value": "true"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "102",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "2"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": true,
      "input": "103",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "101",
      "concurrencyTest": true,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
       "type": "XpathTestAssertion",
       "value": "true"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "102",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "3"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP12-MultipleInstancesWithoutSynchronization",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1404152948\\WCP12-MultipleInstancesWithoutSynchronization.bpel",
   "files\\engineIndependent\\1404152948\\TestInterface.wsdl",
   "files\\engineIndependent\\1404152948\\TestPartner.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": true,
     "input": "103",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "100",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": true,
     "input": "101",
     "concurrencyTest": true,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
      "type": "XpathTestAssertion",
      "value": "true"
     }],
     "type": "SoapTestStep",
     "oneWay": false
    },
    {
     "testPartner": true,
     "input": "102",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "4"
     }],
     "type": "SoapTestStep",
     "oneWay": false
    }
   ]
  }],
  "name": "WCP12-MultipleInstancesWithoutSynchronization-Partial",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\977423392\\WCP12-MultipleInstancesWithoutSynchronization-Partial.bpel",
   "files\\engineIndependent\\977423392\\TestInterface.wsdl",
   "files\\engineIndependent\\977423392\\TestPartner.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization-Partial",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": true,
      "input": "103",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "101",
      "concurrencyTest": true,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
       "type": "XpathTestAssertion",
       "value": "true"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "102",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "2"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": true,
      "input": "103",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "101",
      "concurrencyTest": true,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
       "type": "XpathTestAssertion",
       "value": "true"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "102",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "3"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP12-MultipleInstancesWithoutSynchronization-Sync",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1748350044\\WCP12-MultipleInstancesWithoutSynchronization-Sync.bpel",
   "files\\engineIndependent\\1748350044\\TestInterface.wsdl",
   "files\\engineIndependent\\1748350044\\TestPartner.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization-Sync",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": true,
     "input": "103",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "100",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": true,
     "input": "101",
     "concurrencyTest": true,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
      "type": "XpathTestAssertion",
      "value": "true"
     }],
     "type": "SoapTestStep",
     "oneWay": false
    },
    {
     "testPartner": true,
     "input": "102",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "4"
     }],
     "type": "SoapTestStep",
     "oneWay": false
    }
   ]
  }],
  "name": "WCP12-MultipleInstancesWithoutSynchronization-Sync-Partial",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1080286448\\WCP12-MultipleInstancesWithoutSynchronization-Sync-Partial.bpel",
   "files\\engineIndependent\\1080286448\\TestInterface.wsdl",
   "files\\engineIndependent\\1080286448\\TestPartner.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization-Sync-Partial",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "2"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP12-MultipleInstancesWithoutSynchronization-While-Partial",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1279335972\\WCP12-MultipleInstancesWithoutSynchronization-While-Partial.bpel",
   "files\\engineIndependent\\1279335972\\TestInterface.wsdl",
   "files\\engineIndependent\\1279335972\\TestPartner.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization-While-Partial",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "2"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP12-MultipleInstancesWithoutSynchronization-While-Sync-Partial",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\497790316\\WCP12-MultipleInstancesWithoutSynchronization-While-Sync-Partial.bpel",
   "files\\engineIndependent\\497790316\\TestInterface.wsdl",
   "files\\engineIndependent\\497790316\\TestPartner.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization-While-Sync-Partial",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": true,
      "input": "103",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "101",
      "concurrencyTest": true,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
       "type": "XpathTestAssertion",
       "value": "true"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "102",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "4"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": true,
      "input": "103",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "101",
      "concurrencyTest": true,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
       "type": "XpathTestAssertion",
       "value": "true"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "102",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "4"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1399052108\\WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge.bpel",
   "files\\engineIndependent\\1399052108\\TestInterface.wsdl",
   "files\\engineIndependent\\1399052108\\TestPartner.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge__WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": true,
     "input": "103",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "oneWay": false
    },
    {
     "testPartner": false,
     "input": "100",
     "concurrencyTest": false,
     "assertions": [],
     "type": "SoapTestStep",
     "operation": "startProcessSync",
     "oneWay": false
    },
    {
     "testPartner": true,
     "input": "101",
     "concurrencyTest": true,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
      "type": "XpathTestAssertion",
      "value": "true"
     }],
     "type": "SoapTestStep",
     "oneWay": false
    },
    {
     "testPartner": true,
     "input": "102",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
      "type": "XpathTestAssertion",
      "value": "4"
     }],
     "type": "SoapTestStep",
     "oneWay": false
    }
   ]
  }],
  "name": "WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge-Partial",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\880283616\\WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge-Partial.bpel",
   "files\\engineIndependent\\880283616\\TestInterface.wsdl",
   "files\\engineIndependent\\880283616\\TestPartner.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge__WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge-Partial",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": true,
      "input": "103",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "101",
      "concurrencyTest": true,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
       "type": "XpathTestAssertion",
       "value": "true"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "102",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "2"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": true,
      "input": "103",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "2",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "101",
      "concurrencyTest": true,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
       "type": "XpathTestAssertion",
       "value": "true"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     },
     {
      "testPartner": true,
      "input": "102",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "3"
      }],
      "type": "SoapTestStep",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP14-MultipleInstancesWithAPrioriRuntimeKnowledge",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\577932028\\WCP14-MultipleInstancesWithAPrioriRuntimeKnowledge.bpel",
   "files\\engineIndependent\\577932028\\TestInterface.wsdl",
   "files\\engineIndependent\\577932028\\TestPartner.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge__WCP14-MultipleInstancesWithAPrioriRuntimeKnowledge",
  "testPartners": [{
   "external": false,
   "interfaceDescription": "TestPartner.wsdl",
   "publishedUrl": "http://localhost:2000/bpel-testpartner",
   "rules": [
    {
     "input": {"type": "any"},
     "operation": "startProcessAsync"
    },
    {
     "input": {"type": "any"},
     "operation": "startProcessWithEmptyMessage"
    },
    {
     "output": {
      "type": "fault",
      "value": "UNDECLARED"
     },
     "input": {
      "type": "integer",
      "value": -5
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "fault",
      "value": "DECLARED"
     },
     "input": {
      "type": "integer",
      "value": -6
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.access()"
     },
     "input": {
      "type": "integer",
      "value": 100
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
     },
     "input": {
      "type": "integer",
      "value": 101
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.getNumberOfCalls()"
     },
     "input": {
      "type": "integer",
      "value": 102
     },
     "operation": "startProcessSync"
    },
    {
     "output": {
      "type": "script",
      "value": "ConcurrencyDetector.reset()"
     },
     "input": {
      "type": "integer",
      "value": 103
     },
     "operation": "startProcessSync"
    },
    {
     "output": {"type": "echo"},
     "input": {"type": "any"},
     "operation": "startProcessSync"
    }
   ],
   "type": "WSDL",
   "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
  }]
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "1A"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "0",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "0B"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP19-CancelActivity",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1418251680\\WCP19-CancelActivity.bpel",
   "files\\engineIndependent\\1418251680\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP19_CancelActivity__WCP19-CancelActivity",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "0",
      "concurrencyTest": false,
      "assertions": [{"type": "ExitAssertion"}],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP20-CancelCase",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\25389430\\WCP20-CancelCase.bpel",
   "files\\engineIndependent\\25389430\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP20_CancelCase__WCP20-CancelCase",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "PickAsyncMessage-1",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [],
      "type": "SoapTestStep",
      "operation": "startProcessAsync",
      "oneWay": true
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "8"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   },
   {
    "number": 2,
    "name": "Pick3sTimeout-2",
    "testSteps": [
     {"assertions": [{"type": "DeployableAssertion"}]},
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
       "type": "XpathTestAssertion",
       "value": "1"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSync",
      "oneWay": false
     },
     {
      "delay": 4000,
      "type": "DelayTestStep"
     },
     {
      "testPartner": false,
      "input": "1",
      "concurrencyTest": false,
      "assertions": [{
       "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
       "type": "XpathTestAssertion",
       "value": "9"
      }],
      "type": "SoapTestStep",
      "operation": "startProcessSyncString",
      "oneWay": false
     }
    ]
   }
  ],
  "name": "WCP18-Milestone",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2101014284\\WCP18-Milestone.bpel",
   "files\\engineIndependent\\2101014284\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP18_Milestone__WCP18-Milestone",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [
    {"assertions": [{"type": "DeployableAssertion"}]},
    {
     "testPartner": false,
     "input": "1",
     "concurrencyTest": false,
     "assertions": [{
      "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
      "type": "XpathTestAssertion",
      "value": "AW1ABW2B"
     }],
     "type": "SoapTestStep",
     "operation": "startProcessSyncString",
     "oneWay": false
    }
   ]
  }],
  "name": "WCP17-InterleavedParallelRouting",
  "description": "",
  "language": "BPEL",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1897385666\\WCP17-InterleavedParallelRouting.bpel",
   "files\\engineIndependent\\1897385666\\TestInterface.wsdl"
  ],
  "featureID": "Expressiveness__BPEL__cfpatterns__WCP17_InterleavedParallelRouting__WCP17-InterleavedParallelRouting",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "ERROR_runtime",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "ExclusiveGateway",
  "description": "A process with four scriptTasks and exclusiveGateways. The execution of two of the tasks is controlled by the exclusiveGateways and only one of the tasks is actually executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1906179041\\ExclusiveGateway.bpmn",
   "files\\engineIndependent\\1906179041\\ExclusiveGateway.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__ExclusiveGateway__ExclusiveGateway",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "ExclusiveGateway_Default",
  "description": "A process with five scriptTasks and exclusiveGateways. The execution of three of the tasks is controlled by the exclusiveGateways based on the input and only one of the tasks is actually executed. Two tasks are triggered through sequenceFlows with conditionExpressions and one is triggered through a sequenceFlow which is marked as default.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1581484545\\ExclusiveGateway_Default.bpmn",
   "files\\engineIndependent\\1581484545\\ExclusiveGateway_Default.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__ExclusiveGateway__ExclusiveGateway_Default",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task5",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task5",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task5",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "ExclusiveGatewayMixed",
  "description": "A process with six scriptTasks and three exclusiveGateways. One of the gateways acts as a mixed gateway. Each pair of exclusiveGateways encapsulates two script tasks. The enabling of these scriptTasks depends on input data",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\731206428\\ExclusiveGatewayMixed.bpmn",
   "files\\engineIndependent\\731206428\\ExclusiveGatewayMixed.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__ExclusiveGateway__ExclusiveGatewayMixed",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "ExclusiveDiverging_InclusiveConverging",
  "description": "A process with four scriptTasks, a diverging exclusiveGateway and a converging inclusiveGateway. Two of the tasks are enclosed between the gateways and only one of them is triggered depending on input data. The inclusiveGateway should merge the incoming branches.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\763315708\\ExclusiveDiverging_InclusiveConverging.bpmn",
   "files\\engineIndependent\\763315708\\ExclusiveDiverging_InclusiveConverging.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__MixedGatewayCombinations__ExclusiveDiverging_InclusiveConverging",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "ERROR_runtime",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "InclusiveGateway",
  "description": "A process with four scriptTasks, two of which are encapsulated by inclusiveGateways. Either one, none, or both of the scriptTasks are enabled based on input data.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1675031165\\InclusiveGateway.bpmn",
   "files\\engineIndependent\\1675031165\\InclusiveGateway.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__InclusiveGateway__InclusiveGateway",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "test",
      "type": "String",
      "value": "c"
     },
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task4",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "InclusiveGateway_Default",
  "description": "A process with five scriptTasks, three of which are encapsulated by inclusiveGateways. One of the scriptTasks acts as a default task. Either one, both of the others or the default task are executed based on input data.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\128773989\\InclusiveGateway_Default.bpmn",
   "files\\engineIndependent\\128773989\\InclusiveGateway_Default.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__InclusiveGateway__InclusiveGateway_Default",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "InclusiveDiverging_ExclusiveConverging",
  "description": "A process with four scriptTasks, a diverging inclusiveGateway and a converging exclusiveGateway. Two of the tasks are encapsulated by the gateways. Either one, none, or both of the scriptTasks are enabled based on input data and as a result the exclusiveGateway should either fire once or twice.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\172373928\\InclusiveDiverging_ExclusiveConverging.bpmn",
   "files\\engineIndependent\\172373928\\InclusiveDiverging_ExclusiveConverging.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__MixedGatewayCombinations__InclusiveDiverging_ExclusiveConverging",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "ParallelGateway",
  "description": "A process with four scriptTasks and two parallelGateways. Two of the scriptTasks are surrounded by the parallelGateways.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\350490509\\ParallelGateway.bpmn",
   "files\\engineIndependent\\350490509\\ParallelGateway.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__ParallelGateway__ParallelGateway",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "ParallelDiverging_ExclusiveConverging",
  "description": "A process with four tasks, a diverging parallelGateway and a converging exclusiveGateway. Two of the tasks are executed in parallel and then merged by the exclusiveGateway. As a result, the task following the exclusiveGateway should be followed twice.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\382090771\\ParallelDiverging_ExclusiveConverging.bpmn",
   "files\\engineIndependent\\382090771\\ParallelDiverging_ExclusiveConverging.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__MixedGatewayCombinations__ParallelDiverging_ExclusiveConverging",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "ParallelDiverging_InclusiveConverging",
  "description": "A process with four tasks, a diverging parallelGateway and a converging inclusiveGateway. Two of the tasks are executed in parallel and merged by the inclusiveGateway.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1915777979\\ParallelDiverging_InclusiveConverging.bpmn",
   "files\\engineIndependent\\1915777979\\ParallelDiverging_InclusiveConverging.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__MixedGatewayCombinations__ParallelDiverging_InclusiveConverging",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 22000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "EXECUTION_parallel",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "ParallelGateway_TrueParallelism",
  "description": "A process with two scriptTasks between a diverging and a converging parallelGateway. The scriptTasks wait for some time, so their execution time intervals are expected to overlap.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\732716738\\ParallelGateway_TrueParallelism.bpmn",
   "files\\engineIndependent\\732716738\\ParallelGateway_TrueParallelism.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__ParallelGateway__ParallelGateway_TrueParallelism",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "ComplexGateway",
  "description": "A process with five scriptTasks and two complexGateways. Three of the tasks are enclosed by the complexGateways and each one is enabled based on input data. The activationCondition of the converging complexGate is set to 'activationCount >= 1', so the gateway should fire for any number of activated incoming branches.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\172803707\\ComplexGateway.bpmn",
   "files\\engineIndependent\\172803707\\ComplexGateway.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__ComplexGateway__ComplexGateway",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 10000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task4",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "EventBasedGateway_Signals",
  "description": "A process with five scriptTasks, a diverging parallelGateway, a diverging eventBasedGateway, an intermediate signal throw event and two intermediate signal catch events. The parallelGateway points to the eventBasedGateway in one branch and, in the other branch, throws the signal. This signal is caught by one of the branches following the eventBasedGateway.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\475819487\\EventBasedGateway_Signals.bpmn",
   "files\\engineIndependent\\475819487\\EventBasedGateway_Signals.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__EventBasedGateway__EventBasedGateway_Signals",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 5000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task2",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "EventBasedGateway_Timer",
  "description": "A process with three scriptTasks, a diverging eventBasedGateway and two intermediate catch events. One of the catch events refers to a signal that is never thrown and the other one to a timer. Only the branch of the timer should ever be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2076785831\\EventBasedGateway_Timer.bpmn",
   "files\\engineIndependent\\2076785831\\EventBasedGateway_Timer.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__gateways__EventBasedGateway__EventBasedGateway_Timer",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "MARKER_exists",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "CallActivity_Process",
  "description": "A collaboration with two participants. One process calls the other one through a callActivity. The second process creates a file MARKER which must be present to pass the test.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\61578939\\CallActivity_Process.bpmn",
   "files\\engineIndependent\\61578939\\CallActivity_Process.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__CallActivity__CallActivity_Process",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "CallActivity_GlobalTask",
  "description": "Definitions contains a GlobalScriptTask which is called by a CallActivity.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\733728772\\CallActivity_GlobalTask.bpmn",
   "files\\engineIndependent\\733728772\\CallActivity_GlobalTask.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__CallActivity__CallActivity_GlobalTask",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "MultiInstance_SubProcess",
  "description": "A subProcess that defines multiInstanceLoopCharactestics with sequential behavior should be executed three times. Within the subProcess 'task1' is logged.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1871102526\\MultiInstance_SubProcess.bpmn",
   "files\\engineIndependent\\1871102526\\MultiInstance_SubProcess.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_SubProcess",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "MultiInstance_Task",
  "description": "A scriptTask that is marked as a multiInstance task and is enabled three times",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1358890360\\MultiInstance_Task.bpmn",
   "files\\engineIndependent\\1358890360\\MultiInstance_Task.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_Task",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "MultiInstance_Sequential",
  "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled three times",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\243978574\\MultiInstance_Sequential.bpmn",
   "files\\engineIndependent\\243978574\\MultiInstance_Sequential.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_Sequential",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "MultiInstance_NoneBehavior",
  "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled three times and its behavior set to 'none'. The task has a signal boundary event attached that points to another script task. The event should be thrown for every task execution",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\847955299\\MultiInstance_NoneBehavior.bpmn",
   "files\\engineIndependent\\847955299\\MultiInstance_NoneBehavior.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_NoneBehavior",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "MultiInstance_OneBehavior",
  "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled three times and its behavior set to 'one'. The task has a signal boundary event attached that points to another script task. The event should be thrown once.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\807475323\\MultiInstance_OneBehavior.bpmn",
   "files\\engineIndependent\\807475323\\MultiInstance_OneBehavior.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_OneBehavior",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "MultiInstance_AllBehavior",
  "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled three times and its behavior set to 'all'. The task has a signal boundary event attached that points to another script task. The event should never be thrown.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\794212416\\MultiInstance_AllBehavior.bpmn",
   "files\\engineIndependent\\794212416\\MultiInstance_AllBehavior.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_AllBehavior",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "MultiInstance_ComplexBehavior",
  "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled three times and its behavior set to 'complex'. The task has a signal boundary event attached that points to another script task which is triggered upon completion of the first instance. All remaining instances are canceled.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2122880335\\MultiInstance_ComplexBehavior.bpmn",
   "files\\engineIndependent\\2122880335\\MultiInstance_ComplexBehavior.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_ComplexBehavior",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "MultiInstance_Parallel",
  "description": "A scriptTask that is marked as a parallel multiInstance task and is enabled three times.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1694223482\\MultiInstance_Parallel.bpmn",
   "files\\engineIndependent\\1694223482\\MultiInstance_Parallel.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_Parallel",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 3
      }
     ],
     "assertions": [
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 1
      }
     ],
     "assertions": [
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "Loop_SubProcess",
  "description": "A subProcess with standardLoopCharacteristics which should be looped as long as 'integerVariable' is less than 3. Each time the subProcess is executed a scripttask logs 'INCREMENT'. The default for the attribute 'testBefore' is used, which is 'false', i.e., the loopCondition is evaluated after the execution (do-while semantics). After the looped task 'task2' is executed once.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\153662704\\Loop_SubProcess.bpmn",
   "files\\engineIndependent\\153662704\\Loop_SubProcess.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__LoopTask__Loop_SubProcess",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 3
      }
     ],
     "assertions": [
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 1
      }
     ],
     "assertions": [
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "Loop_Task",
  "description": "A scriptTask with standardLoopCharacteristics which should be looped as long as 'integerVariable' is less than 3.Each time the task is executed 'INCREMENT' is logged. The default for the attribute 'testBefore' is used, which is 'false', i.e., the loopCondition is evaluated after the execution (do-while semantics). After the looped task 'task2' is executed once.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\621585734\\Loop_Task.bpmn",
   "files\\engineIndependent\\621585734\\Loop_Task.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__LoopTask__Loop_Task",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 3
      }
     ],
     "assertions": [
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 1
      }
     ],
     "assertions": [
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "INCREMENT",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "Loop_ConditionOnly",
  "description": "A scriptTask with standardLoopCharacteristics which should be looped as long as 'integerVariable' is less than 3. Each time the task is executed 'INCREMENT' is logged. The default for the attribute 'testBefore' is used, which is 'false', i.e., the loopCondition is evaluated after the execution (do-while semantics). After the looped task 'task2' is executed once.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1092728006\\Loop_ConditionOnly.bpmn",
   "files\\engineIndependent\\1092728006\\Loop_ConditionOnly.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__LoopTask__Loop_ConditionOnly",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Loop_Maximum",
  "description": "A scriptTask with standardLoopCharacteristics and a condition that always evaluates to true. Additionally a loopMaximum is set to three.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\143696575\\Loop_Maximum.bpmn",
   "files\\engineIndependent\\143696575\\Loop_Maximum.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__LoopTask__Loop_Maximum",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Loop_NoIteration_TestBeforeFalse",
  "description": "A scriptTask with standardLoopCharacteristics and a condition that always evaluates to false, but has testBefore set to false and, hence, should be executed once.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\61367346\\Loop_NoIteration_TestBeforeFalse.bpmn",
   "files\\engineIndependent\\61367346\\Loop_NoIteration_TestBeforeFalse.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__LoopTask__Loop_NoIteration_TestBeforeFalse",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task2",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Loop_NoIteration_TestBeforeTrue",
  "description": "A scriptTask with standardLoopCharacteristics and a condition that always evaluates to false and has testBefore set to true. Hence, the task should never be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2079755901\\Loop_NoIteration_TestBeforeTrue.bpmn",
   "files\\engineIndependent\\2079755901\\Loop_NoIteration_TestBeforeTrue.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__LoopTask__Loop_NoIteration_TestBeforeTrue",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "SubProcess",
  "description": "A process that contains a subProcess",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1929626223\\SubProcess.bpmn",
   "files\\engineIndependent\\1929626223\\SubProcess.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__SubProcess__SubProcess",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Transaction",
  "description": "A process that contains a transaction",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1315075759\\Transaction.bpmn",
   "files\\engineIndependent\\1315075759\\Transaction.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__Transaction__Transaction",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "AdHocSubProcess_Sequential",
  "description": "A process that contains an adHocSubProcess, which executes two contained tasks sequentially",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1448320397\\AdHocSubProcess_Sequential.bpmn",
   "files\\engineIndependent\\1448320397\\AdHocSubProcess_Sequential.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__AdHocSubProcess__AdHocSubProcess_Sequential",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "AdHocSubProcess_Parallel",
  "description": "A process that contains an adHocSubProcess, which executes two contained tasks in parallel",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1959671317\\AdHocSubProcess_Parallel.bpmn",
   "files\\engineIndependent\\1959671317\\AdHocSubProcess_Parallel.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__AdHocSubProcess__AdHocSubProcess_Parallel",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Token_Cardinality_Explicit",
  "description": "A process that contains one scriptTask with completionQuantity=2, one scriptTask with startQuantity=2, and one scriptTask in between with both set to 1. The scriptTask in between must therefore be executed twice.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1157530895\\Token_Cardinality_Explicit.bpmn",
   "files\\engineIndependent\\1157530895\\Token_Cardinality_Explicit.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__TokenCardinality__Token_Cardinality_Explicit",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Token_Cardinality_Default",
  "description": "A process that builds upon TOKEN_CARDINALITY_EXPLICIT, only deferring in leaving the startQuantity and completionQuantity attributes of the middle scriptTasks at their default values, i.e. 1 for both of them. Thus, this process must behave exactly like TOKEN_CARDINALITY_EXPLICIT.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\369969692\\Token_Cardinality_Default.bpmn",
   "files\\engineIndependent\\369969692\\Token_Cardinality_Default.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__TokenCardinality__Token_Cardinality_Default",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task4",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task4",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Token_Cardinality_Split_Default",
  "description": "A process that contains one scriptTask which has two outgoing sequence flows, each leading to one of two forwarding scriptTasks. It is expected that each forward task is executed once and therefore the last and receiving scriptTask is executed twice.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1805700959\\Token_Cardinality_Split_Default.bpmn",
   "files\\engineIndependent\\1805700959\\Token_Cardinality_Split_Default.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__TokenCardinality__Token_Cardinality_Split_Default",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task4",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Token_Cardinality_Split_Explicit",
  "description": "A process that contains one scriptTask which has two outgoing sequence flows, each leading to one of two forwarding scriptTasks. It is expected that each forward task is executed once and therefore the last and receiving scriptTask is executed once because of startingQuantity.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1863749846\\Token_Cardinality_Split_Explicit.bpmn",
   "files\\engineIndependent\\1863749846\\Token_Cardinality_Split_Explicit.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__TokenCardinality__Token_Cardinality_Split_Explicit",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "MARKER_exists",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "SendTask",
  "description": "A test with two processes, which start in parallel. The first one sends a message to the second one via a send task. The message is caught in an intermediate event.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\705386645\\SendTask.bpmn",
   "files\\engineIndependent\\705386645\\SendTask.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__SendTask__SendTask",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "MARKER_exists",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "ReceiveTask",
  "description": "A test with two processes, which start in parallel. The first one sends a message to the second one via an intermediate message event. The message is caught in a receive task.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1886085743\\ReceiveTask.bpmn",
   "files\\engineIndependent\\1886085743\\ReceiveTask.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__ReceiveTask__ReceiveTask",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "MARKER_exists",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "ReceiveTask_Instantiate",
  "description": "A test with two processes. The first one sends a message to the second one via an intermediate message event. The message is caught in a receive task, which instantiates the second process",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\113595676\\ReceiveTask_Instantiate.bpmn",
   "files\\engineIndependent\\113595676\\ReceiveTask_Instantiate.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__activities__ReceiveTask__ReceiveTask_Instantiate",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Cancel_Event",
  "description": "A simple test for canceling a transaction. This test uses the two allowed cancel event types:CancelEndEvent (within the transaction) and CancelBoundaryEvent (interrupting, attached to the transaction).",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1011163737\\Cancel_Event.bpmn",
   "files\\engineIndependent\\1011163737\\Cancel_Event.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Cancel_Event__Cancel_Event",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Compensation_BoundaryEvent_SubProcess",
  "description": "Tests whether the compensation boundary event can be attached to a sub process.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\282267281\\Compensation_BoundaryEvent_SubProcess.bpmn",
   "files\\engineIndependent\\282267281\\Compensation_BoundaryEvent_SubProcess.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_BoundaryEvent_SubProcess",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Compensation_EndEvent_SubProcess",
  "description": "A test with a compensation end event placed in a sub process which should trigger the compensation of the task performed before.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1732841148\\Compensation_EndEvent_SubProcess.bpmn",
   "files\\engineIndependent\\1732841148\\Compensation_EndEvent_SubProcess.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_EndEvent_SubProcess",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Compensation_EndEvent_TopLevel",
  "description": "A test with a top level compensation end event which should trigger the compensation of the task performed before.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1428610332\\Compensation_EndEvent_TopLevel.bpmn",
   "files\\engineIndependent\\1428610332\\Compensation_EndEvent_TopLevel.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_EndEvent_TopLevel",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Compensation_IntermediateEvent",
  "description": "A test with a top level compensation intermediate event which should trigger the compensation of the task performed before.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2056794414\\Compensation_IntermediateEvent.bpmn",
   "files\\engineIndependent\\2056794414\\Compensation_IntermediateEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_IntermediateEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Compensation_StartEvent_EventSubProcess",
  "description": "A test with an event SubProcess, triggered by an Compensation StartEvent. The compensation is triggered by an Intermediate Throw Event placed outside the subprocess.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\32910891\\Compensation_StartEvent_EventSubProcess.bpmn",
   "files\\engineIndependent\\32910891\\Compensation_StartEvent_EventSubProcess.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_StartEvent_EventSubProcess",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Compensation_TriggeredByCancel",
  "description": "A test with a transaction which ends with a CancelEnd Event. In the course of canceling the transaction all successful executed tasks have to be compensated. Therefore, the compensational task Task1 has to be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1130825931\\Compensation_TriggeredByCancel.bpmn",
   "files\\engineIndependent\\1130825931\\Compensation_TriggeredByCancel.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_TriggeredByCancel",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "Conditional_BoundaryEvent_SubProcess_Interrupting",
  "description": "A test for an conditional boundary event attached to a sub process which is marked as interrupting.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\299767587\\Conditional_BoundaryEvent_SubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\299767587\\Conditional_BoundaryEvent_SubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Conditional_Event__Conditional_BoundaryEvent_SubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "Conditional_BoundaryEvent_SubProcess_NonInterrupting",
  "description": "A test for an conditional boundary event attached to a sub process which is marked as non interrupting.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1138357000\\Conditional_BoundaryEvent_SubProcess_NonInterrupting.bpmn",
   "files\\engineIndependent\\1138357000\\Conditional_BoundaryEvent_SubProcess_NonInterrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Conditional_Event__Conditional_BoundaryEvent_SubProcess_NonInterrupting",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "Conditional_IntermediateEvent",
  "description": "A test for an intermediate conditional event: ConditionIntermediate checks a condition set at process instantiation. If the condition is fulfilled the process completes, if not the process is locked at the event and should not complete.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\164965980\\Conditional_IntermediateEvent.bpmn",
   "files\\engineIndependent\\164965980\\Conditional_IntermediateEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Conditional_Event__Conditional_IntermediateEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "test",
      "type": "String",
      "value": "a"
     },
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Conditional_StartEvent_EventSubProcess_Interrupting",
  "description": "A test for an interrupting conditional start event in an event sub process",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\706297055\\Conditional_StartEvent_EventSubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\706297055\\Conditional_StartEvent_EventSubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Conditional_Event__Conditional_StartEvent_EventSubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "test",
      "type": "String",
      "value": "a"
     },
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Conditional_StartEvent_EventSubProcess_NonInterrupting",
  "description": "A test for an conditional start event in an event sub process which is marked as non interrupting.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\249963468\\Conditional_StartEvent_EventSubProcess_NonInterrupting.bpmn",
   "files\\engineIndependent\\249963468\\Conditional_StartEvent_EventSubProcess_NonInterrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Conditional_Event__Conditional_StartEvent_EventSubProcess_NonInterrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Error_BoundaryEvent_SubProcess_Interrupting",
  "description": "A test for the error boundary event attached to a sub process. The task (task2) following the SequenceFlow originating from the boundary event should be executed. The Task (task3) following the normal outgoing sequence flow after the SubProcess must not be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\206205219\\Error_BoundaryEvent_SubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\206205219\\Error_BoundaryEvent_SubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Error_Event__Error_BoundaryEvent_SubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Error_BoundaryEvent_Transaction_Interrupting",
  "description": "A test for the error boundary event attached to a transaction. The task (task2) following the SequenceFlow originating from the boundary event should be executed. The Task (task3) following the normal outgoing sequence flow after the Transaction must not be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\212470988\\Error_BoundaryEvent_Transaction_Interrupting.bpmn",
   "files\\engineIndependent\\212470988\\Error_BoundaryEvent_Transaction_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Error_Event__Error_BoundaryEvent_Transaction_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "ERROR_thrownErrorEvent",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Error_EndEvent_TopLevel",
  "description": "A simple test for the ErrorEndEvent in a top level process.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1968625554\\Error_EndEvent_TopLevel.bpmn",
   "files\\engineIndependent\\1968625554\\Error_EndEvent_TopLevel.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Error_Event__Error_EndEvent_TopLevel",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Error_StartEvent_EventSubProcess_Interrupting",
  "description": "A test for the error start event in an event sub process. After the execution of the EventSubProcess the flow should continue normally.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\987174623\\Error_StartEvent_EventSubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\987174623\\Error_StartEvent_EventSubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Error_Event__Error_StartEvent_EventSubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Escalation_BoundaryEvent_SubProcess_Interrupting",
  "description": "A test for an escalation event interrupting a subprocess. The task (task2) following the Intermediate EscalationEvent and the Task (task4) following the normal outgoing sequence flow after the SubProcess must not be executed. The SequenceFlow originating from the boundary event is activated and therefore Task3 should be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\153542819\\Escalation_BoundaryEvent_SubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\153542819\\Escalation_BoundaryEvent_SubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_BoundaryEvent_SubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task4",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Escalation_BoundaryEvent_SubProcess_NonInterrupting",
  "description": "A test for an escalation event NOT interrupting a subprocess. All tasks (Task1-4) should be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\53131656\\Escalation_BoundaryEvent_SubProcess_NonInterrupting.bpmn",
   "files\\engineIndependent\\53131656\\Escalation_BoundaryEvent_SubProcess_NonInterrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_BoundaryEvent_SubProcess_NonInterrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Escalation_EndEvent_SubProcess",
  "description": "A test for an escalation end event defined in a SubProcess. Only the task attached to the BoundaryEvent should be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1562743602\\Escalation_EndEvent_SubProcess.bpmn",
   "files\\engineIndependent\\1562743602\\Escalation_EndEvent_SubProcess.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_EndEvent_SubProcess",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "ERROR_thrownEscalationEvent",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Escalation_EndEvent_TopLevel",
  "description": "A test for an escalation end event in a top level process.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1910110446\\Escalation_EndEvent_TopLevel.bpmn",
   "files\\engineIndependent\\1910110446\\Escalation_EndEvent_TopLevel.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_EndEvent_TopLevel",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Escalation_IntermediateThrowEvent",
  "description": "A test for an escalation intermediate throw event: Task1 can only be executed if the event has been thrown (and caught).",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\842995978\\Escalation_IntermediateThrowEvent.bpmn",
   "files\\engineIndependent\\842995978\\Escalation_IntermediateThrowEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_IntermediateThrowEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task2",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Escalation_StartEvent_EventSubProcess_Interrupting",
  "description": "A test for the interrupting escalation start event in an event SubProcess. Task1 within in the (normal) SubProcess should not be executed. Task 2 should be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1918215775\\Escalation_StartEvent_EventSubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\1918215775\\Escalation_StartEvent_EventSubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_StartEvent_EventSubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Escalation_StartEvent_EventSubProcess_NonInterrupting",
  "description": "A test for the escalation start event in an event sub process which is marked as \"non interrupting\". Task2 within in the (normal) SubProcess and Task3 which is defined after the SubProcess should be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1025460812\\Escalation_StartEvent_EventSubProcess_NonInterrupting.bpmn",
   "files\\engineIndependent\\1025460812\\Escalation_StartEvent_EventSubProcess_NonInterrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_StartEvent_EventSubProcess_NonInterrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Link_Event",
  "description": "A simple test for link events",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1833308263\\Link_Event.bpmn",
   "files\\engineIndependent\\1833308263\\Link_Event.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Link_Event__Link_Event",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "MARKER_exists",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Message_StartEvent",
  "description": "A test with two processes. The first starts the second via a message sent in an intermediate event.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1792512555\\Message_StartEvent.bpmn",
   "files\\engineIndependent\\1792512555\\Message_StartEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Message_Event__Message_StartEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "MARKER_exists",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Message_IntermediateEvent",
  "description": "A test with two processes, which start in parallel. The first one sends a message to the second one, which is caught in an intermediate event.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1814748164\\Message_IntermediateEvent.bpmn",
   "files\\engineIndependent\\1814748164\\Message_IntermediateEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Message_Event__Message_IntermediateEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "MARKER_exists",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Message_EndEvent",
  "description": "A test with two processes. The first starts the second via a message sent in an end event.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1820391364\\Message_EndEvent.bpmn",
   "files\\engineIndependent\\1820391364\\Message_EndEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Message_Event__Message_EndEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Signal_EndEvent_SubProcess",
  "description": "A test to test a signal end event placed in a SubProcess. The thrown signal is caught by an attached boundary event.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\932789224\\Signal_EndEvent_SubProcess.bpmn",
   "files\\engineIndependent\\932789224\\Signal_EndEvent_SubProcess.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Signal_Event__Signal_EndEvent_SubProcess",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task4",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Signal_BoundaryEvent_SubProcess_NonInterrupting",
  "description": "A test for a signal boundary event NOT interrupting a subprocess. All tasks (Task1-4) should be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\911395742\\Signal_BoundaryEvent_SubProcess_NonInterrupting.bpmn",
   "files\\engineIndependent\\911395742\\Signal_BoundaryEvent_SubProcess_NonInterrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Signal_Event__Signal_BoundaryEvent_SubProcess_NonInterrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Signal_BoundaryEvent_SubProcess_Interrupting",
  "description": "A test for a signal boundary event interrupting a subprocess. The task (task2) following the Intermediate SignalEvent and the Task (task4) following the normal outgoing sequence flow after the SubProcess must not be executed. The SequenceFlow originating from the boundary event is activated and therefore Task3 should be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1066394633\\Signal_BoundaryEvent_SubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\1066394633\\Signal_BoundaryEvent_SubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Signal_Event__Signal_BoundaryEvent_SubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 10000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Signal_IntermediateEvent_ThrowAndCatch",
  "description": "A test for signal intermediate events: After a parallel split one branch of the process awaits a signal which is thrown by the other branch.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1362816533\\Signal_IntermediateEvent_ThrowAndCatch.bpmn",
   "files\\engineIndependent\\1362816533\\Signal_IntermediateEvent_ThrowAndCatch.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Signal_Event__Signal_IntermediateEvent_ThrowAndCatch",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "MARKER_exists",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Signal_StartEvent",
  "description": "A test with two processes. The first one starts the second by throwing a signal in an intermediate event.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1798686479\\Signal_StartEvent.bpmn",
   "files\\engineIndependent\\1798686479\\Signal_StartEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Signal_Event__Signal_StartEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "MARKER_exists",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Signal_EndEvent",
  "description": "A test with two processes. The first one starts the second by throwing a signal in its end event.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1504012278\\Signal_EndEvent.bpmn",
   "files\\engineIndependent\\1504012278\\Signal_EndEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Signal_Event__Signal_EndEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "MARKER_exists",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Signal_IntermediateEvent",
  "description": "A test with two processes, which start in parallel. The first one throws a signal, which the second one catches.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\283406966\\Signal_IntermediateEvent.bpmn",
   "files\\engineIndependent\\283406966\\Signal_IntermediateEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Signal_Event__Signal_IntermediateEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task2",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Signal_StartEvent_EventSubProcess_Interrupting",
  "description": "A test for the interrupting signal start event in an event SubProcess. Task1 within in the (normal) SubProcess should not be executed. Task 2 should be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1299486651\\Signal_StartEvent_EventSubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\1299486651\\Signal_StartEvent_EventSubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Signal_Event__Signal_StartEvent_EventSubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Signal_StartEvent_EventSubProcess_NonInterrupting",
  "description": "A test for the signal start event in an event sub process which is marked as \"non interrupting\". Task2 within in the (normal) SubProcess and Task3 which is defined after the SubProcess should be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1827567270\\Signal_StartEvent_EventSubProcess_NonInterrupting.bpmn",
   "files\\engineIndependent\\1827567270\\Signal_StartEvent_EventSubProcess_NonInterrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Signal_Event__Signal_StartEvent_EventSubProcess_NonInterrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Terminate_Event",
  "description": "A test for a terminate end event",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1588287293\\Terminate_Event.bpmn",
   "files\\engineIndependent\\1588287293\\Terminate_Event.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Terminate_Event__Terminate_Event",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 5000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Timer_IntermediateEvent",
  "description": "A process with two scriptTasks. There is a intermediateCatchEvent in between the tasks that delay the execution for a short period of time.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\62312132\\Timer_IntermediateEvent.bpmn",
   "files\\engineIndependent\\62312132\\Timer_IntermediateEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Timer_Event__Timer_IntermediateEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 5000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Timer_BoundaryEvent_SubProcess_NonInterrupting",
  "description": "A process with multiple scriptTasks and a subProcess with timer events. The execution of the subProcess is delayed by an intermediate timer event for a short amount of time. In the meantime, a boundary timer event should fire without interrupting the subProcess.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\877867496\\Timer_BoundaryEvent_SubProcess_NonInterrupting.bpmn",
   "files\\engineIndependent\\877867496\\Timer_BoundaryEvent_SubProcess_NonInterrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Timer_Event__Timer_BoundaryEvent_SubProcess_NonInterrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 5000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task3",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Timer_BoundaryEvent_SubProcess_Interrupting",
  "description": "A process with multiple scriptTasks and a subProcess with timer events. The execution of the subProcess is delayed by an intermediate timer event for a short amount of time. In the meantime, a boundary timer event should fire and interrupt the subProcess.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1448590269\\Timer_BoundaryEvent_SubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\1448590269\\Timer_BoundaryEvent_SubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Timer_Event__Timer_BoundaryEvent_SubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 12000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task2",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Timer_BoundaryEvent_SubProcess_Interrupting_Activity",
  "description": "A process with multiple scriptTasks and a subProcess with an activity which needs more time for executing than the boundary timer. The execution of the subProcess is therefore longer than the boundary timer event. It is expected that the boundary timer event fires before the task is completed and interrupts the subProcess.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\886546517\\Timer_BoundaryEvent_SubProcess_Interrupting_Activity.bpmn",
   "files\\engineIndependent\\886546517\\Timer_BoundaryEvent_SubProcess_Interrupting_Activity.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Timer_Event__Timer_BoundaryEvent_SubProcess_Interrupting_Activity",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 5000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Timer_StartEvent_EventSubProcess_NonInterrupting",
  "description": "A process with an ordinary subProcess and an event subProcess.The subProcess encloses the event subProcess and the latter is started by a timer startEvent. All activities should be executed without interruption.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\972346708\\Timer_StartEvent_EventSubProcess_NonInterrupting.bpmn",
   "files\\engineIndependent\\972346708\\Timer_StartEvent_EventSubProcess_NonInterrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Timer_Event__Timer_StartEvent_EventSubProcess_NonInterrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 5000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task2",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Timer_StartEvent_EventSubProcess_Interrupting",
  "description": "A process with an ordinary subProcess and an event subProcess. The subProcess encloses the event subProcess and the latter is started by a timer startEvent. The event subProcess interrupts the activities of its parent subProcess.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\133389825\\Timer_StartEvent_EventSubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\133389825\\Timer_StartEvent_EventSubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Timer_Event__Timer_StartEvent_EventSubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 5000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Timer_IntermediateTimeCycleEvent",
  "description": "A process with two scriptTasks. There is an intermediateCatchEvent with the attribute timeCycle in between the tasks that triggers the second task four times.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1962799337\\Timer_IntermediateTimeCycleEvent.bpmn",
   "files\\engineIndependent\\1962799337\\Timer_IntermediateTimeCycleEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Timer_Event__Timer_IntermediateTimeCycleEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 65000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Timer_BoundaryEvent_SubProcess_TimeCycle",
  "description": "A process with multiple scriptTasks and a subProcess with timer events. The execution of the subProcess is delayed by an intermediate timer event for a short amount of time. In the meantime a boundary timer event with the attribute timecycle should fire four times without interrupting the subProcess, which consists of a timer event and a scriptTask.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\394688245\\Timer_BoundaryEvent_SubProcess_TimeCycle.bpmn",
   "files\\engineIndependent\\394688245\\Timer_BoundaryEvent_SubProcess_TimeCycle.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Timer_Event__Timer_BoundaryEvent_SubProcess_TimeCycle",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 35000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Timer_StartEvent_TimeCycle_EventSubProcess_NonInterrupting",
  "description": "A process with an ordinary subProcess and an event subProcess. The subProcess encloses the event subProcess and the latter is started by a timer startEvent with the attribute timeCycle. The event SubProcess should be executed four times. All activities should be executed without interruption.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1098591002\\Timer_StartEvent_TimeCycle_EventSubProcess_NonInterrupting.bpmn",
   "files\\engineIndependent\\1098591002\\Timer_StartEvent_TimeCycle_EventSubProcess_NonInterrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Timer_Event__Timer_StartEvent_TimeCycle_EventSubProcess_NonInterrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Multiple_Parallel_IntermediateEvent",
  "description": "A process with a multiple parallel event. After a parallel split one branch of the process awaits two signals which are thrown by the other branch. The multiple parallel event is thrown.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1431859821\\Multiple_Parallel_IntermediateEvent.bpmn",
   "files\\engineIndependent\\1431859821\\Multiple_Parallel_IntermediateEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_Parallel_IntermediateEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Multiple_IntermediateEvent_ThrowFirstEventDefinition",
  "description": "A process with a multiple event. After a parallel split one branch of the process awaits only one of the two events defined in the multiple event. The event thrown by the other branch, is the fist event definition of the multiple event. The multiple event is thrown.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\618348513\\Multiple_IntermediateEvent_ThrowFirstEventDefinition.bpmn",
   "files\\engineIndependent\\618348513\\Multiple_IntermediateEvent_ThrowFirstEventDefinition.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_IntermediateEvent_ThrowFirstEventDefinition",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Multiple_IntermediateEvent_ThrowLastEventDefinition",
  "description": "A process with a multiple event. After a parallel split one branch of the process awaits only one of the two events defined in the multiple event. The event thrown by the other branch, is the last event definition of the multiple event. The multiple event is thrown.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2071640179\\Multiple_IntermediateEvent_ThrowLastEventDefinition.bpmn",
   "files\\engineIndependent\\2071640179\\Multiple_IntermediateEvent_ThrowLastEventDefinition.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_IntermediateEvent_ThrowLastEventDefinition",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Multiple_IntermediateThrowEvent",
  "description": "A process with a multiple throw event. After a parallel split into three branches two of the branches await each one event. Both events are thrown in a multiple event on the third branch.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\995909423\\Multiple_IntermediateThrowEvent.bpmn",
   "files\\engineIndependent\\995909423\\Multiple_IntermediateThrowEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_IntermediateThrowEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Multiple_IntermediateEvent_MissingEvent",
  "description": "A process with a multiple event. After a parallel split one branch of the process awaits only one of the two events defined in the multiple event. This event is never thrown. The multiple event is never thrown and thus the process is never finished.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1080778486\\Multiple_IntermediateEvent_MissingEvent.bpmn",
   "files\\engineIndependent\\1080778486\\Multiple_IntermediateEvent_MissingEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_IntermediateEvent_MissingEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Multiple_Parallel_IntermediateEvent_MissingEvent",
  "description": "A process with a multiple parallel event. After a parallel split one branch of the process awaits two signals of which only one is thrown by the other branch. The multiple parallel event is never thrown and thus the process is never finished.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1334203782\\Multiple_Parallel_IntermediateEvent_MissingEvent.bpmn",
   "files\\engineIndependent\\1334203782\\Multiple_Parallel_IntermediateEvent_MissingEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_Parallel_IntermediateEvent_MissingEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "ERROR_thrownErrorEvent",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "EventDefinitionRef_Error_EndEvent_TopLevel",
  "description": "A simple test for the usage of eventDefinitionRef with an ErrorEndEvent in a top level process.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1168855714\\EventDefinitionRef_Error_EndEvent_TopLevel.bpmn",
   "files\\engineIndependent\\1168855714\\EventDefinitionRef_Error_EndEvent_TopLevel.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__EventDefinitionRef__EventDefinitionRef_Error_EndEvent_TopLevel",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "EventDefinitionRef_Error_StartEvent_EventSubProcess_Interrupting",
  "description": "A test for the usage of eventDefinitionRef with an error start event in an event sub process. After the execution of the EventSubProcess the flow should continue normally.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\874060305\\EventDefinitionRef_Error_StartEvent_EventSubProcess_Interrupting.bpmn",
   "files\\engineIndependent\\874060305\\EventDefinitionRef_Error_StartEvent_EventSubProcess_Interrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__EventDefinitionRef__EventDefinitionRef_Error_StartEvent_EventSubProcess_Interrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task4",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "EventDefinitionRef_Signal_BoundaryEvent_SubProcess_NonInterrupting",
  "description": "A test for the usage of eventDefinitionRef with a signal boundary event NOT interrupting a subprocess. All tasks (Task1-4) should be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\94567188\\EventDefinitionRef_Signal_BoundaryEvent_SubProcess_NonInterrupting.bpmn",
   "files\\engineIndependent\\94567188\\EventDefinitionRef_Signal_BoundaryEvent_SubProcess_NonInterrupting.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__EventDefinitionRef__EventDefinitionRef_Signal_BoundaryEvent_SubProcess_NonInterrupting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "delay": 5000,
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "EventDefinitionRef_Timer_IntermediateEvent",
  "description": "A process with two scriptTasks. There is a intermediateCatchEvent in between the tasks that delay the execution for a short period of time.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1107171663\\EventDefinitionRef_Timer_IntermediateEvent.bpmn",
   "files\\engineIndependent\\1107171663\\EventDefinitionRef_Timer_IntermediateEvent.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__events__EventDefinitionRef__EventDefinitionRef_Timer_IntermediateEvent",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Lanes",
  "description": "A collaboration with a single participant with two lanes. Lanes have no effect on the execution and should be ignored.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1923761591\\Lanes.bpmn",
   "files\\engineIndependent\\1923761591\\Lanes.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__basics__Lanes__Lanes",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Participant",
  "description": "A collaboration with a single participant",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1757582729\\Participant.bpmn",
   "files\\engineIndependent\\1757582729\\Participant.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__basics__Participant__Participant",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "SequenceFlow",
  "description": "A process with two scriptTasks connected by a sequenceFlow",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1379649351\\SequenceFlow.bpmn",
   "files\\engineIndependent\\1379649351\\SequenceFlow.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__basics__SequenceFlow__SequenceFlow",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "SequenceFlow_Conditional",
  "description": "A process with three scriptTasks connected by sequenceFlows. The first scriptTask points to the other tasks with sequenceFlows. One of these sequenceFlows is associated with a conditionExpression",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\124647253\\SequenceFlow_Conditional.bpmn",
   "files\\engineIndependent\\124647253\\SequenceFlow_Conditional.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__basics__SequenceFlow_Conditional__SequenceFlow_Conditional",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "SequenceFlow_ConditionalDefault",
  "description": "A process with three scriptTasks connected by sequenceFlows. The first scriptTask points to the other tasks with sequenceFlows. One of these sequenceFlows is associated with a conditionExpression, the other one is marked as default",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1286701780\\SequenceFlow_ConditionalDefault.bpmn",
   "files\\engineIndependent\\1286701780\\SequenceFlow_ConditionalDefault.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__basics__SequenceFlow_Conditional__SequenceFlow_ConditionalDefault",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "test",
      "type": "String",
      "value": "b"
     },
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "SequenceFlow_ConditionalDefault_Normal",
  "description": "A process with four scriptTasks connected by sequenceFlows. The first scriptTask points to the other three tasks with sequenceFlows. The first of these sequenceFlows is associated with a conditionExpression, the second one is marked as default and the third has no condition associated. This is a special case document in Sec. 13.2.1, p. 427.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1821753478\\SequenceFlow_ConditionalDefault_Normal.bpmn",
   "files\\engineIndependent\\1821753478\\SequenceFlow_ConditionalDefault_Normal.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__basics__SequenceFlow_Conditional__SequenceFlow_ConditionalDefault_Normal",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "ParallelGateway_Conditions",
  "description": "A process with four scriptTasks and two parallelGateways. Two of the scriptTasks are surrounded by the parallelGateways and the sequenceFlows pointing to the mergine gateway have conditions. These conditions should be ignored by an engine.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\94752381\\ParallelGateway_Conditions.bpmn",
   "files\\engineIndependent\\94752381\\ParallelGateway_Conditions.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__errors__ParallelGateway_Conditions__ParallelGateway_Conditions",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "ExclusiveDiverging_ParallelConverging",
  "description": "A process with four scriptTasks, a diverging exclusiveGateway and a converging parallelGateway. Two scriptTasks are enclosed by the gateways and the execution should deadlock, because only one incoming branch of the parallelGateway should ever be executed. Hence, the scriptTask following the parallelGateway should never be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2116733031\\ExclusiveDiverging_ParallelConverging.bpmn",
   "files\\engineIndependent\\2116733031\\ExclusiveDiverging_ParallelConverging.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__errors__InvalidGatewayCombinations__ExclusiveDiverging_ParallelConverging",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "InclusiveDiverging_ParallelConverging",
  "description": "A process with four scriptTasks, a diverging inclusiveGateway and a converging parallelGateway. Two scriptTasks are enclosed by the gateways and the execution should deadlock if only one incoming branch of the parallelGateway is enabled. Hence, the scriptTask following the parallelGateway should only be executed in a single case.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1112662709\\InclusiveDiverging_ParallelConverging.bpmn",
   "files\\engineIndependent\\1112662709\\InclusiveDiverging_ParallelConverging.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__errors__InvalidGatewayCombinations__InclusiveDiverging_ParallelConverging",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "ERROR_generic",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "LoopTask_NegativeLoopMaximum",
  "description": "A scriptTask with standardLoopCharacteristics and a condition that always evaluates to true. Additionally a loopMaximum is set to minus one.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1920472715\\LoopTask_NegativeLoopMaximum.bpmn",
   "files\\engineIndependent\\1920472715\\LoopTask_NegativeLoopMaximum.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__errors__InvalidLoopConditions__LoopTask_NegativeLoopMaximum",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "ERROR_generic",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "MultiInstanceTask_NegativeLoopCardinality",
  "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled minus one times.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1790213093\\MultiInstanceTask_NegativeLoopCardinality.bpmn",
   "files\\engineIndependent\\1790213093\\MultiInstanceTask_NegativeLoopCardinality.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__errors__InvalidLoopConditions__MultiInstanceTask_NegativeLoopCardinality",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Token_StartQuantity_Two",
  "description": "A process with a scriptTask with completionQuantity=1 and, immediately afterwards, a scriptTask with startQuantity=2. Since there will never two tokens arrive, the scriptTask must not be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\718760856\\Token_StartQuantity_Two.bpmn",
   "files\\engineIndependent\\718760856\\Token_StartQuantity_Two.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__errors__InvalidTokenQuantity__Token_StartQuantity_Two",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "ERROR_generic",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Token_StartQuantity_Zero",
  "description": "A process with a scriptTask with startQuantity=0. Since startQuantity must not be zero, the process must not be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\806911708\\Token_StartQuantity_Zero.bpmn",
   "files\\engineIndependent\\806911708\\Token_StartQuantity_Zero.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__errors__InvalidTokenQuantity__Token_StartQuantity_Zero",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "ERROR_generic",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Token_CompletionQuantity_Zero",
  "description": "A process with a scriptTask with completionQuantity=0. Since completionQuantity must not be zero, the process must not be executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\180510366\\Token_CompletionQuantity_Zero.bpmn",
   "files\\engineIndependent\\180510366\\Token_CompletionQuantity_Zero.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__errors__InvalidTokenQuantity__Token_CompletionQuantity_Zero",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "DATA_correct",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "DataObject_ReadWrite_String",
  "description": "A process consisting of three scriptTasks, the second of which writes a string data object, and the third of which reads the string data object and writes an assertion token into the final log if successful.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1955897946\\DataObject_ReadWrite_String.bpmn",
   "files\\engineIndependent\\1955897946\\DataObject_ReadWrite_String.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__data__DataObject__DataObject_ReadWrite_String",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "DATA_correct",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "Property_ReadWrite_String",
  "description": "A process consisting of three scriptTasks, the second of which writes a string property, and the third of which reads the string property and writes an assertion token into the final log if successful.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\653990450\\Property_ReadWrite_String.bpmn",
   "files\\engineIndependent\\653990450\\Property_ReadWrite_String.bpmn.png"
  ],
  "featureID": "Conformance__BPMN__data__Property__Property_ReadWrite_String",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP01_Sequence",
  "description": "Test Process for WCP01 Sequence: Containing a Start Event, two ScriptTasks (for logging purposes) and an EndEvent. All connected by only basic SequenceFlows.Test passed successfully if the trace confirms the execution of 'Task1'.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1532099702\\WCP01_Sequence.bpmn",
   "files\\engineIndependent\\1532099702\\WCP01_Sequence.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP01_Sequence__WCP01_Sequence",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP02_ParallelSplit",
  "description": "WCP02 ParallelSplit: Checking the ability to create two parallel branches by a ParallelGateway followed by a ScriptTask in each branch.Test passed successfully if both Tasks are executed.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\840206508\\WCP02_ParallelSplit.bpmn",
   "files\\engineIndependent\\840206508\\WCP02_ParallelSplit.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP02_ParallelSplit__WCP02_ParallelSplit",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP03_Synchronization",
  "description": "WCP03 Synchronization: Checking the ability to synchronize two parallel branches. The ScriptTask after the merging ParallelGateway has to be executed only once.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\423365612\\WCP03_Synchronization.bpmn",
   "files\\engineIndependent\\423365612\\WCP03_Synchronization.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP03_Synchronization__WCP03_Synchronization",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "WCP04_ExclusiveChoice",
  "description": "WCP04 Exclusive Choice: Checking the ability to create exclusive branches based on an input. If the input contains 'a' it should execute task1, if it contains 'b' it should execute task2, in any other cases, the default task (task3) should be executed.Special case: If the input contains 'a' and 'b' only the first branch must be activated (task1 here)",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1378499564\\WCP04_ExclusiveChoice.bpmn",
   "files\\engineIndependent\\1378499564\\WCP04_ExclusiveChoice.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP04_ExclusiveChoice__WCP04_ExclusiveChoice",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 5,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ac"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 5
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 6,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "bc"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 6
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 7,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "abc"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 7
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "WCP05_SimpleMerge",
  "description": "WCP05 Simple Merge: Checking the ability to merge multiple branches into a single branch with using a converging XOR gateway. The ScriptTask after the merging gateway must be triggered each time a token arrives.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1894039316\\WCP05_SimpleMerge.bpmn",
   "files\\engineIndependent\\1894039316\\WCP05_SimpleMerge.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP05_SimpleMerge__WCP05_SimpleMerge",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 5,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ac"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 5
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 6,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "bc"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 6
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 7,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "abc"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 7
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "WCP06_MultiChoice_InclusiveGateway",
  "description": "WCP06 Multi Choice: Checking the ability to perform an OR-Split using an inclusive gateway. One or more branches should be created depending on the input. The third branch is only executed if no other condition is evaluated to true.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\998693571\\WCP06_MultiChoice_InclusiveGateway.bpmn",
   "files\\engineIndependent\\998693571\\WCP06_MultiChoice_InclusiveGateway.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP06_MultiChoice__WCP06_MultiChoice_InclusiveGateway",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 5,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ac"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 5
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 6,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "bc"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 6
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 7,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "abc"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 7
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "WCP06_MultiChoice_Implicit",
  "description": "WCP06 Multi Choice: Checking the ability to perform an OR-Split using conditional sequence flows without a preceding gateway. One or more branches should be created depending on the input. The third branch is only executed if no other condition is evaluated to true.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\65715984\\WCP06_MultiChoice_Implicit.bpmn",
   "files\\engineIndependent\\65715984\\WCP06_MultiChoice_Implicit.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP06_MultiChoice__WCP06_MultiChoice_Implicit",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 5,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ac"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 5
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 6,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "bc"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 6
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [{
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 7,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "abc"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 7
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "WCP06_MultiChoice_ComplexGateway",
  "description": "WCP06 Multi Choice: Checking the ability to perform an OR-Split using a complex gateway. One or more branches should be created depending on the input. The third branch is only executed if no other condition is evaluated to true.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1216664127\\WCP06_MultiChoice_ComplexGateway.bpmn",
   "files\\engineIndependent\\1216664127\\WCP06_MultiChoice_ComplexGateway.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP06_MultiChoice__WCP06_MultiChoice_ComplexGateway",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "WCP07_StructuredSynchronizingMerge",
  "description": "WCP07 StructuredSynchronizingMerge: Checks the ability to synchronize the merging of branches created earlier using a multiple choice (see WCP06).",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1223289396\\WCP07_StructuredSynchronizingMerge.bpmn",
   "files\\engineIndependent\\1223289396\\WCP07_StructuredSynchronizingMerge.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP07_StructuredSynchronizingMerge__WCP07_StructuredSynchronizingMerge",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "c"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 4,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ab"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 4
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 5,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "ac"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 5
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 6,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "bc"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 6
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 7,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "abc"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 7
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "WCP08_MultiMerge",
  "description": "WCP08 MultiMerge: Tests the convergence of two or more branches into a single path without synchronization.The test is equivalent to WCP05 for BPMN.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\703746744\\WCP08_MultiMerge.bpmn",
   "files\\engineIndependent\\703746744\\WCP08_MultiMerge.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP08_MultiMerge__WCP08_MultiMerge",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP09_Structured_Discriminator_ComplexGateway",
  "description": "WCP09 Structured Discriminator: Implementation of WCP09 using a mergingComplexGateway with activationCount>=1. I.e, the gateway fires upon completion of the first incoming token and is then disabled.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\779931873\\WCP09_Structured_Discriminator_ComplexGateway.bpmn",
   "files\\engineIndependent\\779931873\\WCP09_Structured_Discriminator_ComplexGateway.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP09_Structured_Discriminator__WCP09_Structured_Discriminator_ComplexGateway",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP09_Structured_Discriminator_MultiInstance",
  "description": "WCP09 partial workaround using MultiInstance: The flow after a MultiInstance Activity should continue afterthe first instance has completed.This covers only a special case for WCP09 Discriminator where one of various EQUAL activities are used.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\2132899869\\WCP09_Structured_Discriminator_MultiInstance.bpmn",
   "files\\engineIndependent\\2132899869\\WCP09_Structured_Discriminator_MultiInstance.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP09_Structured_Discriminator__WCP09_Structured_Discriminator_MultiInstance",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 2
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 1
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 3,
    "name": "Good-Case",
    "testSteps": [{
     "inputs": [
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 3
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "WCP10_ArbitraryCycles",
  "description": "WCP10 arbitrary cycle: Structure is based on the example on workflowpatterns.com: The test consists of a series of scripttasks and exclusive gateways. After the creation of the log, task1 is logged, afterwards a counter integerVariable is incremented and task1 is repeated if the integerVariable is <2; otherwise task2 is logged which will be repeated if integerVariable<3",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1026930100\\WCP10_ArbitraryCycles.bpmn",
   "files\\engineIndependent\\1026930100\\WCP10_ArbitraryCycles.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP10_ArbitraryCycles__WCP10_ArbitraryCycles",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task1",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP11_ImplicitTermination",
  "description": "A process that terminates when all contained activity instances have completed",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\279666028\\WCP11_ImplicitTermination.bpmn",
   "files\\engineIndependent\\279666028\\WCP11_ImplicitTermination.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP11_ImplicitTermination__WCP11_ImplicitTermination",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP12_MultipleInstancesWithoutSynchronization",
  "description": "A process which creates three instances of one script task using multiInstanceLoopCharacteristics, followed by a second activity. The behavior of the multi instance activity is set to None. Hence, a signal should be fired for every complete multi instance activity.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1510782868\\WCP12_MultipleInstancesWithoutSynchronization.bpmn",
   "files\\engineIndependent\\1510782868\\WCP12_MultipleInstancesWithoutSynchronization.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12_MultipleInstancesWithoutSynchronization",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge",
  "description": "A process which creates three instances of one script task using multiInstanceLoopCharacteristics, followed by a second activity. The number of instances is hard-coded into the process. The behavior of the multi instance activity is set to 'All'.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1306486444\\WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge.bpmn",
   "files\\engineIndependent\\1306486444\\WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge__WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 3
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge",
  "description": "A process with a multiple instances activity, where the loop cardinality is read from a variable at run-time. The behavior of the multi instance activity is set to 'All'.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\938283048\\WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge.bpmn",
   "files\\engineIndependent\\938283048\\WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge__WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge",
  "testPartners": []
 },
 {
  "testCases": [
   {
    "number": 1,
    "name": "Good-Case",
    "testSteps": [{
     "delay": 8000,
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "a"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 1
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task1",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task3",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   },
   {
    "number": 2,
    "name": "Good-Case",
    "testSteps": [{
     "delay": 8000,
     "inputs": [
      {
       "name": "test",
       "type": "String",
       "value": "b"
      },
      {
       "name": "testCaseNumber",
       "type": "Integer",
       "value": 2
      },
      {
       "name": "integerVariable",
       "type": "Integer",
       "value": 0
      }
     ],
     "assertions": [
      {
       "trace": "SCRIPT_task2",
       "type": "BPMNTestAssertion"
      },
      {
       "trace": "SCRIPT_task4",
       "type": "BPMNTestAssertion"
      }
     ],
     "type": "BPMNTestStep"
    }]
   }
  ],
  "name": "WCP16_DeferredChoice",
  "description": "An event-based exclusive gateway with two possible branches wait for one out of two signals which are signaled depending on the input. Using a timer, it is ensured that the signals are signaled when the event-based gateway is already waiting for them. Based on EventBasedGateway_Signals",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1757905920\\WCP16_DeferredChoice.bpmn",
   "files\\engineIndependent\\1757905920\\WCP16_DeferredChoice.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP16_DeferredChoice__WCP16_DeferredChoice",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task3",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP17_InterleavedParallelRouting",
  "description": "A set of activity instances is executed sequentially in an order that is decided at run time. No two activity instances of this set are active at the same point in time",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\147098646\\WCP17_InterleavedParallelRouting.bpmn",
   "files\\engineIndependent\\147098646\\WCP17_InterleavedParallelRouting.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP17_InterleavedParallelRouting__WCP17_InterleavedParallelRouting",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [{
     "trace": "SCRIPT_task2",
     "type": "BPMNTestAssertion"
    }],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP19_CancelTask",
  "description": "An activity can be canceled when it emits an error event.",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1420088392\\WCP19_CancelTask.bpmn",
   "files\\engineIndependent\\1420088392\\WCP19_CancelTask.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP19_CancelTask__WCP19_CancelTask",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP20_CancelCaseError",
  "description": "Cancels a sub-process by emitting an error event inside the sub-process which is handled through a boundary event. See Error_BoundaryEvent_SubProcess_Interrupting",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1380602\\WCP20_CancelCaseError.bpmn",
   "files\\engineIndependent\\1380602\\WCP20_CancelCaseError.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP20_CancelCase__WCP20_CancelCaseError",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [
     {
      "trace": "SCRIPT_task1",
      "type": "BPMNTestAssertion"
     },
     {
      "trace": "SCRIPT_task2",
      "type": "BPMNTestAssertion"
     }
    ],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP20_CancelCaseCancel",
  "description": "Cancels a sub-process by emitting a cancel event inside the sub-process which is handled through a boundary event. See Cancel_Event",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\115887812\\WCP20_CancelCaseCancel.bpmn",
   "files\\engineIndependent\\115887812\\WCP20_CancelCaseCancel.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP20_CancelCase__WCP20_CancelCaseCancel",
  "testPartners": []
 },
 {
  "testCases": [{
   "number": 1,
   "name": "Good-Case-1",
   "testSteps": [{
    "inputs": [
     {
      "name": "testCaseNumber",
      "type": "Integer",
      "value": 1
     },
     {
      "name": "integerVariable",
      "type": "Integer",
      "value": 0
     }
    ],
    "assertions": [],
    "type": "BPMNTestStep"
   }]
  }],
  "name": "WCP20_CancelCaseTerminate",
  "description": "Cancels a process immediately by emitting a terminate event. See Terminate_Event",
  "language": "BPMN",
  "engineIndependentFiles": [
   "files\\engineIndependent\\1995559841\\WCP20_CancelCaseTerminate.bpmn",
   "files\\engineIndependent\\1995559841\\WCP20_CancelCaseTerminate.bpmn.png"
  ],
  "featureID": "Expressiveness__BPMN__cfpatterns__WCP20_CancelCase__WCP20_CancelCaseTerminate",
  "testPartners": []
 }
]