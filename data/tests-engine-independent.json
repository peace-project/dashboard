[
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Empty",
    "description": "A receive-reply pair with an intermediate empty.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Empty.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Empty__Empty",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{"type": "ExitAssertion"}],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Exit",
    "description": "A receive-reply pair with an intermediate exit. There should not be a normal response.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Exit.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Exit__Exit",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Input Value 13 should return validation fault-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "13",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "invalidVariables",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Validate",
    "description": "A receive-reply pair with an intermediate variable validation. The variable to be validated describes a month, so only values in the range of 1 and 12 should validate successfully.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Validate.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\basic\\months.xsd"
    ],
    "featureID": "Conformance__BPEL__basic__Validate__Validate",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "invalidVariables",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Validate-InvalidVariables",
    "description": "A receive-reply pair with an intermediate variable validation. The variable to be validated is of type xs:int and xs:boolean is copied into it.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Validate-InvalidVariables.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\basic\\months.xsd"
    ],
    "featureID": "Conformance__BPEL__basic__Validate__Validate-InvalidVariables",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "uninitializedVariable",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Variables-UninitializedVariableFault-Reply",
    "description": "A receive-reply pair where the variable of the reply is not initialized.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Variables-UninitializedVariableFault-Reply.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Variables__Variables-UninitializedVariableFault-Reply",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "uninitializedVariable",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Variables-UninitializedVariableFault-Invoke",
    "description": "A receive-reply pair with intermediate invoke. The inputVariable of the invoke is not initialized.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Variables-UninitializedVariableFault-Invoke.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Variables__Variables-UninitializedVariableFault-Invoke",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "DefaultValue-10-Should-Be-Returned-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "10"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Variables-DefaultInitialization",
    "description": "A receive-reply pair where the variable of the reply is assigned with a default value.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Variables-DefaultInitialization.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Variables__Variables-DefaultInitialization",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Input Value 13 should return validation fault-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "13",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "invalidVariables",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Validate",
    "description": "A receive-reply pair with an intermediate assign that has validate set to yes. The assign copies to a variable that represents a month and the validation should fail for values not in the range of one to twelve.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Validate.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\basic\\months.xsd"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Validate",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Property",
    "description": "A receive-reply pair with an intermediate assign that copies from a property instead of a variable.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Property.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Property",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-To-Property",
    "description": "A receive-reply pair with an intermediate assign that copies to a property instead of a variable.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-To-Property.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-To-Property",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "0"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-PartnerLink",
    "description": "A receive-reply pair with an intermediate assign that assigns a WS-A EndpointReference to a partnerLink which is used in a subsequent invoke.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-PartnerLink.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-PartnerLink",
    "testPartners": [
      {
        "external": false,
        "interfaceDescription": "TestPartner.wsdl",
        "publishedUrl": "http://localhost:2000/bpel-testpartner",
        "rules": [
          {
            "input": {"type": "any"},
            "operation": "startProcessAsync"
          },
          {
            "input": {"type": "any"},
            "operation": "startProcessWithEmptyMessage"
          },
          {
            "output": {
              "type": "fault",
              "value": "UNDECLARED"
            },
            "input": {
              "type": "integer",
              "value": -5
            },
            "operation": "startProcessSync"
          },
          {
            "output": {
              "type": "fault",
              "value": "DECLARED"
            },
            "input": {
              "type": "integer",
              "value": -6
            },
            "operation": "startProcessSync"
          },
          {
            "output": {
              "type": "script",
              "value": "ConcurrencyDetector.access()"
            },
            "input": {
              "type": "integer",
              "value": 100
            },
            "operation": "startProcessSync"
          },
          {
            "output": {
              "type": "script",
              "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
            },
            "input": {
              "type": "integer",
              "value": 101
            },
            "operation": "startProcessSync"
          },
          {
            "output": {
              "type": "script",
              "value": "ConcurrencyDetector.getNumberOfCalls()"
            },
            "input": {
              "type": "integer",
              "value": 102
            },
            "operation": "startProcessSync"
          },
          {
            "output": {
              "type": "script",
              "value": "ConcurrencyDetector.reset()"
            },
            "input": {
              "type": "integer",
              "value": 103
            },
            "operation": "startProcessSync"
          },
          {
            "output": {"type": "echo"},
            "input": {"type": "any"},
            "operation": "startProcessSync"
          }
        ],
        "type": "WSDL",
        "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
      },
      {
        "external": false,
        "interfaceDescription": "TestPartner.wsdl",
        "publishedUrl": "http://localhost:2000/bpel-assigned-testpartner",
        "rules": [],
        "type": "WSDL",
        "wsdlUrl": "http://localhost:2000/bpel-assigned-testpartner?wsdl"
      }
    ]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Element-Variable",
    "description": "A receive-reply pair with an intermediate assign that copies the input to a element variable and from there to the output variable.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Element-Variable.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Element-Variable",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-PartnerLink-PartnerRole",
    "description": "A receive-reply pair with an intermediate assign that assigns an existing partnerLink to another partnerLink of the same type which is used in a subsequent invoke.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-PartnerLink-PartnerRole.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-PartnerLink-PartnerRole",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "unsupportedReference",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-PartnerLink-UnsupportedReference",
    "description": "A receive-reply pair with an intermediate assign that assigns a bogus reference to a partnerLink which is used in a subsequent invoke. The reference scheme should not be supported by any engine and fail with a corresponding fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-PartnerLink-UnsupportedReference.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-PartnerLink-UnsupportedReference",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "mismatchedAssignment",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-MismatchedAssignmentFailure",
    "description": "An assignment between two incompatible types. A mismatchedAssignmentFailure should be thrown.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-MismatchedAssignmentFailure.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-MismatchedAssignmentFailure",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Literal",
    "description": "A receive-reply pair with an intermediate assign that copies a literal.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Literal.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Literal",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Expression-From",
    "description": "A receive-reply pair with an intermediate assign that uses an expression in a from element.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Expression-From.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Expression-From",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Expression-To",
    "description": "A receive-reply pair with an intermediate assign that uses an expression in a to element.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Expression-To.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Expression-To",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-ExpressionLanguage-From",
    "description": "A receive-reply pair with an intermediate assign that uses an expression with expressionLanguage declaration in a from element.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-ExpressionLanguage-From.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-ExpressionLanguage-From",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-ExpressionLanguage-To",
    "description": "A receive-reply pair with an intermediate assign that uses an expression with expressionLanguage declaration in a to element.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-ExpressionLanguage-To.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-ExpressionLanguage-To",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "10"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Int",
    "description": "A receive-reply pair combined with an assign and an invoke in between. The assign copies an int value as an expression to the inputVariable of the invoke. The invocation fails if the value copied is not an int (but, for instance, a float).",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Int.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Int",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "selectionFailure",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-SelectionFailure",
    "description": "A receive-reply pair with an intermediate assign that uses a from that retuns zero nodes. This should trigger a selectionFailure.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-SelectionFailure.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-SelectionFailure",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Copy-Query",
    "description": "A process with a receive-reply pair with an intermediate assign that uses a query in a from element.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Copy-Query.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-Query",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Copy-QueryLanguage",
    "description": "A process with a receive-reply pair with an intermediate assign that uses a query with explicit language declaration in a from element.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Copy-QueryLanguage.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-QueryLanguage",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-To-Query",
    "description": "A process with a receive-reply pair with an intermediate assign that uses a query in a to element.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-To-Query.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-To-Query",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-To-QueryLanguage",
    "description": "A process with a receive-reply pair with an intermediate assign that uses a query with explicit language declaration in a to element.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-To-QueryLanguage.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-To-QueryLanguage",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "mismatchedAssignmentFailure",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Copy-KeepSrcElementName",
    "description": "A receive-reply pair with an intermediate assign with a copy that has keepSrcElementName set to yes. This should trigger a fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Copy-KeepSrcElementName.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-KeepSrcElementName",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "-1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Copy-IgnoreMissingFromData",
    "description": "A receive-reply pair with an intermediate assign with a copy that has ignoreMissingFromData set to yes and contains a from element with an erroneous xpath statement. Therefore, the assign should be ignored.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Copy-IgnoreMissingFromData.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-IgnoreMissingFromData",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Copy-GetVariableProperty",
    "description": "A receive-reply pair with an intermediate assign that uses the getVariableProperty function.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Copy-GetVariableProperty.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-GetVariableProperty",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Copy-DoXslTransform",
    "description": "A receive-reply pair with an intermediate assign that uses the doXslTransform function.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Copy-DoXslTransform.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\basic\\echo.xslt",
      "src\\main\\tests\\files\\bpel\\basic\\notCompileable.xslt"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-DoXslTransform",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "xsltInvalidSource",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Copy-DoXslTransform-InvalidSourceFault",
    "description": "A receive-reply pair with an intermediate assign that uses the doXslTransform function without a proper source for the script.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Copy-DoXslTransform-InvalidSourceFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\basic\\echo.xslt",
      "src\\main\\tests\\files\\bpel\\basic\\notCompileable.xslt"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-DoXslTransform-InvalidSourceFault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "xsltStylesheetNotFound",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Copy-DoXslTransform-XsltStylesheetNotFound",
    "description": "A receive-reply pair with an intermediate assign that uses the doXslTransform function, but where the stylesheet does not exist.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Copy-DoXslTransform-XsltStylesheetNotFound.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\basic\\echo.xslt",
      "src\\main\\tests\\files\\bpel\\basic\\notCompileable.xslt"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-DoXslTransform-XsltStylesheetNotFound",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "subLanguageExecutionFault",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-Copy-DoXslTransform-SubLanguageExecutionFault",
    "description": "A receive-reply pair with an intermediate assign that uses the doXslTransform function, but where the actual stylesheet has errors.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-Copy-DoXslTransform-SubLanguageExecutionFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\basic\\echo.xslt",
      "src\\main\\tests\\files\\bpel\\basic\\notCompileable.xslt"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-Copy-DoXslTransform-SubLanguageExecutionFault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "-1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Assign-VariablesUnchangedInspiteOfFault",
    "description": "A receive-reply pair with two intermediate assigns, the second of which produces a fault that is handled by the process-level faultHandler to send the response. Because of the fault, the second assign should have no impact on the response.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Assign-VariablesUnchangedInspiteOfFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\basic\\echo.xslt",
      "src\\main\\tests\\files\\bpel\\basic\\notCompileable.xslt"
    ],
    "featureID": "Conformance__BPEL__basic__Assign__Assign-VariablesUnchangedInspiteOfFault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-Async",
    "description": "A receive-reply pair with an intermediate asynchronous invoke.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-Async.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Async",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-Sync",
    "description": "A receive-reply pair with an intermediate synchronous invoke.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-Sync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Sync",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-InitializePartnerRole-Yes-Async",
    "description": "A receive-reply pair with an intermediate asynchronous invoke. The invoke has a partnerLink with initializePartnerRole attribute set to yes.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-InitializePartnerRole-Yes-Async.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-InitializePartnerRole-Yes-Async",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-InitializePartnerRole-Yes-Sync",
    "description": "A receive-reply pair with an intermediate synchronous invoke. The invoke has a partnerLink with initializePartnerRole attribute set to yes.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-InitializePartnerRole-Yes-Sync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-InitializePartnerRole-Yes-Sync",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-InitializePartnerRole-No-Async",
    "description": "A receive-reply pair with an intermediate asynchronous invoke. The invoke has a partnerLink with initializePartnerRole attribute set to no.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-InitializePartnerRole-No-Async.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-InitializePartnerRole-No-Async",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-InitializePartnerRole-No-Sync",
    "description": "A receive-reply pair with an intermediate synchronous invoke. The invoke has a partnerLink with initializePartnerRole attribute set to no.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-InitializePartnerRole-No-Sync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-InitializePartnerRole-No-Sync",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "-5",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "CustomFault",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-Sync-Fault",
    "description": "A receive-reply pair with an intermediate synchronous invoke that should trigger a fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-Sync-Fault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Sync-Fault",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-Empty",
    "description": "A receive-reply pair with an intermediate invoke of an operation that has no message associated with it. No definition of inputVariable or outputVariable is required.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-Empty.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Empty",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-ToParts",
    "description": "A receive-reply pair with an intermediate synchronous invoke that uses the toParts syntax.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-ToParts.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-ToParts",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-FromParts",
    "description": "A receive-reply pair with an intermediate synchronous invoke that uses the fromParts syntax.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-FromParts.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-FromParts",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-Correlation-Pattern-InitAsync",
    "description": "An asynchronous receive that initiates a correlationSet used by a subsequent invoke that also uses a request-response pattern and is thereafter followed by receive-reply pair that also uses the correlationSet.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-Correlation-Pattern-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Correlation-Pattern-InitAsync",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "0"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-Correlation-Pattern-InitSync",
    "description": "A synchronous receive that initiates a correlationSet used by a subsequent invoke that also uses a request-response pattern and is thereafter followed by receive-reply pair that also uses the correlationSet.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-Correlation-Pattern-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Correlation-Pattern-InitSync",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "-6",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "0"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-Catch",
    "description": "A receive-reply pair with an intermediate invoke that results in a fault for certain input, but catches that fault and replies.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-Catch.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Catch",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "-5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "0"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-Catch-UndeclaredFault",
    "description": "A receive-reply pair with an intermediate invoke that results in a fault for certain input, but catches that fault and replies. The fault is not declared in the Web Service Definition of the partner service.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-Catch-UndeclaredFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-Catch-UndeclaredFault",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Enter-CatchAll-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "-6",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "-1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-CatchAll",
    "description": "A receive-reply pair with an intermediate invoke that results in a fault for certain input, but catches all faults and replies.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-CatchAll.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-CatchAll",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Enter-CatchAll-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "-5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "0"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-CatchAll-UndeclaredFault",
    "description": "A receive-reply pair with an intermediate invoke that results in a fault for certain input, but catches all faults and replies.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-CatchAll-UndeclaredFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-CatchAll-UndeclaredFault",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "0"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-CompensateScope-CompensationHandler",
    "description": "A receive-reply pair combined with an invoke that has a compensationHandler, followed by a throw. The fault is caught by the process-level faultHandler containing a compensateScope. That faultHandler triggers the compensationHandler of the invoke which contains the reply.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-CompensateScope-CompensationHandler.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-CompensateScope-CompensationHandler",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "0"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Invoke-CompensationHandler",
    "description": "A receive-reply pair combined with an invoke that has a compensationHandler, followed by a throw. The fault is caught by the process-level faultHandler. That faultHandler triggers the compensationHandler of the invoke which contains the reply.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Invoke-CompensationHandler.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Invoke__Invoke-CompensationHandler",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        }
      ]
    }],
    "name": "Receive",
    "description": "A single asynchronous receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Receive.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Receive__Receive",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Receive-Correlation-InitAsync",
    "description": "Two asynchronous receives, followed by a receive-reply pair, and bound to a single correlationSet.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Receive-Correlation-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Receive__Receive-Correlation-InitAsync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "0"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Receive-Correlation-InitSync",
    "description": "One synchronous receive, one asynchronous receive, followed by a receive-reply pair, and bound to a single correlationSet.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Receive-Correlation-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Receive__Receive-Correlation-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-MessageExchanges",
    "description": "A simple receive-reply pair that uses a messageExchange.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-Multiple-MessageExchanges",
    "description": "A receive-reply pair followed by a receive-reply pair of the same operation that use messageExchanges to define which reply belongs to which receive and the response is the initial value first then the sum of the received values.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-Multiple-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-Multiple-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-FIFO-MessageExchanges",
    "description": "Two receives of the same operation that use messageExchanges to define which reply belongs to which receive and the response is 1 for the reply to the first receive and 2 for the second reply to the second receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-FIFO-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-FIFO-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-FILO-MessageExchanges",
    "description": "Two receives of the same operation that use messageExchanges to define which reply belongs to which receive and the response is 2 for the reply to the second receive and 1 for the second reply to the first receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-FILO-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-FILO-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "ambiguousReceive",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Receive-AmbiguousReceiveFault",
    "description": "An asynchronous receive that initiates two correlationSets, followed by a flow with two sequences that contain synchronous receive-reply pairs for the same operation but differnet correlationSets. Should trigger an ambiguousReceive fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Receive-AmbiguousReceiveFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Receive__Receive-AmbiguousReceiveFault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "conflictingReceive",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Receive-ConflictingReceiveFault",
    "description": "An asynchronous receive that initiates a correlationSet, followed by a flow with two sequences that contain synchronous receive-reply pair for the same operation and correlationSet. Should trigger a conflictingReceive fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Receive-ConflictingReceiveFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Receive__Receive-ConflictingReceiveFault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessSyncString",
          "oneWay": false
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "conflictingRequest",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSyncString",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-ConflictingRequestFault",
    "description": "A synchronous interaction, followed by intermediate while that subsequently enables multiple receives that correspond to a single synchronous message exchange. Should trigger a conflictingRequest fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-ConflictingRequestFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-ConflictingRequestFault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "correlationViolation",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-CorrelationViolation-No",
    "description": "A receive-reply pair that uses an uninitiated correlationSet and sets initiate to no. Should trigger a correlationViolation fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-CorrelationViolation-No.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-CorrelationViolation-No",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "correlationViolation",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-CorrelationViolation-Yes",
    "description": "Two subsequent receive-reply pairs which share a correlationSet and where both receives have initiate set to yes.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-CorrelationViolation-Yes.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-CorrelationViolation-Yes",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "faultString": "correlationViolation",
              "type": "SoapFaultTestAssertion"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "2"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "ReceiveReply-CorrelationViolation-Join",
    "description": "A receive-reply pair that initates a correlationSet with an intermediate invoke that tries to join the correlationSet. The join operation should only work if the correlationSet was initiate with a certain value.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-CorrelationViolation-Join.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-CorrelationViolation-Join",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply",
    "description": "A simple receive-reply pair.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-Correlation-InitAsync",
    "description": "An asynchronous receive that initiates a correlationSet followed by a receive-reply pair that uses this set.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-Correlation-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-Correlation-InitAsync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "0"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 1000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-Correlation-InitSync",
    "description": "A synchronous recieve that initiates a correlationSet followed by a receive-reply pair that uses this set.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-Correlation-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-Correlation-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-FromParts",
    "description": "A receive-reply pair that uses the fromPart syntax instead of a variable.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-FromParts.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-FromParts",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-ToParts",
    "description": "A receive-reply pair that uses the toPart syntax instead of a variable.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-ToParts.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-ToParts",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "syncFault",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ReceiveReply-Fault",
    "description": "A receive-reply pair replies with a fault instead of a variable.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\ReceiveReply-Fault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__ReceiveReply__ReceiveReply-Fault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "completionConditionFailure",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Throw",
    "description": "A receive-reply pair with an intermediate throw. The response should a soap fault containing the bpel fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Throw.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Throw__Throw",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "completionConditionFailure",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Throw-WithoutNamespace",
    "description": "A receive-reply pair with an intermediate throw that uses a bpel fault without explicitly using the bpel namespace. The respone should be a soap fault containing the bpel fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Throw-WithoutNamespace.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Throw__Throw-WithoutNamespace",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [
            {
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            },
            {
              "faultString": "completionConditionFailure",
              "type": "SoapFaultTestAssertion"
            }
          ],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Throw-FaultData",
    "description": "A receive-reply pair with an intermediate throw that also uses a faultVariable. The content of the faultVariable should be contained in the response.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Throw-FaultData.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Throw__Throw-FaultData",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "testFault",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Throw-CustomFault",
    "description": "A receive-reply pair with an intermediate throw that throws a custom fault that undefined in the given namespace. The response should be a soap fault containing the custom fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Throw-CustomFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Throw__Throw-CustomFault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "syncFault",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Throw-CustomFaultInWsdl",
    "description": "A receive-reply pair with an intermediate throw that throws a custom fault defined in the myRole WSDL. The response should be a soap fault containing the custom fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Throw-CustomFaultInWsdl.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Throw__Throw-CustomFaultInWsdl",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "completionConditionFailure",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Rethrow",
    "description": "A receive activity with an intermediate throw and a fault handler with a catchAll. The fault handler rethrows the fault.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Rethrow.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Rethrow__Rethrow",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [
            {
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            },
            {
              "faultString": "completionConditionFailure",
              "type": "SoapFaultTestAssertion"
            }
          ],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Rethrow-FaultDataUnmodified",
    "description": "A receive activity with an intermediate throw that uses a faultVariable. A fault handler catches the fault, changes the data, and rethrows the fault. The fault should be the response with unchanged data.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Rethrow-FaultDataUnmodified.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Rethrow__Rethrow-FaultDataUnmodified",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [
            {
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            },
            {
              "faultString": "completionConditionFailure",
              "type": "SoapFaultTestAssertion"
            }
          ],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Rethrow-FaultData",
    "description": "A receive activity with an intermediate throw that uses a faultVariable. A fault handler catches and rethrows the fault. The fault should be the response along with the data.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Rethrow-FaultData.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Rethrow__Rethrow-FaultData",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Wait-For",
    "description": "A receive-reply pair with an intermediate wait that pauses execution for five seconds.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Wait-For.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Wait__Wait-For",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "invalidExpressionValue",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Wait-For-InvalidExpressionValue",
    "description": "A receive-reply pair with an intermediate wait. The for element is assigned a value of xs:int, but only xs:duration is allowed.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Wait-For-InvalidExpressionValue.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Wait__Wait-For-InvalidExpressionValue",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Wait-Until",
    "description": "A receive-reply pair with an intermediate wait that pauses the execution until a date in the past. Therefore, the wait should complete instantly.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\basic\\Wait-Until.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__basic__Wait__Wait-Until",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-Compensate",
    "description": "A scope with a receive-reply pair where the reply is located in a compensationHandler. The scope is followed by a throw and the compensationHandler is invoked from the process-level faultHandler that catches the fault using compensate.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-Compensate.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Compensation__Scope-Compensate",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-Compensate-Flow",
    "description": "A scope with a receive-reply pair where the reply data assignment and the reply are linked in a flow nested in compensationHandler. The scope is followed by a throw and the compensationHandler is invoked from the process-level faultHandler that catches the fault using compensate.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-Compensate-Flow.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Compensation__Scope-Compensate-Flow",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-CompensateScope",
    "description": "A scope with a receive-reply pair where the reply is located in a compensationHandler. The scope is followed by a throw and the compensationHandler is invoked from the process-level faultHandler that catches the fault using compensateScope.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-CompensateScope.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Compensation__Scope-CompensateScope",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "3"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-ComplexCompensation",
    "description": "Complex scope compensation test case that implements the scenario described in Sec. 12.4.2.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-ComplexCompensation.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Compensation__Scope-ComplexCompensation",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-RepeatedCompensation",
    "description": "A scope with a receive-reply pair where the reply is located in a compensationHandler. The scope is followed by a throw. The process-level faultHandler that catches the fault contains two subsequent compensates the second of which should be treated as empty.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-RepeatedCompensation.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Compensation__Scope-RepeatedCompensation",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-CorrelationSets-InitAsync",
    "description": "A scope with an asynchronous receive which initiates the correlation set and a receive-reply pair, as well as a scope-level definition of a correlationSet that is used by the messaging activities.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-CorrelationSets-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__CorrelationSets__Scope-CorrelationSets-InitAsync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-CorrelationSets-InitSync",
    "description": "A scope with two subsequent receive-reply pairs and a scope-level definition of a correlationSet that is used by the messaging activities.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-CorrelationSets-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__CorrelationSets__Scope-CorrelationSets-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-MessageExchanges",
    "description": "A scope with a receive-reply pair and a scope-level definition of messageExchanges.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__MessageExchanges__Scope-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-Multiple-MessageExchanges",
    "description": "A scope with a receive-reply pair followed by a receive-reply pair of the same operation that use scope-level definition of messageExchanges to define which reply belongs to which receive and the response is the initial value first then the sum of the received values.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-Multiple-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__MessageExchanges__Scope-Multiple-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-PartnerLinks",
    "description": "A scope with a receive-reply pair and an intermediate invoke. The partnerLink which is invoked is defined at scope-level.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-PartnerLinks.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__PartnerLinks__Scope-PartnerLinks",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-Variables",
    "description": "A scope with a receive-reply pair and an intermediate invoke. The partnerLink which is invoked is defined at scope-level.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-Variables.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Variables__Scope-Variables",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "123",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "3"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-Variables-Overwriting",
    "description": "A scope with a receive-reply pair and another nested scope. The nested scope overwrites a variable of the parent scope. Child-level manipulation of this variable should not be visible at the parent scope.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-Variables-Overwriting.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Variables__Scope-Variables-Overwriting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "11"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "4",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "14"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "123",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "133"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-Isolated",
    "description": "A receive-reply pair that encloses a flow with ten isolated scopes which all increment the result by one. As the scopes should not run in parallel, the outcome must be deterministic.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-Isolated.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Scope-Attributes__Scope-Isolated",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "-1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-TerminationHandlers",
    "description": "A scope with a receive-reply pair and a nested scope in between. That scope in turn contains a flow with two parallel scopes. Both scopes pause execution for a short period. The scope that resumes execution first throws a fault caught by the faultHandler of its parent scope. The should trigger the execution of the terminationHandler of its sibling scope.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-TerminationHandlers.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__TerminationHandlers__Scope-TerminationHandlers",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "-2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-TerminationHandlers-OutboundLink",
    "description": "A receive-reply pair and a nested scope in between. That scope in turn contains a flow with two parallel scopes. Both scopes pause execution for a short period. The scope that resumes execution first throws a fault caught by the faultHandler of its parent scope. The should trigger the execution of the terminationHandler of its sibling scope. The input value is assigned the reply first, in the terminationHandler -1 is assigned to it and in th outbound linked assign -2.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-TerminationHandlers-OutboundLink.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__TerminationHandlers__Scope-TerminationHandlers-OutboundLink",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "-1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-TerminationHandlers-FaultNotPropagating",
    "description": "A scope with a receive-reply pair and a nested scope in between. That scope in turn contains a flow with two parallel scopes. Both scopes pause execution for a short period. The scope that resumes execution first throws a fault caught by the faultHandler of its parent scope. The should trigger the execution of the terminationHandler of its sibling scope. That terminationHandler also throws a fault which should not be propagated.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-TerminationHandlers-FaultNotPropagating.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__TerminationHandlers__Scope-TerminationHandlers-FaultNotPropagating",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "3",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "3"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-RepeatableConstructCompensation",
    "description": "A receive followed by a while that contains a scope with a compensationHandler. After the while comes a throw and its fault is caught by the process-level faultHandler. This faultHandler first invokes compensation of all scopes and the replies to the initial receive. The content of the reply depends on the execution of the compensationHandlers.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-RepeatableConstructCompensation.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Compensation__Scope-RepeatableConstructCompensation",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "missingReply",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "MissingReply",
    "description": "A receive for a synchronous operation with no associated reply.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\MissingReply.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__MessageExchanges__MissingReply",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "missingRequest",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "MissingRequest",
    "description": "A receive and a reply which belong to different messageExchanges. On the execution of the reply, a missingRequest fault should be thrown.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\MissingRequest.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__MessageExchanges__MissingRequest",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 3000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
            "type": "XpathTestAssertion",
            "value": "event"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSyncString",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-Async-InitSync",
    "description": "A receive-reply pair followed by a wait in a scope and an onEvent eventHandler on this level. A second receive-reply pair which responses the 'event' (initialized in the onEvent), follows the scope. The first receive initiates a correlationSet on which the onEvent correlates with an asynchronous operation and the second receive correlates with a synchronous operation.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-Async-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Async-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-InitAsync",
    "description": "An asynchronous receive followed by a wait and a process-level onMessage eventHandler. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-InitAsync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-Element-InitAsync",
    "description": "An asynchronous receive followed by a wait and a process-level onEvent eventHandler. The receive initiates a correlationSet on which the onEvent correlates with a synchronous operation, initializing the inputData with a element variable.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-Element-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Element-InitAsync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 3000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-Element-InitSync",
    "description": "A receive-reply pair followed by a wait and a process-level onEvent eventHandler. The receive initiates a correlationSet on which the onEvent correlates with a synchronous operation, initializing the inputData with a element variable.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-Element-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Element-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 3000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-InitSync",
    "description": "A receive-reply pair followed by a wait and a process-level onMessage eventHandler. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-Flow-InitAsync",
    "description": "An asynchronous receive followed by a wait and a process-level onEvent eventHandler. The receive initiates a correlationSet on which the onEvent correlates with a synchronous operation. The onEvent contains a assign linked to a reply in a flow.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-Flow-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Flow-InitAsync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 3000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-Flow-InitSync",
    "description": "A receive-reply pair followed by a wait and a process-level onEvent eventHandler. The receive initiates a correlationSet on which the onEvent correlates with a synchronous operation. The onEvent contains a assign linked to a reply in a flow.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-Flow-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Flow-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-MessageExchange-InitAsync",
    "description": "An asynchronous receive followed by a wait and a process-level onEvent eventHandler that uses messageExchange. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-MessageExchange-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-MessageExchange-InitAsync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 3000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-MessageExchange-InitSync",
    "description": "A receive-reply pair followed by a wait and a process-level onEvent eventHandler that uses messageExchange. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-MessageExchange-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-MessageExchange-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-Internal-MessageExchange-InitAsync",
    "description": "An asynchronous receive followed by a wait and a process-level onEvent eventHandler that uses messageExchange in a scope. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation. The messageExchange is defined in the associated scope.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-Internal-MessageExchange-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Internal-MessageExchange-InitAsync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 3000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-Internal-MessageExchange-InitSync",
    "description": "A receive-reply pair followed by a wait and a process-level onEvent eventHandler that uses messageExchange in a scope. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation. The messageExchange is defined in the associated scope.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-Internal-MessageExchange-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Internal-MessageExchange-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-FILO-MessageExchanges",
    "description": "A receive-reply pair marked with messageExchange followed by a wait and a process-level onEvent eventHandler that uses messageExchange with a reply. The receive initiates a correlationSet on which the onEvent correlates with a synchronous operation.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-FILO-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-FILO-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-FILO-MessageExchanges-Pick",
    "description": "A onMessage-reply pair marked with messageExchange followed by a wait and a process-level onEvent eventHandler that uses messageExchange with a reply. The onMessage initiates a correlationSet on which the onEvent correlates with a synchronous operation.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-FILO-MessageExchanges-Pick.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-FILO-MessageExchanges-Pick",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-Scope-MessageExchange-InitAsync",
    "description": "An asynchronous receive followed by a wait and a process-level onEvent eventHandler that uses messageExchange in a scope. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-Scope-MessageExchange-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Scope-MessageExchange-InitAsync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "delay": 3000,
          "type": "DelayTestStep"
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-Scope-MessageExchange-InitSync",
    "description": "A receive-reply pair followed by a wait and a process-level onEvent eventHandler that uses messageExchange in a scope. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-Scope-MessageExchange-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Scope-MessageExchange-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-OnAlarm-For",
    "description": "A receive-reply pair and a process-level onAlarm eventHandler. The receive is followed by a wait that pauses execution for five seconds. The eventHandler waits for two seconds and replies to the receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-OnAlarm-For.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-OnAlarm-For",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncResponse >= 2",
            "type": "XpathTestAssertion",
            "value": "true"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-OnAlarm-RepeatEvery",
    "description": "A receive-reply pair with an intermediate wait and a process-level onAlarm eventHandler. The eventHandler repeats execution every second and adds one to the final result. The intermediate wait pauses execution for 2.2 seconds, after which the current result is replied.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-OnAlarm-RepeatEvery.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-OnAlarm-RepeatEvery",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncResponse >= 1",
            "type": "XpathTestAssertion",
            "value": "true"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-OnAlarm-RepeatEvery-For",
    "description": "A receive-reply pair with an intermediate wait and a process-level onAlarm eventHandler. The eventHandler repeats execution every second and adds one to the final result. The repetition takes place after one second, so the handler should repeat exactly once. The intermediate wait pauses execution for 2.2 seconds, after which the current result is replied.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-OnAlarm-RepeatEvery-For.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-OnAlarm-RepeatEvery-For",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncResponse >= 2",
            "type": "XpathTestAssertion",
            "value": "true"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-OnAlarm-RepeatEvery-Until",
    "description": "A receive-reply pair with an intermediate wait and a process-level onAlarm eventHandler. The eventHandler repeats execution every second and adds one to the final result. The repetition takes place after a date in the past, so the handler should execute immediately. The intermediate wait pauses execution for 2.2 seconds, after which the current result is replied.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-OnAlarm-RepeatEvery-Until.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-OnAlarm-RepeatEvery-Until",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-OnAlarm-Until",
    "description": "A receive followed by a scope with an onAlarm eventHandler and a wait. The onAlarm waits until a date in the past and should therefore execute immediately. Its body contains the reply to the initial receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-OnAlarm-Until.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-OnAlarm-Until",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-EventHandlers-Parts",
    "description": "An asynchronous receive followed by a wait and a process-level onMessage eventHandler. The receive initiates a correlationSet on which the onMessage correlates with a synchronous operation. Furthermore, the onMessage uses the fromPart syntax.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-EventHandlers-Parts.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__EventHandlers__Scope-EventHandlers-Parts",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-FaultHandlers",
    "description": "A scope with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler by its faultName. Inside this faultHandler is the reply to the initial receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-FaultHandlers.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-FaultHandlers-OutboundLink",
    "description": "A scope in a flow with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler by its faultName.  Inside this faultHandler is a assign that is linked outbound to the reply to the initial receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-FaultHandlers-OutboundLink.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-OutboundLink",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-FaultHandlers-CatchAll",
    "description": "A scope with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level catchAll faultHandler. Inside this faultHandler is the reply to the initial receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-FaultHandlers-CatchAll.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-CatchAll",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "-6",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "-1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-FaultHandlers-CatchAll-Invoke",
    "description": "A receive followed by a scope with fault handlers and an invoke activity. The fault from the invoke activity from the partner service is caught by the scope-level catchAll faultHandler. Inside this faultHandler is the reply to the initial receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-FaultHandlers-CatchAll-Invoke.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-CatchAll-Invoke",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "-6",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "-1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-FaultHandlers-CatchAll-Invoke-Validate",
    "description": "A receive followed by a scope with fault handlers and an invoke as well as a validate activity. The fault from the invoke activity from the partner service is caught by the scope-level catchAll faultHandler. Inside this faultHandler is the reply to the initial receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-FaultHandlers-CatchAll-Invoke-Validate.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-CatchAll-Invoke-Validate",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-FaultHandlers-OutboundLink-CatchAll",
    "description": "A scope in a flow with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level catchAll faultHandler. Inside this faultHandler is a assign that is linked outbound to the reply to the initial receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-FaultHandlers-OutboundLink-CatchAll.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-OutboundLink-CatchAll",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Process-FaultHandlers-FaultElement",
    "description": "A process with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler that uses a faultVariable and faultElement configuration. Inside this faultHandler is the reply to the initial receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Process-FaultHandlers-FaultElement.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Process-FaultHandlers-FaultElement",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-FaultHandlers-FaultElement",
    "description": "A scope with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler that uses a faultVariable and faultElement configuration. Inside this faultHandler is the reply to the initial receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-FaultHandlers-FaultElement.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-FaultElement",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-FaultHandlers-FaultMessageType",
    "description": "A scope with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler that uses a faultVariable and faultMessageType configuration. Inside this faultHandler is the reply to the initial receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-FaultHandlers-FaultMessageType.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-FaultMessageType",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{"type": "ExitAssertion"}],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-ExitOnStandardFault",
    "description": "A scope with receive-reply pair and an intermediate throw. There is no faultHandler, but the exitOnStandardFault attribute of the scope is set to yes.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-ExitOnStandardFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Scope-Attributes__Scope-ExitOnStandardFault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "joinFailure",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-ExitOnStandardFault-JoinFailure",
    "description": "A scope with a receive-reply pair and an intermediate throw that throws a joinFailure. There is no faultHandler, but the exitOnStandardFault attribute of the scope is set to yes. However, the exitOnStandardFault sematics do not apply to joinFailures.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-ExitOnStandardFault-JoinFailure.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__Scope-Attributes__Scope-ExitOnStandardFault-JoinFailure",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Process-FaultHandlers-CatchOrder",
    "description": "A process with a receive followed by a intermediate throw. The scope is associated with mulitple faultHandlers. A specific one of these should catch the fault and only inside this faultHandler is the reply to the initial receive. The process is adapted from the example in Spec. 12.5.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Process-FaultHandlers-CatchOrder.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Process-FaultHandlers-CatchOrder",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-FaultHandlers-CatchOrder",
    "description": "A scope with a receive followed by a intermediate throw. The scope is associated with mulitple faultHandlers. A specific one of these should catch the fault and only inside this faultHandler is the reply to the initial receive. The process is adapted from the example in Spec. 12.5.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-FaultHandlers-CatchOrder.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-CatchOrder",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "0"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Scope-FaultHandlers-VariableData",
    "description": "A scope with a receive followed by a intermediate throw. The fault that is thrown is caught by the scope-level faultHandler that uses a faultVariable and faultMessage configuration. Inside this faultHandler is the reply to the initial receive and the data replied is the content of the faultVariable.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\scopes\\Scope-FaultHandlers-VariableData.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__scopes__FaultHandlers__Scope-FaultHandlers-VariableData",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Sequence",
    "description": "A receive-reply pair enclosed in a sequence.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Sequence.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Sequence__Sequence",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "While",
    "description": "A receive-reply pair with an intermediate while that loops for n times, where n is equal to the input.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\While.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__While__While",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "5"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "While-Flow",
    "description": "A receive-reply pair with an intermediate while that loops for n times, where n is equal to the input. The loop contains a flow that links the assignment of 1 to a counter and the assignment of the counter to the reply data.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\While-Flow.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__While__While-Flow",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "2",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "3"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "RepeatUntil",
    "description": "A receive-reply pair with an intermediate while that loops for n+1 times, where n is equal to the input.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\RepeatUntil.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__RepeatUntil__RepeatUntil",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "2",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "RepeatUntilEquality",
    "description": "A receive-reply pair with an intermediate while that loops for n times, where n is equal to the input.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\RepeatUntilEquality.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__RepeatUntil__RepeatUntilEquality",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "2",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "3"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "RepeatUntil-Flow",
    "description": "A receive-reply pair with an intermediate while that loops for n+1 times, where n is equal to the input. The loop contains a flow that links the assignment of 1 to a counter and the assignment of the counter to the reply data.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\RepeatUntil-Flow.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__RepeatUntil__RepeatUntil-Flow",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "7"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Flow",
    "description": "A receive-reply pair with an intermediate flow that contains two assigns.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Flow-Links",
    "description": "A receive-reply pair with an intermediate flow that contains two assigns which have a precedence relationship between each other using links.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-Links.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-Links",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Flow-BoundaryLinks",
    "description": "A receive-reply pair with an intermediate flow that contains an assign and a sequence with an assign, as well as a link pointing from the former to the later assign. That way the links crosses the boundary of a structured activity, the sequence.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-BoundaryLinks.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-BoundaryLinks",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "faultString": "joinFailure",
              "type": "SoapFaultTestAssertion"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "3",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "6"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "Flow-Links-JoinCondition",
    "description": "A receive-reply pair with an intermediate flow that contains three assigns, two of which point to the third using links. Both links have transitionConditions and their target a joinCondition defined upon them. A joinFailure should result, given not both of the links are activated.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-Links-JoinCondition.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-Links-JoinCondition",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "faultString": "joinFailure",
              "type": "SoapFaultTestAssertion"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "3",
            "concurrencyTest": false,
            "assertions": [{
              "faultString": "joinFailure",
              "type": "SoapFaultTestAssertion"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "Flow-Links-JoinFailure",
    "description": "A receive-reply pair with an intermediate flow that contains three assigns, two of which point to the third using links. Both links have transitionConditions and their target a joinCondition defined upon them. The transitionConditions do never evaluate to true, resulting in a joinFailure on each invocation.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-Links-JoinFailure.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-Links-JoinFailure",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "3"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "3",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "5"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "Flow-Links-SuppressJoinFailure",
    "description": "A receive-reply pair with an intermediate flow that contains three assigns, two of which point to the third using links. Both links have transitionConditions and their target a joinCondition defined upon them. The transitionConditions do never evaluate to true, resulting in a joinFailure on each invocation. However, this joinFailure is suppressed.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-Links-SuppressJoinFailure.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-Links-SuppressJoinFailure",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "4"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "3",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "6"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "Flow-Links-TransitionCondition",
    "description": "A receive-reply pair with an intermediate flow that contains three assigns, two of which point to the third using links. Both links have transitionConditions that do fire only if the input is greater than two.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-Links-TransitionCondition.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-Links-TransitionCondition",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessAsync",
            "oneWay": true
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessAsync",
            "oneWay": true
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessAsync",
            "oneWay": true
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessAsync",
            "oneWay": true
          }
        ]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessAsync",
            "oneWay": true
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessAsync",
            "oneWay": true
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessAsync",
            "oneWay": true
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessAsync",
            "oneWay": true
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "Flow-GraphExample",
    "description": "An implementation of the flow graph process defined in Sec. 11.6.4.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-GraphExample.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-GraphExample",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "5",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "6"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Flow-Links-ReceiveCreatingInstances",
    "description": "A flow with a starting activity (receive with createInstance set to yes) and a non-starting activity (assign), where a precedence relationship is defined using links.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-Links-ReceiveCreatingInstances.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-Links-ReceiveCreatingInstances",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "11"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "22"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "Flow-Two-Starting-OnMessage-Correlation",
    "description": "A flow that contains two pick activities that can both be start activity and reply 0 or '0'. After the flow a simple synchronous receive-reply pair responses the concatenation of the two starting message inputParts.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-Two-Starting-OnMessage-Correlation.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-Two-Starting-OnMessage-Correlation",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "11"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "22"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "Flow-Starting-Receive-OnMessage-Correlation",
    "description": "A flow that contains a receive-reply pair in a sequence, replying 0, and a pick activity that replies '0'. Both message activities can be start activity. After the flow a simple synchronous receive-reply pair responses the concatenation of the two starting message inputParts.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-Starting-Receive-OnMessage-Correlation.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-Starting-Receive-OnMessage-Correlation",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "11"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "22"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "Flow-Two-Starting-Receive-Correlation",
    "description": "A flow that contains two receive-reply pair in a sequence that can both be start activity and reply 0 or '0'. After the flow a simple synchronous receive-reply pair responses the concatenation of the two starting message inputParts.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Flow-Two-Starting-Receive-Correlation.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Flow__Flow-Two-Starting-Receive-Correlation",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Not-If-Case-1",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "If-Case-2",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "If",
    "description": "A receive-reply pair with an intermediate if that checks whether the input is even.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\If.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__If__If",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Else-Case-1",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "If-Case-2",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "If-Else",
    "description": "A receive-reply pair with an intermediate if-else that checks whether the input is even.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\If-Else.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__If__If-Else",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Not-If-Or-ElseIf-Case-1",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "If-Case-2",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 3,
        "name": "ElseIf-Case-3",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "3",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "2"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "If-ElseIf",
    "description": "A receive-reply pair with an intermediate if-elseif that checks whether the input is even or divisible by three.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\If-ElseIf.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__If__If-ElseIf",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Else-Case-1",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "If-Case-2",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 3,
        "name": "ElseIf-Case-3",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "3",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "2"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "If-ElseIf-Else",
    "description": "A receive-reply pair with an intermediate if-elseif-else that checks whether the input is even or divisible by three.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\If-ElseIf-Else.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__If__If-ElseIf-Else",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "SubLanguageExecutionFault-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "subLanguageExecutionFault",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "If-SubLanguageExecutionFault",
    "description": "A receive-reply pair with an intermediate if that should throw an subLanguageExecutionFault because of an invalid condition.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\If-SubLanguageExecutionFault.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__If__If-SubLanguageExecutionFault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "SubLanguageExecutionFault-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "subLanguageExecutionFault",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "If-SubLanguageExecutionFault-EmptyCondition",
    "description": "A receive-reply pair with an intermediate if that should throw an subLanguageExecutionFault because of an empty condition.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\If-SubLanguageExecutionFault-EmptyCondition.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__If__If-SubLanguageExecutionFault-EmptyCondition",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "0-equals-0-1",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "0",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "0plus1-equals-0-2",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 3,
        "name": "0plus1plus2-equals-3-3",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "3"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "ForEach",
    "description": "A receive-reply pair with an intermediate forEach that loops for n times, where n is equal to the input. Each iteration the current loop number is added to the final result.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "0",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "2"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "6"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "ForEach-Read-Counter",
    "description": "A receive-reply pair with an intermediate forEach that loops for n times, where n is equal to the input. Each iteration the current loop number is added twice to the final result.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-Read-Counter.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-Read-Counter",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "0",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "6",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "9"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "ForEach-Write-Counter",
    "description": "A receive-reply pair with an intermediate forEach that loops for n times, where n is equal to the input. The loop contains an if activity, so each odd iteration of the current loop number is added to the final result, when it also has a successor in range.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-Write-Counter.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-Write-Counter",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "0-equals-0-1",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "0",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "0"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "0plus1-equals-0-2",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 3,
        "name": "0plus1plus2-equals-3-3",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "3"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "ForEach-Flow",
    "description": "A receive-reply pair with an intermediate forEach that loops for n times, where n is equal to the input. Each iteration the current loop number is added to a intermediary and from there to the final result, and these assigns are linked within a flow.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-Flow.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-Flow",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "NegativeStopCounter-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "invalidExpressionValue",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ForEach-NegativeStopCounter",
    "description": "A receive-reply pair with an intermediate forEach that should always fail with an invalidExpressionValue fault as finalCounterValue is negative.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-NegativeStopCounter.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-NegativeStopCounter",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Skipping the third iteration-1",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Cannot meet completion condition-2",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "0",
            "concurrencyTest": false,
            "assertions": [{
              "faultString": "invalidBranchCondition",
              "type": "SoapFaultTestAssertion"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "ForEach-CompletionCondition",
    "description": "A receive-reply pair with an intermediate forEach that should terminate given two of its children have terminated. N+1 children are scheduled for execution, where n is equal to the input. If N+1 is less than two, an invalidBranchConditionFault should be thrown.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-CompletionCondition.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-CompletionCondition",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Skipping the third iteration-1",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Cannot meet completion condition-2",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "0",
            "concurrencyTest": false,
            "assertions": [{
              "faultString": "invalidBranchCondition",
              "type": "SoapFaultTestAssertion"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "ForEach-CompletionCondition-Parallel",
    "description": "A receive-reply pair with an intermediate forEach that should terminate given two of its children have terminated. N+1 children are scheduled for execution in parallel, where n is equal to the input. If N+1 is less than two, an invalidBranchConditionFault should be thrown.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-CompletionCondition-Parallel.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-CompletionCondition-Parallel",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "5",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "6"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "10",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "6"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "ForEach-CompletionCondition-SuccessfulBranchesOnly",
    "description": "A receive-reply pair with an intermediate forEach that should terminate given two of its children have terminated successfully. Each child throws a fault, given the current counter value is even. N children are scheduled for execution, where n is equal to the input.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-CompletionCondition-SuccessfulBranchesOnly.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-CompletionCondition-SuccessfulBranchesOnly",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Expect completionConditionFailure-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "completionConditionFailure",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ForEach-CompletionConditionFailure",
    "description": "A receive-reply pair with an intermediate forEach that should terminate given two of its children have terminated. N+1 children are scheduled for execution in parallel, where n is equal to the input. If N+1 is less than two, an invalidBranchConditionFault should be thrown. This is a seperate test case that tests only for the failure.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-CompletionConditionFailure.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-CompletionConditionFailure",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "0plus1plus2-equals-3-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "2",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "3"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ForEach-Parallel",
    "description": "A receive-reply pair with an intermediate forEach that executes its children in parallel.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-Parallel.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-Parallel",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "0plus1plus2-equals-3-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": true,
          "input": "103",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "2",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "3"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": true,
          "input": "101",
          "concurrencyTest": true,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
            "type": "XpathTestAssertion",
            "value": "true"
          }],
          "type": "SoapTestStep",
          "oneWay": false
        },
        {
          "testPartner": true,
          "input": "102",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "3"
          }],
          "type": "SoapTestStep",
          "oneWay": false
        }
      ]
    }],
    "name": "ForEach-Parallel-Invoke",
    "description": "A receive-reply pair with an intermediate forEach that executes its children in parallel.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-Parallel-Invoke.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-Parallel-Invoke",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Iterate-Twice-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "2",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "invalidExpressionValue",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ForEach-NegativeStartCounter",
    "description": "A receive-reply pair with an intermediate forEach that should always fail with an invalidExpressionValue fault as startCounterValue is negative.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-NegativeStartCounter.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-NegativeStartCounter",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Iterate-Twice-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "2",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "invalidExpressionValue",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ForEach-TooLargeStartCounter",
    "description": "A receive-reply pair with an intermediate forEach that should always fail with an invalidExpressionValue fault as startCounterValue is initialized with a value that exceeds xs:unsignedInt.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-TooLargeStartCounter.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-TooLargeStartCounter",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Iterate-Twice-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "2",
          "concurrencyTest": false,
          "assertions": [{
            "faultString": "invalidExpressionValue",
            "type": "SoapFaultTestAssertion"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "ForEach-CompletionCondition-NegativeBranches",
    "description": "A receive-reply pair with an intermediate forEach that should always fail with an invalidExpressionValue fault as branches is initialized with a negative value.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\ForEach-CompletionCondition-NegativeBranches.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__ForEach__ForEach-CompletionCondition-NegativeBranches",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessAsync",
          "oneWay": true
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-Correlations-InitAsync",
    "description": "An asynchronous receive that initiates a correlationSet, followed by a pick with a synchronous onMessage that correlates on this set.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-Correlations-InitAsync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-Correlations-InitAsync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-Correlations-InitSync",
    "description": "A receive-reply pair that initiates a correlationSet, followed by a pick with a synchronous onMessage that correlates on this set.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-Correlations-InitSync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-Correlations-InitSync",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-CreateInstance",
    "description": "A pick with a synchronous onMessage that has createInstance set to yes.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-CreateInstance.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-CreateInstance",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-MessageExchange",
    "description": "A pick with a synchronous onMessage that has createInstance set to yes and uses messageExchange.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-MessageExchange.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-MessageExchange",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-MessageExchange-Scope",
    "description": "A pick with a synchronous onMessage that has createInstance set to yes and uses messageExchange in a scope.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-MessageExchange-Scope.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-MessageExchange-Scope",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-Multiple-MessageExchanges",
    "description": "A pick with a synchronous onMessage that has createInstance set to yes and a second pick with a synchronous onMessage of the same type and both use messageExchanges to define which reply belongs to which onMessage and the response is the initial value first then the sum of the received values.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-Multiple-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-Multiple-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-Multiple-MessageExchanges-Scope",
    "description": "A pick with a synchronous onMessage that has createInstance set to yes and a second pick with a synchronous onMessage of the same type and both use messageExchanges in a scope to define which reply belongs to which onMessage and the response is the initial value first then the sum of the received values.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-Multiple-MessageExchanges-Scope.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-Multiple-MessageExchanges-Scope",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-FIFO-MessageExchanges",
    "description": "Two onMessages of the same operation that use messageExchanges to define which reply belongs to which onMessage and the response is 1 for the reply to the first onMessage and 2 for the second reply to the second onMessage.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-FIFO-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-FIFO-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-FILO-MessageExchanges",
    "description": "Two onMessages of the same operation that use messageExchanges to define which reply belongs to which onMessage and the response is 2 for the reply to the second onMessage and 1 for the second reply to the first onMessage.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-FILO-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-FILO-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Receive-Pick-FIFO-MessageExchanges",
    "description": "A receive and a onMessage of the same operation that use messageExchanges to define which reply belongs to which receive/onMessage and the response is 1 for the reply to the onMessage and 2 for the second reply to the receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Receive-Pick-FIFO-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Receive-Pick-FIFO-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Receive-Pick-FILO-MessageExchanges",
    "description": "A receive and a onMessage of the same operation that use messageExchanges to define which reply belongs to which receive/onMessage and the response is 2 for the reply to the onMessage and 1 for the second reply to the receive.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Receive-Pick-FILO-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Receive-Pick-FILO-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-Receive-FIFO-MessageExchanges",
    "description": "A onMessage and a receive of the same operation that use messageExchanges to define which reply belongs to which onMessage/receive and the response is 1 for the reply to the receive and 2 for the second reply to the onMessage.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-Receive-FIFO-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-Receive-FIFO-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "2"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-Receive-FILO-MessageExchanges",
    "description": "A onMessage and a receive of the same operation that use messageExchanges to define which reply belongs to which onMessage/receive and the response is 2 for the reply to the receive and 1 for the second reply to the onMessage.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-Receive-FILO-MessageExchanges.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-Receive-FILO-MessageExchanges",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-CreateInstance-FromParts",
    "description": "A pick with a synchronous onMessage that has createInstance set to yes using fromParts.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-CreateInstance-FromParts.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-CreateInstance-FromParts",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "-1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-OnAlarm-For",
    "description": "An onAlarm with for test case. The test contains a receive-reply pair that initiates a correlationSet and an intermediate pick that contains an onMessage and an onAlarm with an for element. The onAlarm should fire after two seconds and the process should reply with a default value.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-OnAlarm-For.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-OnAlarm-For",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "-1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        }
      ]
    }],
    "name": "Pick-OnAlarm-Until",
    "description": "A receive-reply pair that initiates a correlationSet and an intermediate pick that contains an onMessage and an onAlarm with an until element. The onAlarm should fire immediately.",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\structured\\Pick-OnAlarm-Until.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Conformance__BPEL__structured__Pick__Pick-OnAlarm-Until",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
            "type": "XpathTestAssertion",
            "value": "1AB"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSyncString",
          "oneWay": false
        }
      ]
    }],
    "name": "WCP01-Sequence",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP01-Sequence.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP01_Sequence__WCP01-Sequence",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
            "type": "XpathTestAssertion",
            "value": "1AB"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSyncString",
          "oneWay": false
        }
      ]
    }],
    "name": "WCP02-ParallelSplit",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP02-ParallelSplit.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP02_ParallelSplit__WCP02-ParallelSplit",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
            "type": "XpathTestAssertion",
            "value": "1AB"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSyncString",
          "oneWay": false
        }
      ]
    }],
    "name": "WCP03-Synchronization",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP03-Synchronization.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP03_Synchronization__WCP03-Synchronization",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "1A"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "11",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "11B"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP04-ExclusiveChoice",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP04-ExclusiveChoice.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP04_ExclusiveChoice__WCP04-ExclusiveChoice",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "1A"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "11",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "11B"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP05-SimpleMerge",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP05-SimpleMerge.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP05_SimpleMerge__WCP05-SimpleMerge",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "AYZ"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "ABZ"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "3",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "ABC"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP06-MultiChoice",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP06-MultiChoice.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP06_MultiChoice__WCP06-MultiChoice",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "AYZ"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "ABZ"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "3",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "ABC"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP06-MultiChoice-Partial",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP06-MultiChoice-Partial.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP06_MultiChoice__WCP06-MultiChoice-Partial",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "AYZ"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "ABZ"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "3",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "ABC"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP07-SynchronizingMerge",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP07-SynchronizingMerge.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP07_SynchronizingMerge__WCP07-SynchronizingMerge",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "AYZ"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "ABZ"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "3",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "ABC"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP07-SynchronizingMerge-Partial",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP07-SynchronizingMerge-Partial.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP07_SynchronizingMerge__WCP07-SynchronizingMerge-Partial",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
            "type": "XpathTestAssertion",
            "value": "1"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSyncString",
          "oneWay": false
        }
      ]
    }],
    "name": "WCP11-ImplicitTermination",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP11-ImplicitTermination.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP11_ImplicitTermination__WCP11-ImplicitTermination",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP16-DeferredChoice",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP16-DeferredChoice.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP16_DeferredChoice__WCP16-DeferredChoice",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": true,
            "input": "103",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "101",
            "concurrencyTest": true,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
              "type": "XpathTestAssertion",
              "value": "true"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "102",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "2"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": true,
            "input": "103",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "101",
            "concurrencyTest": true,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
              "type": "XpathTestAssertion",
              "value": "true"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "102",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "3"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP12-MultipleInstancesWithoutSynchronization",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP12-MultipleInstancesWithoutSynchronization.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": true,
          "input": "103",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "100",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": true,
          "input": "101",
          "concurrencyTest": true,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
            "type": "XpathTestAssertion",
            "value": "true"
          }],
          "type": "SoapTestStep",
          "oneWay": false
        },
        {
          "testPartner": true,
          "input": "102",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "4"
          }],
          "type": "SoapTestStep",
          "oneWay": false
        }
      ]
    }],
    "name": "WCP12-MultipleInstancesWithoutSynchronization-Partial",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP12-MultipleInstancesWithoutSynchronization-Partial.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization-Partial",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": true,
            "input": "103",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "101",
            "concurrencyTest": true,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
              "type": "XpathTestAssertion",
              "value": "true"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "102",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "2"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": true,
            "input": "103",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "101",
            "concurrencyTest": true,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
              "type": "XpathTestAssertion",
              "value": "true"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "102",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "3"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP12-MultipleInstancesWithoutSynchronization-Sync",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP12-MultipleInstancesWithoutSynchronization-Sync.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization-Sync",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": true,
          "input": "103",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "100",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": true,
          "input": "101",
          "concurrencyTest": true,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
            "type": "XpathTestAssertion",
            "value": "true"
          }],
          "type": "SoapTestStep",
          "oneWay": false
        },
        {
          "testPartner": true,
          "input": "102",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "4"
          }],
          "type": "SoapTestStep",
          "oneWay": false
        }
      ]
    }],
    "name": "WCP12-MultipleInstancesWithoutSynchronization-Sync-Partial",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP12-MultipleInstancesWithoutSynchronization-Sync-Partial.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization-Sync-Partial",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "2"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP12-MultipleInstancesWithoutSynchronization-While-Partial",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP12-MultipleInstancesWithoutSynchronization-While-Partial.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization-While-Partial",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "2"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP12-MultipleInstancesWithoutSynchronization-While-Sync-Partial",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP12-MultipleInstancesWithoutSynchronization-While-Sync-Partial.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12-MultipleInstancesWithoutSynchronization-While-Sync-Partial",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": true,
            "input": "103",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "101",
            "concurrencyTest": true,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
              "type": "XpathTestAssertion",
              "value": "true"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "102",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "4"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": true,
            "input": "103",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "101",
            "concurrencyTest": true,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
              "type": "XpathTestAssertion",
              "value": "true"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "102",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "4"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge__WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": true,
          "input": "103",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "oneWay": false
        },
        {
          "testPartner": false,
          "input": "100",
          "concurrencyTest": false,
          "assertions": [],
          "type": "SoapTestStep",
          "operation": "startProcessSync",
          "oneWay": false
        },
        {
          "testPartner": true,
          "input": "101",
          "concurrencyTest": true,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
            "type": "XpathTestAssertion",
            "value": "true"
          }],
          "type": "SoapTestStep",
          "oneWay": false
        },
        {
          "testPartner": true,
          "input": "102",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
            "type": "XpathTestAssertion",
            "value": "4"
          }],
          "type": "SoapTestStep",
          "oneWay": false
        }
      ]
    }],
    "name": "WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge-Partial",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge-Partial.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge__WCP13-MultipleInstancesWithAPrioriDesignTimeKnowledge-Partial",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": true,
            "input": "103",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "101",
            "concurrencyTest": true,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
              "type": "XpathTestAssertion",
              "value": "true"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "102",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "2"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": true,
            "input": "103",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "2",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "101",
            "concurrencyTest": true,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';//test:testElementSyncResponse > 0",
              "type": "XpathTestAssertion",
              "value": "true"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          },
          {
            "testPartner": true,
            "input": "102",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testpartner';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "3"
            }],
            "type": "SoapTestStep",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP14-MultipleInstancesWithAPrioriRuntimeKnowledge",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP14-MultipleInstancesWithAPrioriRuntimeKnowledge.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl",
      "src\\main\\tests\\files\\bpel\\TestPartner.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge__WCP14-MultipleInstancesWithAPrioriRuntimeKnowledge",
    "testPartners": [{
      "external": false,
      "interfaceDescription": "TestPartner.wsdl",
      "publishedUrl": "http://localhost:2000/bpel-testpartner",
      "rules": [
        {
          "input": {"type": "any"},
          "operation": "startProcessAsync"
        },
        {
          "input": {"type": "any"},
          "operation": "startProcessWithEmptyMessage"
        },
        {
          "output": {
            "type": "fault",
            "value": "UNDECLARED"
          },
          "input": {
            "type": "integer",
            "value": -5
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "fault",
            "value": "DECLARED"
          },
          "input": {
            "type": "integer",
            "value": -6
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.access()"
          },
          "input": {
            "type": "integer",
            "value": 100
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfConcurrentCalls()"
          },
          "input": {
            "type": "integer",
            "value": 101
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.getNumberOfCalls()"
          },
          "input": {
            "type": "integer",
            "value": 102
          },
          "operation": "startProcessSync"
        },
        {
          "output": {
            "type": "script",
            "value": "ConcurrencyDetector.reset()"
          },
          "input": {
            "type": "integer",
            "value": 103
          },
          "operation": "startProcessSync"
        },
        {
          "output": {"type": "echo"},
          "input": {"type": "any"},
          "operation": "startProcessSync"
        }
      ],
      "type": "WSDL",
      "wsdlUrl": "http://localhost:2000/bpel-testpartner?wsdl"
    }]
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "1A"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "0",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "0B"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP19-CancelActivity",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP19-CancelActivity.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP19_CancelActivity__WCP19-CancelActivity",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "0",
            "concurrencyTest": false,
            "assertions": [{"type": "ExitAssertion"}],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP20-CancelCase",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP20-CancelCase.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP20_CancelCase__WCP20-CancelCase",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "PickAsyncMessage-1",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [],
            "type": "SoapTestStep",
            "operation": "startProcessAsync",
            "oneWay": true
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "8"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      },
      {
        "number": 2,
        "name": "Pick3sTimeout-2",
        "testSteps": [
          {"assertions": [{"type": "DeployableAssertion"}]},
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';number(//test:testElementSyncResponse) cast as xs:integer",
              "type": "XpathTestAssertion",
              "value": "1"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSync",
            "oneWay": false
          },
          {
            "delay": 4000,
            "type": "DelayTestStep"
          },
          {
            "testPartner": false,
            "input": "1",
            "concurrencyTest": false,
            "assertions": [{
              "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
              "type": "XpathTestAssertion",
              "value": "9"
            }],
            "type": "SoapTestStep",
            "operation": "startProcessSyncString",
            "oneWay": false
          }
        ]
      }
    ],
    "name": "WCP18-Milestone",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP18-Milestone.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP18_Milestone__WCP18-Milestone",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [
        {"assertions": [{"type": "DeployableAssertion"}]},
        {
          "testPartner": false,
          "input": "1",
          "concurrencyTest": false,
          "assertions": [{
            "xpathExpression": "declare namespace test='http://dsg.wiai.uniba.de/betsy/activities/wsdl/testinterface';//test:testElementSyncStringResponse",
            "type": "XpathTestAssertion",
            "value": "AW1ABW2B"
          }],
          "type": "SoapTestStep",
          "operation": "startProcessSyncString",
          "oneWay": false
        }
      ]
    }],
    "name": "WCP17-InterleavedParallelRouting",
    "description": "",
    "language": "BPEL",
    "engineIndependentFiles": [
      "src\\main\\tests\\files\\bpel\\cfpatterns\\WCP17-InterleavedParallelRouting.bpel",
      "src\\main\\tests\\files\\bpel\\TestInterface.wsdl"
    ],
    "featureID": "Expressiveness__BPEL__cfpatterns__WCP17_InterleavedParallelRouting__WCP17-InterleavedParallelRouting",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "ERROR_runtime",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "ExclusiveGateway",
    "description": "A process with four scriptTasks and exclusiveGateways. The execution of two of the tasks is controlled by the exclusiveGateways and only one of the tasks is actually executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\ExclusiveGateway.bpmn"],
    "featureID": "Conformance__BPMN__gateways__ExclusiveGateway__ExclusiveGateway",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "ExclusiveGateway_Default",
    "description": "A process with five scriptTasks and exclusiveGateways. The execution of three of the tasks is controlled by the exclusiveGateways based on the input and only one of the tasks is actually executed. Two tasks are triggered through sequenceFlows with conditionExpressions and one is triggered through a sequenceFlow which is marked as default.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\ExclusiveGateway_Default.bpmn"],
    "featureID": "Conformance__BPMN__gateways__ExclusiveGateway__ExclusiveGateway_Default",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task5",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task5",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task5",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "ExclusiveGatewayMixed",
    "description": "A process with six scriptTasks and three exclusiveGateways. One of the gateways acts as a mixed gateway. Each pair of exclusiveGateways encapsulates two script tasks. The enabling of these scriptTasks depends on input data",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\ExclusiveGatewayMixed.bpmn"],
    "featureID": "Conformance__BPMN__gateways__ExclusiveGateway__ExclusiveGatewayMixed",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "ExclusiveDiverging_InclusiveConverging",
    "description": "A process with four scriptTasks, a diverging exclusiveGateway and a converging inclusiveGateway. Two of the tasks are enclosed between the gateways and only one of them is triggered depending on input data. The inclusiveGateway should merge the incoming branches.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\ExclusiveDiverging_InclusiveConverging.bpmn"],
    "featureID": "Conformance__BPMN__gateways__MixedGatewayCombinations__ExclusiveDiverging_InclusiveConverging",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "ERROR_runtime",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "InclusiveGateway",
    "description": "A process with four scriptTasks, two of which are encapsulated by inclusiveGateways. Either one, none, or both of the scriptTasks are enabled based on input data.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\InclusiveGateway.bpmn"],
    "featureID": "Conformance__BPMN__gateways__InclusiveGateway__InclusiveGateway",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "test",
            "type": "String",
            "value": "c"
          },
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task4",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "InclusiveGateway_Default",
    "description": "A process with five scriptTasks, three of which are encapsulated by inclusiveGateways. One of the scriptTasks acts as a default task. Either one, both of the others or the default task are executed based on input data.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\InclusiveGateway_Default.bpmn"],
    "featureID": "Conformance__BPMN__gateways__InclusiveGateway__InclusiveGateway_Default",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "InclusiveDiverging_ExclusiveConverging",
    "description": "A process with four scriptTasks, a diverging inclusiveGateway and a converging exclusiveGateway. Two of the tasks are encapsulated by the gateways. Either one, none, or both of the scriptTasks are enabled based on input data and as a result the exclusiveGateway should either fire once or twice.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\InclusiveDiverging_ExclusiveConverging.bpmn"],
    "featureID": "Conformance__BPMN__gateways__MixedGatewayCombinations__InclusiveDiverging_ExclusiveConverging",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "ParallelGateway",
    "description": "A process with four scriptTasks and two parallelGateways. Two of the scriptTasks are surrounded by the parallelGateways.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\ParallelGateway.bpmn"],
    "featureID": "Conformance__BPMN__gateways__ParallelGateway__ParallelGateway",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "ParallelDiverging_ExclusiveConverging",
    "description": "A process with four tasks, a diverging parallelGateway and a converging exclusiveGateway. Two of the tasks are executed in parallel and then merged by the exclusiveGateway. As a result, the task following the exclusiveGateway should be followed twice.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\ParallelDiverging_ExclusiveConverging.bpmn"],
    "featureID": "Conformance__BPMN__gateways__MixedGatewayCombinations__ParallelDiverging_ExclusiveConverging",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "ParallelDiverging_InclusiveConverging",
    "description": "A process with four tasks, a diverging parallelGateway and a converging inclusiveGateway. Two of the tasks are executed in parallel and merged by the inclusiveGateway.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\ParallelDiverging_InclusiveConverging.bpmn"],
    "featureID": "Conformance__BPMN__gateways__MixedGatewayCombinations__ParallelDiverging_InclusiveConverging",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 22000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "EXECUTION_parallel",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "ParallelGateway_TrueParallelism",
    "description": "A process with two scriptTasks between a diverging and a converging parallelGateway. The scriptTasks wait for some time, so their execution time intervals are expected to overlap.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\ParallelGateway_TrueParallelism.bpmn"],
    "featureID": "Conformance__BPMN__gateways__ParallelGateway__ParallelGateway_TrueParallelism",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "ComplexGateway",
    "description": "A process with five scriptTasks and two complexGateways. Three of the tasks are enclosed by the complexGateways and each one is enabled based on input data. The activationCondition of the converging complexGate is set to 'activationCount >= 1', so the gateway should fire for any number of activated incoming branches.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\ComplexGateway.bpmn"],
    "featureID": "Conformance__BPMN__gateways__ComplexGateway__ComplexGateway",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 10000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task4",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "EventBasedGateway_Signals",
    "description": "A process with five scriptTasks, a diverging parallelGateway, a diverging eventBasedGateway, an intermediate signal throw event and two intermediate signal catch events. The parallelGateway points to the eventBasedGateway in one branch and, in the other branch, throws the signal. This signal is caught by one of the branches following the eventBasedGateway.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\EventBasedGateway_Signals.bpmn"],
    "featureID": "Conformance__BPMN__gateways__EventBasedGateway__EventBasedGateway_Signals",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 5000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task2",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "EventBasedGateway_Timer",
    "description": "A process with three scriptTasks, a diverging eventBasedGateway and two intermediate catch events. One of the catch events refers to a signal that is never thrown and the other one to a timer. Only the branch of the timer should ever be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\gateways\\EventBasedGateway_Timer.bpmn"],
    "featureID": "Conformance__BPMN__gateways__EventBasedGateway__EventBasedGateway_Timer",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "MARKER_exists",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "CallActivity_Process",
    "description": "A collaboration with two participants. One process calls the other one through a callActivity. The second process creates a file MARKER which must be present to pass the test.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\CallActivity_Process.bpmn"],
    "featureID": "Conformance__BPMN__activities__CallActivity__CallActivity_Process",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "CallActivity_GlobalTask",
    "description": "Definitions contains a GlobalScriptTask which is called by a CallActivity.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\CallActivity_GlobalTask.bpmn"],
    "featureID": "Conformance__BPMN__activities__CallActivity__CallActivity_GlobalTask",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "MultiInstance_SubProcess",
    "description": "A subProcess that defines multiInstanceLoopCharactestics with sequential behavior should be executed three times. Within the subProcess 'task1' is logged.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\MultiInstance_SubProcess.bpmn"],
    "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_SubProcess",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "MultiInstance_Task",
    "description": "A scriptTask that is marked as a multiInstance task and is enabled three times",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\MultiInstance_Task.bpmn"],
    "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_Task",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "MultiInstance_Sequential",
    "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled three times",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\MultiInstance_Sequential.bpmn"],
    "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_Sequential",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "MultiInstance_NoneBehavior",
    "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled three times and its behavior set to 'none'. The task has a signal boundary event attached that points to another script task. The event should be thrown for every task execution",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\MultiInstance_NoneBehavior.bpmn"],
    "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_NoneBehavior",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "MultiInstance_OneBehavior",
    "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled three times and its behavior set to 'one'. The task has a signal boundary event attached that points to another script task. The event should be thrown once.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\MultiInstance_OneBehavior.bpmn"],
    "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_OneBehavior",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "MultiInstance_AllBehavior",
    "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled three times and its behavior set to 'all'. The task has a signal boundary event attached that points to another script task. The event should never be thrown.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\MultiInstance_AllBehavior.bpmn"],
    "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_AllBehavior",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "MultiInstance_ComplexBehavior",
    "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled three times and its behavior set to 'complex'. The task has a signal boundary event attached that points to another script task which is triggered upon completion of the first instance. All remaining instances are canceled.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\MultiInstance_ComplexBehavior.bpmn"],
    "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_ComplexBehavior",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "MultiInstance_Parallel",
    "description": "A scriptTask that is marked as a parallel multiInstance task and is enabled three times.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\MultiInstance_Parallel.bpmn"],
    "featureID": "Conformance__BPMN__activities__MultiInstanceTask__MultiInstance_Parallel",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 3
            }
          ],
          "assertions": [
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 1
            }
          ],
          "assertions": [
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "Loop_SubProcess",
    "description": "A subProcess with standardLoopCharacteristics which should be looped as long as 'integerVariable' is less than 3. Each time the subProcess is executed a scripttask logs 'INCREMENT'. The default for the attribute 'testBefore' is used, which is 'false', i.e., the loopCondition is evaluated after the execution (do-while semantics). After the looped task 'task2' is executed once.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Loop_SubProcess.bpmn"],
    "featureID": "Conformance__BPMN__activities__LoopTask__Loop_SubProcess",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 3
            }
          ],
          "assertions": [
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 1
            }
          ],
          "assertions": [
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "Loop_Task",
    "description": "A scriptTask with standardLoopCharacteristics which should be looped as long as 'integerVariable' is less than 3.Each time the task is executed 'INCREMENT' is logged. The default for the attribute 'testBefore' is used, which is 'false', i.e., the loopCondition is evaluated after the execution (do-while semantics). After the looped task 'task2' is executed once.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Loop_Task.bpmn"],
    "featureID": "Conformance__BPMN__activities__LoopTask__Loop_Task",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 3
            }
          ],
          "assertions": [
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 1
            }
          ],
          "assertions": [
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "INCREMENT",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "Loop_ConditionOnly",
    "description": "A scriptTask with standardLoopCharacteristics which should be looped as long as 'integerVariable' is less than 3. Each time the task is executed 'INCREMENT' is logged. The default for the attribute 'testBefore' is used, which is 'false', i.e., the loopCondition is evaluated after the execution (do-while semantics). After the looped task 'task2' is executed once.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Loop_ConditionOnly.bpmn"],
    "featureID": "Conformance__BPMN__activities__LoopTask__Loop_ConditionOnly",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Loop_Maximum",
    "description": "A scriptTask with standardLoopCharacteristics and a condition that always evaluates to true. Additionally a loopMaximum is set to three.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Loop_Maximum.bpmn"],
    "featureID": "Conformance__BPMN__activities__LoopTask__Loop_Maximum",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Loop_NoIteration_TestBeforeFalse",
    "description": "A scriptTask with standardLoopCharacteristics and a condition that always evaluates to false, but has testBefore set to false and, hence, should be executed once.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Loop_NoIteration_TestBeforeFalse.bpmn"],
    "featureID": "Conformance__BPMN__activities__LoopTask__Loop_NoIteration_TestBeforeFalse",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task2",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Loop_NoIteration_TestBeforeTrue",
    "description": "A scriptTask with standardLoopCharacteristics and a condition that always evaluates to false and has testBefore set to true. Hence, the task should never be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Loop_NoIteration_TestBeforeTrue.bpmn"],
    "featureID": "Conformance__BPMN__activities__LoopTask__Loop_NoIteration_TestBeforeTrue",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "SubProcess",
    "description": "A process that contains a subProcess",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\SubProcess.bpmn"],
    "featureID": "Conformance__BPMN__activities__SubProcess__SubProcess",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Transaction",
    "description": "A process that contains a transaction",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Transaction.bpmn"],
    "featureID": "Conformance__BPMN__activities__Transaction__Transaction",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "AdHocSubProcess_Sequential",
    "description": "A process that contains an adHocSubProcess, which executes two contained tasks sequentially",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\AdHocSubProcess_Sequential.bpmn"],
    "featureID": "Conformance__BPMN__activities__AdHocSubProcess__AdHocSubProcess_Sequential",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "AdHocSubProcess_Parallel",
    "description": "A process that contains an adHocSubProcess, which executes two contained tasks in parallel",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\AdHocSubProcess_Parallel.bpmn"],
    "featureID": "Conformance__BPMN__activities__AdHocSubProcess__AdHocSubProcess_Parallel",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Token_Cardinality_Explicit",
    "description": "A process that contains one scriptTask with completionQuantity=2, one scriptTask with startQuantity=2, and one scriptTask in between with both set to 1. The scriptTask in between must therefore be executed twice.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Token_Cardinality_Explicit.bpmn"],
    "featureID": "Conformance__BPMN__activities__TokenCardinality__Token_Cardinality_Explicit",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Token_Cardinality_Default",
    "description": "A process that builds upon TOKEN_CARDINALITY_EXPLICIT, only deferring in leaving the startQuantity and completionQuantity attributes of the middle scriptTasks at their default values, i.e. 1 for both of them. Thus, this process must behave exactly like TOKEN_CARDINALITY_EXPLICIT.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Token_Cardinality_Default.bpmn"],
    "featureID": "Conformance__BPMN__activities__TokenCardinality__Token_Cardinality_Default",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task4",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task4",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Token_Cardinality_Split_Default",
    "description": "A process that contains one scriptTask which has two outgoing sequence flows, each leading to one of two forwarding scriptTasks. It is expected that each forward task is executed once and therefore the last and receiving scriptTask is executed twice.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Token_Cardinality_Split_Default.bpmn"],
    "featureID": "Conformance__BPMN__activities__TokenCardinality__Token_Cardinality_Split_Default",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task4",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Token_Cardinality_Split_Explicit",
    "description": "A process that contains one scriptTask which has two outgoing sequence flows, each leading to one of two forwarding scriptTasks. It is expected that each forward task is executed once and therefore the last and receiving scriptTask is executed once because of startingQuantity.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\Token_Cardinality_Split_Explicit.bpmn"],
    "featureID": "Conformance__BPMN__activities__TokenCardinality__Token_Cardinality_Split_Explicit",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "MARKER_exists",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "SendTask",
    "description": "A test with two processes, which start in parallel. The first one sends a message to the second one via a send task. The message is caught in an intermediate event.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\SendTask.bpmn"],
    "featureID": "Conformance__BPMN__activities__SendTask__SendTask",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "MARKER_exists",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "ReceiveTask",
    "description": "A test with two processes, which start in parallel. The first one sends a message to the second one via an intermediate message event. The message is caught in a receive task.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\ReceiveTask.bpmn"],
    "featureID": "Conformance__BPMN__activities__ReceiveTask__ReceiveTask",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "MARKER_exists",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "ReceiveTask_Instantiate",
    "description": "A test with two processes. The first one sends a message to the second one via an intermediate message event. The message is caught in a receive task, which instantiates the second process",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\activities\\ReceiveTask_Instantiate.bpmn"],
    "featureID": "Conformance__BPMN__activities__ReceiveTask__ReceiveTask_Instantiate",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Cancel_Event",
    "description": "A simple test for canceling a transaction. This test uses the two allowed cancel event types:CancelEndEvent (within the transaction) and CancelBoundaryEvent (interrupting, attached to the transaction).",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Cancel_Event.bpmn"],
    "featureID": "Conformance__BPMN__events__Cancel_Event__Cancel_Event",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Compensation_BoundaryEvent_SubProcess",
    "description": "Tests whether the compensation boundary event can be attached to a sub process.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Compensation_BoundaryEvent_SubProcess.bpmn"],
    "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_BoundaryEvent_SubProcess",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Compensation_EndEvent_SubProcess",
    "description": "A test with a compensation end event placed in a sub process which should trigger the compensation of the task performed before.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Compensation_EndEvent_SubProcess.bpmn"],
    "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_EndEvent_SubProcess",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Compensation_EndEvent_TopLevel",
    "description": "A test with a top level compensation end event which should trigger the compensation of the task performed before.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Compensation_EndEvent_TopLevel.bpmn"],
    "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_EndEvent_TopLevel",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Compensation_IntermediateEvent",
    "description": "A test with a top level compensation intermediate event which should trigger the compensation of the task performed before.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Compensation_IntermediateEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_IntermediateEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Compensation_StartEvent_EventSubProcess",
    "description": "A test with an event SubProcess, triggered by an Compensation StartEvent. The compensation is triggered by an Intermediate Throw Event placed outside the subprocess.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Compensation_StartEvent_EventSubProcess.bpmn"],
    "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_StartEvent_EventSubProcess",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Compensation_TriggeredByCancel",
    "description": "A test with a transaction which ends with a CancelEnd Event. In the course of canceling the transaction all successful executed tasks have to be compensated. Therefore, the compensational task Task1 has to be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Compensation_TriggeredByCancel.bpmn"],
    "featureID": "Conformance__BPMN__events__Compensation_Event__Compensation_TriggeredByCancel",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "Conditional_BoundaryEvent_SubProcess_Interrupting",
    "description": "A test for an conditional boundary event attached to a sub process which is marked as interrupting.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Conditional_BoundaryEvent_SubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Conditional_Event__Conditional_BoundaryEvent_SubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "Conditional_BoundaryEvent_SubProcess_NonInterrupting",
    "description": "A test for an conditional boundary event attached to a sub process which is marked as non interrupting.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Conditional_BoundaryEvent_SubProcess_NonInterrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Conditional_Event__Conditional_BoundaryEvent_SubProcess_NonInterrupting",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "Conditional_IntermediateEvent",
    "description": "A test for an intermediate conditional event: ConditionIntermediate checks a condition set at process instantiation. If the condition is fulfilled the process completes, if not the process is locked at the event and should not complete.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Conditional_IntermediateEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Conditional_Event__Conditional_IntermediateEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "test",
            "type": "String",
            "value": "a"
          },
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Conditional_StartEvent_EventSubProcess_Interrupting",
    "description": "A test for an interrupting conditional start event in an event sub process",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Conditional_StartEvent_EventSubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Conditional_Event__Conditional_StartEvent_EventSubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "test",
            "type": "String",
            "value": "a"
          },
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Conditional_StartEvent_EventSubProcess_NonInterrupting",
    "description": "A test for an conditional start event in an event sub process which is marked as non interrupting.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Conditional_StartEvent_EventSubProcess_NonInterrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Conditional_Event__Conditional_StartEvent_EventSubProcess_NonInterrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Error_BoundaryEvent_SubProcess_Interrupting",
    "description": "A test for the error boundary event attached to a sub process. The task (task2) following the SequenceFlow originating from the boundary event should be executed. The Task (task3) following the normal outgoing sequence flow after the SubProcess must not be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Error_BoundaryEvent_SubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Error_Event__Error_BoundaryEvent_SubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Error_BoundaryEvent_Transaction_Interrupting",
    "description": "A test for the error boundary event attached to a transaction. The task (task2) following the SequenceFlow originating from the boundary event should be executed. The Task (task3) following the normal outgoing sequence flow after the Transaction must not be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Error_BoundaryEvent_Transaction_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Error_Event__Error_BoundaryEvent_Transaction_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "ERROR_thrownErrorEvent",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Error_EndEvent_TopLevel",
    "description": "A simple test for the ErrorEndEvent in a top level process.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Error_EndEvent_TopLevel.bpmn"],
    "featureID": "Conformance__BPMN__events__Error_Event__Error_EndEvent_TopLevel",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Error_StartEvent_EventSubProcess_Interrupting",
    "description": "A test for the error start event in an event sub process. After the execution of the EventSubProcess the flow should continue normally.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Error_StartEvent_EventSubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Error_Event__Error_StartEvent_EventSubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Escalation_BoundaryEvent_SubProcess_Interrupting",
    "description": "A test for an escalation event interrupting a subprocess. The task (task2) following the Intermediate EscalationEvent and the Task (task4) following the normal outgoing sequence flow after the SubProcess must not be executed. The SequenceFlow originating from the boundary event is activated and therefore Task3 should be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Escalation_BoundaryEvent_SubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_BoundaryEvent_SubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task4",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Escalation_BoundaryEvent_SubProcess_NonInterrupting",
    "description": "A test for an escalation event NOT interrupting a subprocess. All tasks (Task1-4) should be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Escalation_BoundaryEvent_SubProcess_NonInterrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_BoundaryEvent_SubProcess_NonInterrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Escalation_EndEvent_SubProcess",
    "description": "A test for an escalation end event defined in a SubProcess. Only the task attached to the BoundaryEvent should be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Escalation_EndEvent_SubProcess.bpmn"],
    "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_EndEvent_SubProcess",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "ERROR_thrownEscalationEvent",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Escalation_EndEvent_TopLevel",
    "description": "A test for an escalation end event in a top level process.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Escalation_EndEvent_TopLevel.bpmn"],
    "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_EndEvent_TopLevel",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Escalation_IntermediateThrowEvent",
    "description": "A test for an escalation intermediate throw event: Task1 can only be executed if the event has been thrown (and caught).",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Escalation_IntermediateThrowEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_IntermediateThrowEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task2",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Escalation_StartEvent_EventSubProcess_Interrupting",
    "description": "A test for the interrupting escalation start event in an event SubProcess. Task1 within in the (normal) SubProcess should not be executed. Task 2 should be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Escalation_StartEvent_EventSubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_StartEvent_EventSubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Escalation_StartEvent_EventSubProcess_NonInterrupting",
    "description": "A test for the escalation start event in an event sub process which is marked as \"non interrupting\". Task2 within in the (normal) SubProcess and Task3 which is defined after the SubProcess should be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Escalation_StartEvent_EventSubProcess_NonInterrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Escalation_Event__Escalation_StartEvent_EventSubProcess_NonInterrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Link_Event",
    "description": "A simple test for link events",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Link_Event.bpmn"],
    "featureID": "Conformance__BPMN__events__Link_Event__Link_Event",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "MARKER_exists",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Message_StartEvent",
    "description": "A test with two processes. The first starts the second via a message sent in an intermediate event.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Message_StartEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Message_Event__Message_StartEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "MARKER_exists",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Message_IntermediateEvent",
    "description": "A test with two processes, which start in parallel. The first one sends a message to the second one, which is caught in an intermediate event.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Message_IntermediateEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Message_Event__Message_IntermediateEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "MARKER_exists",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Message_EndEvent",
    "description": "A test with two processes. The first starts the second via a message sent in an end event.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Message_EndEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Message_Event__Message_EndEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Signal_EndEvent_SubProcess",
    "description": "A test to test a signal end event placed in a SubProcess. The thrown signal is caught by an attached boundary event.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Signal_EndEvent_SubProcess.bpmn"],
    "featureID": "Conformance__BPMN__events__Signal_Event__Signal_EndEvent_SubProcess",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task4",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Signal_BoundaryEvent_SubProcess_NonInterrupting",
    "description": "A test for a signal boundary event NOT interrupting a subprocess. All tasks (Task1-4) should be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Signal_BoundaryEvent_SubProcess_NonInterrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Signal_Event__Signal_BoundaryEvent_SubProcess_NonInterrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Signal_BoundaryEvent_SubProcess_Interrupting",
    "description": "A test for a signal boundary event interrupting a subprocess. The task (task2) following the Intermediate SignalEvent and the Task (task4) following the normal outgoing sequence flow after the SubProcess must not be executed. The SequenceFlow originating from the boundary event is activated and therefore Task3 should be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Signal_BoundaryEvent_SubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Signal_Event__Signal_BoundaryEvent_SubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 10000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Signal_IntermediateEvent_ThrowAndCatch",
    "description": "A test for signal intermediate events: After a parallel split one branch of the process awaits a signal which is thrown by the other branch.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Signal_IntermediateEvent_ThrowAndCatch.bpmn"],
    "featureID": "Conformance__BPMN__events__Signal_Event__Signal_IntermediateEvent_ThrowAndCatch",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "MARKER_exists",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Signal_StartEvent",
    "description": "A test with two processes. The first one starts the second by throwing a signal in an intermediate event.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Signal_StartEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Signal_Event__Signal_StartEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "MARKER_exists",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Signal_EndEvent",
    "description": "A test with two processes. The first one starts the second by throwing a signal in its end event.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Signal_EndEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Signal_Event__Signal_EndEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "MARKER_exists",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Signal_IntermediateEvent",
    "description": "A test with two processes, which start in parallel. The first one throws a signal, which the second one catches.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Signal_IntermediateEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Signal_Event__Signal_IntermediateEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task2",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Signal_StartEvent_EventSubProcess_Interrupting",
    "description": "A test for the interrupting signal start event in an event SubProcess. Task1 within in the (normal) SubProcess should not be executed. Task 2 should be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Signal_StartEvent_EventSubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Signal_Event__Signal_StartEvent_EventSubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Signal_StartEvent_EventSubProcess_NonInterrupting",
    "description": "A test for the signal start event in an event sub process which is marked as \"non interrupting\". Task2 within in the (normal) SubProcess and Task3 which is defined after the SubProcess should be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Signal_StartEvent_EventSubProcess_NonInterrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Signal_Event__Signal_StartEvent_EventSubProcess_NonInterrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Terminate_Event",
    "description": "A test for a terminate end event",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Terminate_Event.bpmn"],
    "featureID": "Conformance__BPMN__events__Terminate_Event__Terminate_Event",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 5000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Timer_IntermediateEvent",
    "description": "A process with two scriptTasks. There is a intermediateCatchEvent in between the tasks that delay the execution for a short period of time.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Timer_IntermediateEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Timer_Event__Timer_IntermediateEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 5000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Timer_BoundaryEvent_SubProcess_NonInterrupting",
    "description": "A process with multiple scriptTasks and a subProcess with timer events. The execution of the subProcess is delayed by an intermediate timer event for a short amount of time. In the meantime, a boundary timer event should fire without interrupting the subProcess.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Timer_BoundaryEvent_SubProcess_NonInterrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Timer_Event__Timer_BoundaryEvent_SubProcess_NonInterrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 5000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task3",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Timer_BoundaryEvent_SubProcess_Interrupting",
    "description": "A process with multiple scriptTasks and a subProcess with timer events. The execution of the subProcess is delayed by an intermediate timer event for a short amount of time. In the meantime, a boundary timer event should fire and interrupt the subProcess.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Timer_BoundaryEvent_SubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Timer_Event__Timer_BoundaryEvent_SubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 12000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task2",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Timer_BoundaryEvent_SubProcess_Interrupting_Activity",
    "description": "A process with multiple scriptTasks and a subProcess with an activity which needs more time for executing than the boundary timer. The execution of the subProcess is therefore longer than the boundary timer event. It is expected that the boundary timer event fires before the task is completed and interrupts the subProcess.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Timer_BoundaryEvent_SubProcess_Interrupting_Activity.bpmn"],
    "featureID": "Conformance__BPMN__events__Timer_Event__Timer_BoundaryEvent_SubProcess_Interrupting_Activity",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 5000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Timer_StartEvent_EventSubProcess_NonInterrupting",
    "description": "A process with an ordinary subProcess and an event subProcess.The subProcess encloses the event subProcess and the latter is started by a timer startEvent. All activities should be executed without interruption.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Timer_StartEvent_EventSubProcess_NonInterrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Timer_Event__Timer_StartEvent_EventSubProcess_NonInterrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 5000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task2",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Timer_StartEvent_EventSubProcess_Interrupting",
    "description": "A process with an ordinary subProcess and an event subProcess. The subProcess encloses the event subProcess and the latter is started by a timer startEvent. The event subProcess interrupts the activities of its parent subProcess.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Timer_StartEvent_EventSubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Timer_Event__Timer_StartEvent_EventSubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 5000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Timer_IntermediateTimeCycleEvent",
    "description": "A process with two scriptTasks. There is an intermediateCatchEvent with the attribute timeCycle in between the tasks that triggers the second task four times.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Timer_IntermediateTimeCycleEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Timer_Event__Timer_IntermediateTimeCycleEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 65000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Timer_BoundaryEvent_SubProcess_TimeCycle",
    "description": "A process with multiple scriptTasks and a subProcess with timer events. The execution of the subProcess is delayed by an intermediate timer event for a short amount of time. In the meantime a boundary timer event with the attribute timecycle should fire four times without interrupting the subProcess, which consists of a timer event and a scriptTask.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Timer_BoundaryEvent_SubProcess_TimeCycle.bpmn"],
    "featureID": "Conformance__BPMN__events__Timer_Event__Timer_BoundaryEvent_SubProcess_TimeCycle",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 35000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Timer_StartEvent_TimeCycle_EventSubProcess_NonInterrupting",
    "description": "A process with an ordinary subProcess and an event subProcess. The subProcess encloses the event subProcess and the latter is started by a timer startEvent with the attribute timeCycle. The event SubProcess should be executed four times. All activities should be executed without interruption.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Timer_StartEvent_TimeCycle_EventSubProcess_NonInterrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__Timer_Event__Timer_StartEvent_TimeCycle_EventSubProcess_NonInterrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Multiple_Parallel_IntermediateEvent",
    "description": "A process with a multiple parallel event. After a parallel split one branch of the process awaits two signals which are thrown by the other branch. The multiple parallel event is thrown.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Multiple_Parallel_IntermediateEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_Parallel_IntermediateEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Multiple_IntermediateEvent_ThrowFirstEventDefinition",
    "description": "A process with a multiple event. After a parallel split one branch of the process awaits only one of the two events defined in the multiple event. The event thrown by the other branch, is the fist event definition of the multiple event. The multiple event is thrown.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Multiple_IntermediateEvent_ThrowFirstEventDefinition.bpmn"],
    "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_IntermediateEvent_ThrowFirstEventDefinition",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Multiple_IntermediateEvent_ThrowLastEventDefinition",
    "description": "A process with a multiple event. After a parallel split one branch of the process awaits only one of the two events defined in the multiple event. The event thrown by the other branch, is the last event definition of the multiple event. The multiple event is thrown.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Multiple_IntermediateEvent_ThrowLastEventDefinition.bpmn"],
    "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_IntermediateEvent_ThrowLastEventDefinition",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Multiple_IntermediateThrowEvent",
    "description": "A process with a multiple throw event. After a parallel split into three branches two of the branches await each one event. Both events are thrown in a multiple event on the third branch.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Multiple_IntermediateThrowEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_IntermediateThrowEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Multiple_IntermediateEvent_MissingEvent",
    "description": "A process with a multiple event. After a parallel split one branch of the process awaits only one of the two events defined in the multiple event. This event is never thrown. The multiple event is never thrown and thus the process is never finished.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Multiple_IntermediateEvent_MissingEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_IntermediateEvent_MissingEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Multiple_Parallel_IntermediateEvent_MissingEvent",
    "description": "A process with a multiple parallel event. After a parallel split one branch of the process awaits two signals of which only one is thrown by the other branch. The multiple parallel event is never thrown and thus the process is never finished.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\Multiple_Parallel_IntermediateEvent_MissingEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__Multiple_Events__Multiple_Parallel_IntermediateEvent_MissingEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "ERROR_thrownErrorEvent",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "EventDefinitionRef_Error_EndEvent_TopLevel",
    "description": "A simple test for the usage of eventDefinitionRef with an ErrorEndEvent in a top level process.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\EventDefinitionRef_Error_EndEvent_TopLevel.bpmn"],
    "featureID": "Conformance__BPMN__events__EventDefinitionRef__EventDefinitionRef_Error_EndEvent_TopLevel",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "EventDefinitionRef_Error_StartEvent_EventSubProcess_Interrupting",
    "description": "A test for the usage of eventDefinitionRef with an error start event in an event sub process. After the execution of the EventSubProcess the flow should continue normally.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\EventDefinitionRef_Error_StartEvent_EventSubProcess_Interrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__EventDefinitionRef__EventDefinitionRef_Error_StartEvent_EventSubProcess_Interrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task4",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "EventDefinitionRef_Signal_BoundaryEvent_SubProcess_NonInterrupting",
    "description": "A test for the usage of eventDefinitionRef with a signal boundary event NOT interrupting a subprocess. All tasks (Task1-4) should be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\EventDefinitionRef_Signal_BoundaryEvent_SubProcess_NonInterrupting.bpmn"],
    "featureID": "Conformance__BPMN__events__EventDefinitionRef__EventDefinitionRef_Signal_BoundaryEvent_SubProcess_NonInterrupting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "delay": 5000,
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "EventDefinitionRef_Timer_IntermediateEvent",
    "description": "A process with two scriptTasks. There is a intermediateCatchEvent in between the tasks that delay the execution for a short period of time.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\events\\EventDefinitionRef_Timer_IntermediateEvent.bpmn"],
    "featureID": "Conformance__BPMN__events__EventDefinitionRef__EventDefinitionRef_Timer_IntermediateEvent",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Lanes",
    "description": "A collaboration with a single participant with two lanes. Lanes have no effect on the execution and should be ignored.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\basics\\Lanes.bpmn"],
    "featureID": "Conformance__BPMN__basics__Lanes__Lanes",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Participant",
    "description": "A collaboration with a single participant",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\basics\\Participant.bpmn"],
    "featureID": "Conformance__BPMN__basics__Participant__Participant",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "SequenceFlow",
    "description": "A process with two scriptTasks connected by a sequenceFlow",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\basics\\SequenceFlow.bpmn"],
    "featureID": "Conformance__BPMN__basics__SequenceFlow__SequenceFlow",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "SequenceFlow_Conditional",
    "description": "A process with three scriptTasks connected by sequenceFlows. The first scriptTask points to the other tasks with sequenceFlows. One of these sequenceFlows is associated with a conditionExpression",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\basics\\SequenceFlow_Conditional.bpmn"],
    "featureID": "Conformance__BPMN__basics__SequenceFlow_Conditional__SequenceFlow_Conditional",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "SequenceFlow_ConditionalDefault",
    "description": "A process with three scriptTasks connected by sequenceFlows. The first scriptTask points to the other tasks with sequenceFlows. One of these sequenceFlows is associated with a conditionExpression, the other one is marked as default",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\basics\\SequenceFlow_ConditionalDefault.bpmn"],
    "featureID": "Conformance__BPMN__basics__SequenceFlow_Conditional__SequenceFlow_ConditionalDefault",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "test",
            "type": "String",
            "value": "b"
          },
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "SequenceFlow_ConditionalDefault_Normal",
    "description": "A process with four scriptTasks connected by sequenceFlows. The first scriptTask points to the other three tasks with sequenceFlows. The first of these sequenceFlows is associated with a conditionExpression, the second one is marked as default and the third has no condition associated. This is a special case document in Sec. 13.2.1, p. 427.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\basics\\SequenceFlow_ConditionalDefault_Normal.bpmn"],
    "featureID": "Conformance__BPMN__basics__SequenceFlow_Conditional__SequenceFlow_ConditionalDefault_Normal",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "ParallelGateway_Conditions",
    "description": "A process with four scriptTasks and two parallelGateways. Two of the scriptTasks are surrounded by the parallelGateways and the sequenceFlows pointing to the mergine gateway have conditions. These conditions should be ignored by an engine.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\errors\\ParallelGateway_Conditions.bpmn"],
    "featureID": "Conformance__BPMN__errors__ParallelGateway_Conditions__ParallelGateway_Conditions",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "ExclusiveDiverging_ParallelConverging",
    "description": "A process with four scriptTasks, a diverging exclusiveGateway and a converging parallelGateway. Two scriptTasks are enclosed by the gateways and the execution should deadlock, because only one incoming branch of the parallelGateway should ever be executed. Hence, the scriptTask following the parallelGateway should never be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\errors\\ExclusiveDiverging_ParallelConverging.bpmn"],
    "featureID": "Conformance__BPMN__errors__InvalidGatewayCombinations__ExclusiveDiverging_ParallelConverging",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "InclusiveDiverging_ParallelConverging",
    "description": "A process with four scriptTasks, a diverging inclusiveGateway and a converging parallelGateway. Two scriptTasks are enclosed by the gateways and the execution should deadlock if only one incoming branch of the parallelGateway is enabled. Hence, the scriptTask following the parallelGateway should only be executed in a single case.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\errors\\InclusiveDiverging_ParallelConverging.bpmn"],
    "featureID": "Conformance__BPMN__errors__InvalidGatewayCombinations__InclusiveDiverging_ParallelConverging",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "ERROR_generic",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "LoopTask_NegativeLoopMaximum",
    "description": "A scriptTask with standardLoopCharacteristics and a condition that always evaluates to true. Additionally a loopMaximum is set to minus one.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\errors\\LoopTask_NegativeLoopMaximum.bpmn"],
    "featureID": "Conformance__BPMN__errors__InvalidLoopConditions__LoopTask_NegativeLoopMaximum",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "ERROR_generic",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "MultiInstanceTask_NegativeLoopCardinality",
    "description": "A scriptTask that is marked as a sequential multiInstance task and is enabled minus one times.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\errors\\MultiInstanceTask_NegativeLoopCardinality.bpmn"],
    "featureID": "Conformance__BPMN__errors__InvalidLoopConditions__MultiInstanceTask_NegativeLoopCardinality",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Token_StartQuantity_Two",
    "description": "A process with a scriptTask with completionQuantity=1 and, immediately afterwards, a scriptTask with startQuantity=2. Since there will never two tokens arrive, the scriptTask must not be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\errors\\Token_StartQuantity_Two.bpmn"],
    "featureID": "Conformance__BPMN__errors__InvalidTokenQuantity__Token_StartQuantity_Two",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "ERROR_generic",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Token_StartQuantity_Zero",
    "description": "A process with a scriptTask with startQuantity=0. Since startQuantity must not be zero, the process must not be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\errors\\Token_StartQuantity_Zero.bpmn"],
    "featureID": "Conformance__BPMN__errors__InvalidTokenQuantity__Token_StartQuantity_Zero",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "ERROR_generic",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Token_CompletionQuantity_Zero",
    "description": "A process with a scriptTask with completionQuantity=0. Since completionQuantity must not be zero, the process must not be executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\errors\\Token_CompletionQuantity_Zero.bpmn"],
    "featureID": "Conformance__BPMN__errors__InvalidTokenQuantity__Token_CompletionQuantity_Zero",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "DATA_correct",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "DataObject_ReadWrite_String",
    "description": "A process consisting of three scriptTasks, the second of which writes a string data object, and the third of which reads the string data object and writes an assertion token into the final log if successful.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\data\\DataObject_ReadWrite_String.bpmn"],
    "featureID": "Conformance__BPMN__data__DataObject__DataObject_ReadWrite_String",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "DATA_correct",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "Property_ReadWrite_String",
    "description": "A process consisting of three scriptTasks, the second of which writes a string property, and the third of which reads the string property and writes an assertion token into the final log if successful.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\data\\Property_ReadWrite_String.bpmn"],
    "featureID": "Conformance__BPMN__data__Property__Property_ReadWrite_String",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP01_Sequence",
    "description": "Test Process for WCP01 Sequence: Containing a Start Event, two ScriptTasks (for logging purposes) and an EndEvent. All connected by only basic SequenceFlows.Test passed successfully if the trace confirms the execution of 'Task1'.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP01_Sequence.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP01_Sequence__WCP01_Sequence",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP02_ParallelSplit",
    "description": "WCP02 ParallelSplit: Checking the ability to create two parallel branches by a ParallelGateway followed by a ScriptTask in each branch.Test passed successfully if both Tasks are executed.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP02_ParallelSplit.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP02_ParallelSplit__WCP02_ParallelSplit",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP03_Synchronization",
    "description": "WCP03 Synchronization: Checking the ability to synchronize two parallel branches. The ScriptTask after the merging ParallelGateway has to be executed only once.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP03_Synchronization.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP03_Synchronization__WCP03_Synchronization",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "WCP04_ExclusiveChoice",
    "description": "WCP04 Exclusive Choice: Checking the ability to create exclusive branches based on an input. If the input contains 'a' it should execute task1, if it contains 'b' it should execute task2, in any other cases, the default task (task3) should be executed.Special case: If the input contains 'a' and 'b' only the first branch must be activated (task1 here)",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP04_ExclusiveChoice.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP04_ExclusiveChoice__WCP04_ExclusiveChoice",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 5,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ac"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 5
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 6,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "bc"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 6
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 7,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "abc"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 7
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "WCP05_SimpleMerge",
    "description": "WCP05 Simple Merge: Checking the ability to merge multiple branches into a single branch with using a converging XOR gateway. The ScriptTask after the merging gateway must be triggered each time a token arrives.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP05_SimpleMerge.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP05_SimpleMerge__WCP05_SimpleMerge",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 5,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ac"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 5
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 6,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "bc"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 6
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 7,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "abc"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 7
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "WCP06_MultiChoice_InclusiveGateway",
    "description": "WCP06 Multi Choice: Checking the ability to perform an OR-Split using an inclusive gateway. One or more branches should be created depending on the input. The third branch is only executed if no other condition is evaluated to true.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP06_MultiChoice_InclusiveGateway.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP06_MultiChoice__WCP06_MultiChoice_InclusiveGateway",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 5,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ac"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 5
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 6,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "bc"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 6
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 7,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "abc"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 7
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "WCP06_MultiChoice_Implicit",
    "description": "WCP06 Multi Choice: Checking the ability to perform an OR-Split using conditional sequence flows without a preceding gateway. One or more branches should be created depending on the input. The third branch is only executed if no other condition is evaluated to true.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP06_MultiChoice_Implicit.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP06_MultiChoice__WCP06_MultiChoice_Implicit",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 5,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ac"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 5
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 6,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "bc"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 6
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [{
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 7,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "abc"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 7
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "WCP06_MultiChoice_ComplexGateway",
    "description": "WCP06 Multi Choice: Checking the ability to perform an OR-Split using a complex gateway. One or more branches should be created depending on the input. The third branch is only executed if no other condition is evaluated to true.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP06_MultiChoice_ComplexGateway.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP06_MultiChoice__WCP06_MultiChoice_ComplexGateway",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "WCP07_StructuredSynchronizingMerge",
    "description": "WCP07 StructuredSynchronizingMerge: Checks the ability to synchronize the merging of branches created earlier using a multiple choice (see WCP06).",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP07_StructuredSynchronizingMerge.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP07_StructuredSynchronizingMerge__WCP07_StructuredSynchronizingMerge",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "c"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 4,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ab"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 4
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 5,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "ac"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 5
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 6,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "bc"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 6
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 7,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "abc"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 7
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "WCP08_MultiMerge",
    "description": "WCP08 MultiMerge: Tests the convergence of two or more branches into a single path without synchronization.The test is equivalent to WCP05 for BPMN.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP08_MultiMerge.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP08_MultiMerge__WCP08_MultiMerge",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP09_Structured_Discriminator_ComplexGateway",
    "description": "WCP09 Structured Discriminator: Implementation of WCP09 using a mergingComplexGateway with activationCount>=1. I.e, the gateway fires upon completion of the first incoming token and is then disabled.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP09_Structured_Discriminator_ComplexGateway.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP09_Structured_Discriminator__WCP09_Structured_Discriminator_ComplexGateway",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP09_Structured_Discriminator_MultiInstance",
    "description": "WCP09 partial workaround using MultiInstance: The flow after a MultiInstance Activity should continue afterthe first instance has completed.This covers only a special case for WCP09 Discriminator where one of various EQUAL activities are used.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP09_Structured_Discriminator_MultiInstance.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP09_Structured_Discriminator__WCP09_Structured_Discriminator_MultiInstance",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 2
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 1
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 3,
        "name": "Good-Case",
        "testSteps": [{
          "inputs": [
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 3
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "WCP10_ArbitraryCycles",
    "description": "WCP10 arbitrary cycle: Structure is based on the example on workflowpatterns.com: The test consists of a series of scripttasks and exclusive gateways. After the creation of the log, task1 is logged, afterwards a counter integerVariable is incremented and task1 is repeated if the integerVariable is <2; otherwise task2 is logged which will be repeated if integerVariable<3",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP10_ArbitraryCycles.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP10_ArbitraryCycles__WCP10_ArbitraryCycles",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task1",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP11_ImplicitTermination",
    "description": "A process that terminates when all contained activity instances have completed",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP11_ImplicitTermination.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP11_ImplicitTermination__WCP11_ImplicitTermination",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP12_MultipleInstancesWithoutSynchronization",
    "description": "A process which creates three instances of one script task using multiInstanceLoopCharacteristics, followed by a second activity. The behavior of the multi instance activity is set to None. Hence, a signal should be fired for every complete multi instance activity.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP12_MultipleInstancesWithoutSynchronization.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP12_MultipleInstancesWithoutSynchronization__WCP12_MultipleInstancesWithoutSynchronization",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge",
    "description": "A process which creates three instances of one script task using multiInstanceLoopCharacteristics, followed by a second activity. The number of instances is hard-coded into the process. The behavior of the multi instance activity is set to 'All'.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge__WCP13_MultipleInstancesWithAPrioriDesignTimeKnowledge",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 3
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge",
    "description": "A process with a multiple instances activity, where the loop cardinality is read from a variable at run-time. The behavior of the multi instance activity is set to 'All'.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge__WCP14_MultipleInstancesWithAPrioriRuntimeKnowledge",
    "testPartners": []
  },
  {
    "testCases": [
      {
        "number": 1,
        "name": "Good-Case",
        "testSteps": [{
          "delay": 8000,
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "a"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 1
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task1",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task3",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      },
      {
        "number": 2,
        "name": "Good-Case",
        "testSteps": [{
          "delay": 8000,
          "inputs": [
            {
              "name": "test",
              "type": "String",
              "value": "b"
            },
            {
              "name": "testCaseNumber",
              "type": "Integer",
              "value": 2
            },
            {
              "name": "integerVariable",
              "type": "Integer",
              "value": 0
            }
          ],
          "assertions": [
            {
              "trace": "SCRIPT_task2",
              "type": "BPMNTestAssertion"
            },
            {
              "trace": "SCRIPT_task4",
              "type": "BPMNTestAssertion"
            }
          ],
          "type": "BPMNTestStep"
        }]
      }
    ],
    "name": "WCP16_DeferredChoice",
    "description": "An event-based exclusive gateway with two possible branches wait for one out of two signals which are signaled depending on the input. Using a timer, it is ensured that the signals are signaled when the event-based gateway is already waiting for them. Based on EventBasedGateway_Signals",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP16_DeferredChoice.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP16_DeferredChoice__WCP16_DeferredChoice",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task3",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP17_InterleavedParallelRouting",
    "description": "A set of activity instances is executed sequentially in an order that is decided at run time. No two activity instances of this set are active at the same point in time",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP17_InterleavedParallelRouting.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP17_InterleavedParallelRouting__WCP17_InterleavedParallelRouting",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [{
          "trace": "SCRIPT_task2",
          "type": "BPMNTestAssertion"
        }],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP19_CancelTask",
    "description": "An activity can be canceled when it emits an error event.",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP19_CancelTask.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP19_CancelTask__WCP19_CancelTask",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP20_CancelCaseError",
    "description": "Cancels a sub-process by emitting an error event inside the sub-process which is handled through a boundary event. See Error_BoundaryEvent_SubProcess_Interrupting",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP20_CancelCaseError.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP20_CancelCase__WCP20_CancelCaseError",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [
          {
            "trace": "SCRIPT_task1",
            "type": "BPMNTestAssertion"
          },
          {
            "trace": "SCRIPT_task2",
            "type": "BPMNTestAssertion"
          }
        ],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP20_CancelCaseCancel",
    "description": "Cancels a sub-process by emitting a cancel event inside the sub-process which is handled through a boundary event. See Cancel_Event",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP20_CancelCaseCancel.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP20_CancelCase__WCP20_CancelCaseCancel",
    "testPartners": []
  },
  {
    "testCases": [{
      "number": 1,
      "name": "Good-Case-1",
      "testSteps": [{
        "inputs": [
          {
            "name": "testCaseNumber",
            "type": "Integer",
            "value": 1
          },
          {
            "name": "integerVariable",
            "type": "Integer",
            "value": 0
          }
        ],
        "assertions": [],
        "type": "BPMNTestStep"
      }]
    }],
    "name": "WCP20_CancelCaseTerminate",
    "description": "Cancels a process immediately by emitting a terminate event. See Terminate_Event",
    "language": "BPMN",
    "engineIndependentFiles": ["src\\main\\tests\\files\\bpmn\\cfpatterns\\WCP20_CancelCaseTerminate.bpmn"],
    "featureID": "Expressiveness__BPMN__cfpatterns__WCP20_CancelCase__WCP20_CancelCaseTerminate",
    "testPartners": []
  }
]